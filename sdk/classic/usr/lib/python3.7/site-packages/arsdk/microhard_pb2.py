# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: arsdk/microhard.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from parrot.protobuf import extensions_pb2 as parrot_dot_protobuf_dot_extensions__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='arsdk/microhard.proto',
  package='arsdk.microhard',
  syntax='proto3',
  serialized_options=_b('\n com.parrot.drone.arsdk.microhardB\tMicrohard\302\336\037\tmicrohard'),
  serialized_pb=_b('\n\x15\x61rsdk/microhard.proto\x12\x0f\x61rsdk.microhard\x1a parrot/protobuf/extensions.proto\"\x80\x04\n\x07\x43ommand\x12\x36\n\tget_state\x18\x10 \x01(\x0b\x32!.arsdk.microhard.Command.GetStateH\x00\x12\x34\n\x08power_on\x18\x11 \x01(\x0b\x32 .arsdk.microhard.Command.PowerOnH\x00\x12\x35\n\x08shutdown\x18\x12 \x01(\x0b\x32!.arsdk.microhard.Command.ShutDownH\x00\x12:\n\x0bpair_device\x18\x13 \x01(\x0b\x32#.arsdk.microhard.Command.PairDeviceH\x00\x1a\x30\n\x08GetState\x12$\n\x1cinclude_default_capabilities\x18\x01 \x01(\x08\x1a\t\n\x07PowerOn\x1a\n\n\x08ShutDown\x1a\xbe\x01\n\nPairDevice\x12\x12\n\nnetwork_id\x18\x01 \x01(\t\x12\x16\n\x0e\x65ncryption_key\x18\x02 \x01(\t\x12>\n\x12pairing_parameters\x18\x03 \x01(\x0b\x32\".arsdk.microhard.PairingParameters\x12\x44\n\x15\x63onnection_parameters\x18\x04 \x01(\x0b\x32%.arsdk.microhard.ConnectionParametersB\x04\n\x02idJ\x04\x08\x01\x10\x10\"\xa0\x06\n\x05\x45vent\x12-\n\x05state\x18\x10 \x01(\x0b\x32\x1c.arsdk.microhard.Event.StateH\x00\x12>\n\x0ehardware_error\x18\x12 \x01(\x0b\x32$.arsdk.microhard.Event.HardwareErrorH\x00\x12\x31\n\x07pairing\x18\x13 \x01(\x0b\x32\x1e.arsdk.microhard.Event.PairingH\x00\x1a\x83\x03\n\x05State\x12;\n\x14\x64\x65\x66\x61ult_capabilities\x18\x01 \x01(\x0b\x32\x1d.arsdk.microhard.Capabilities\x12\x31\n\x07offline\x18\x02 \x01(\x0b\x32\x1e.arsdk.microhard.State.OfflineH\x00\x12\x31\n\x07\x62ooting\x18\x03 \x01(\x0b\x32\x1e.arsdk.microhard.State.BootingH\x00\x12+\n\x04idle\x18\x04 \x01(\x0b\x32\x1b.arsdk.microhard.State.IdleH\x00\x12\x31\n\x07pairing\x18\x05 \x01(\x0b\x32\x1e.arsdk.microhard.State.PairingH\x00\x12\x37\n\nconnecting\x18\x06 \x01(\x0b\x32!.arsdk.microhard.State.ConnectingH\x00\x12\x35\n\tconnected\x18\x07 \x01(\x0b\x32 .arsdk.microhard.State.ConnectedH\x00\x42\x07\n\x05state\x1a\x43\n\rHardwareError\x12\x32\n\x05\x63\x61use\x18\x01 \x01(\x0e\x32#.arsdk.microhard.HardwareErrorCause\x1a\x9d\x01\n\x07Pairing\x12\x39\n\x07\x66\x61ilure\x18\x01 \x01(\x0b\x32&.arsdk.microhard.PairingStatus.FailureH\x00\x12\x39\n\x07success\x18\x02 \x01(\x0b\x32&.arsdk.microhard.PairingStatus.SuccessH\x00\x12\x12\n\nnetwork_id\x18\x03 \x01(\tB\x08\n\x06statusB\x04\n\x02idJ\x04\x08\x01\x10\x10\"\xca\x01\n\x0c\x43\x61pabilities\x12\x13\n\x0b\x63hannel_min\x18\x01 \x01(\r\x12\x13\n\x0b\x63hannel_max\x18\x02 \x01(\r\x12\x11\n\tpower_min\x18\x03 \x01(\r\x12\x11\n\tpower_max\x18\x04 \x01(\r\x12.\n\nbandwidths\x18\x05 \x03(\x0e\x32\x1a.arsdk.microhard.Bandwidth\x12:\n\x15\x65ncryption_algorithms\x18\x06 \x03(\x0e\x32\x1b.arsdk.microhard.Encryption\"e\n\x14\x43onnectionParameters\x12\x0f\n\x07\x63hannel\x18\x01 \x01(\r\x12\r\n\x05power\x18\x02 \x01(\r\x12-\n\tbandwidth\x18\x03 \x01(\x0e\x32\x1a.arsdk.microhard.Bandwidth\"\x8e\x02\n\x05State\x1a\t\n\x07Offline\x1a\t\n\x07\x42ooting\x1a\x06\n\x04Idle\x1a\xa3\x01\n\x07Pairing\x12\x12\n\nnetwork_id\x18\x01 \x01(\t\x12>\n\x12pairing_parameters\x18\x02 \x01(\x0b\x32\".arsdk.microhard.PairingParameters\x12\x44\n\x15\x63onnection_parameters\x18\x03 \x01(\x0b\x32%.arsdk.microhard.ConnectionParameters\x1a \n\nConnecting\x12\x12\n\ndevice_uid\x18\x01 \x01(\t\x1a\x1f\n\tConnected\x12\x12\n\ndevice_uid\x18\x01 \x01(\t\"\x9d\x01\n\x11PairingParameters\x12\x0f\n\x07\x63hannel\x18\x01 \x01(\r\x12\r\n\x05power\x18\x02 \x01(\r\x12-\n\tbandwidth\x18\x03 \x01(\x0e\x32\x1a.arsdk.microhard.Bandwidth\x12\x39\n\x14\x65ncryption_algorithm\x18\x04 \x01(\x0e\x32\x1b.arsdk.microhard.Encryption\"p\n\rPairingStatus\x1a@\n\x07\x46\x61ilure\x12\x35\n\x06reason\x18\x01 \x01(\x0e\x32%.arsdk.microhard.PairingFailureReason\x1a\x1d\n\x07Success\x12\x12\n\ndevice_uid\x18\x01 \x01(\t*[\n\tBandwidth\x12\x12\n\x0e\x42\x41NDWIDTH_1MHZ\x10\x00\x12\x12\n\x0e\x42\x41NDWIDTH_2MHZ\x10\x01\x12\x12\n\x0e\x42\x41NDWIDTH_4MHZ\x10\x02\x12\x12\n\x0e\x42\x41NDWIDTH_8MHZ\x10\x03*O\n\nEncryption\x12\x13\n\x0f\x45NCRYPTION_NONE\x10\x00\x12\x15\n\x11\x45NCRYPTION_AES128\x10\x01\x12\x15\n\x11\x45NCRYPTION_AES256\x10\x02*7\n\x12HardwareErrorCause\x12!\n\x1dHARDWARE_ERROR_CAUSE_INTERNAL\x10\x00*\xf2\x01\n\x14PairingFailureReason\x12)\n%PAIRING_FAILURE_REASON_INTERNAL_ERROR\x10\x00\x12)\n%PAIRING_FAILURE_REASON_ALREADY_PAIRED\x10\x01\x12/\n+PAIRING_FAILURE_REASON_DEVICE_NOT_REACHABLE\x10\x02\x12(\n$PAIRING_FAILURE_REASON_INVALID_STATE\x10\x03\x12)\n%PAIRING_FAILURE_REASON_INVALID_CONFIG\x10\x04\x42:\n com.parrot.drone.arsdk.microhardB\tMicrohard\xc2\xde\x1f\tmicrohardb\x06proto3')
  ,
  dependencies=[parrot_dot_protobuf_dot_extensions__pb2.DESCRIPTOR,])

_BANDWIDTH = _descriptor.EnumDescriptor(
  name='Bandwidth',
  full_name='arsdk.microhard.Bandwidth',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='BANDWIDTH_1MHZ', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BANDWIDTH_2MHZ', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BANDWIDTH_4MHZ', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BANDWIDTH_8MHZ', index=3, number=3,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2249,
  serialized_end=2340,
)
_sym_db.RegisterEnumDescriptor(_BANDWIDTH)

Bandwidth = enum_type_wrapper.EnumTypeWrapper(_BANDWIDTH)
_ENCRYPTION = _descriptor.EnumDescriptor(
  name='Encryption',
  full_name='arsdk.microhard.Encryption',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ENCRYPTION_NONE', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENCRYPTION_AES128', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENCRYPTION_AES256', index=2, number=2,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2342,
  serialized_end=2421,
)
_sym_db.RegisterEnumDescriptor(_ENCRYPTION)

Encryption = enum_type_wrapper.EnumTypeWrapper(_ENCRYPTION)
_HARDWAREERRORCAUSE = _descriptor.EnumDescriptor(
  name='HardwareErrorCause',
  full_name='arsdk.microhard.HardwareErrorCause',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HARDWARE_ERROR_CAUSE_INTERNAL', index=0, number=0,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2423,
  serialized_end=2478,
)
_sym_db.RegisterEnumDescriptor(_HARDWAREERRORCAUSE)

HardwareErrorCause = enum_type_wrapper.EnumTypeWrapper(_HARDWAREERRORCAUSE)
_PAIRINGFAILUREREASON = _descriptor.EnumDescriptor(
  name='PairingFailureReason',
  full_name='arsdk.microhard.PairingFailureReason',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PAIRING_FAILURE_REASON_INTERNAL_ERROR', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PAIRING_FAILURE_REASON_ALREADY_PAIRED', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PAIRING_FAILURE_REASON_DEVICE_NOT_REACHABLE', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PAIRING_FAILURE_REASON_INVALID_STATE', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PAIRING_FAILURE_REASON_INVALID_CONFIG', index=4, number=4,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2481,
  serialized_end=2723,
)
_sym_db.RegisterEnumDescriptor(_PAIRINGFAILUREREASON)

PairingFailureReason = enum_type_wrapper.EnumTypeWrapper(_PAIRINGFAILUREREASON)
BANDWIDTH_1MHZ = 0
BANDWIDTH_2MHZ = 1
BANDWIDTH_4MHZ = 2
BANDWIDTH_8MHZ = 3
ENCRYPTION_NONE = 0
ENCRYPTION_AES128 = 1
ENCRYPTION_AES256 = 2
HARDWARE_ERROR_CAUSE_INTERNAL = 0
PAIRING_FAILURE_REASON_INTERNAL_ERROR = 0
PAIRING_FAILURE_REASON_ALREADY_PAIRED = 1
PAIRING_FAILURE_REASON_DEVICE_NOT_REACHABLE = 2
PAIRING_FAILURE_REASON_INVALID_STATE = 3
PAIRING_FAILURE_REASON_INVALID_CONFIG = 4



_COMMAND_GETSTATE = _descriptor.Descriptor(
  name='GetState',
  full_name='arsdk.microhard.Command.GetState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='include_default_capabilities', full_name='arsdk.microhard.Command.GetState.include_default_capabilities', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=313,
  serialized_end=361,
)

_COMMAND_POWERON = _descriptor.Descriptor(
  name='PowerOn',
  full_name='arsdk.microhard.Command.PowerOn',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=363,
  serialized_end=372,
)

_COMMAND_SHUTDOWN = _descriptor.Descriptor(
  name='ShutDown',
  full_name='arsdk.microhard.Command.ShutDown',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=374,
  serialized_end=384,
)

_COMMAND_PAIRDEVICE = _descriptor.Descriptor(
  name='PairDevice',
  full_name='arsdk.microhard.Command.PairDevice',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network_id', full_name='arsdk.microhard.Command.PairDevice.network_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='encryption_key', full_name='arsdk.microhard.Command.PairDevice.encryption_key', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pairing_parameters', full_name='arsdk.microhard.Command.PairDevice.pairing_parameters', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='connection_parameters', full_name='arsdk.microhard.Command.PairDevice.connection_parameters', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=387,
  serialized_end=577,
)

_COMMAND = _descriptor.Descriptor(
  name='Command',
  full_name='arsdk.microhard.Command',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='get_state', full_name='arsdk.microhard.Command.get_state', index=0,
      number=16, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='power_on', full_name='arsdk.microhard.Command.power_on', index=1,
      number=17, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='shutdown', full_name='arsdk.microhard.Command.shutdown', index=2,
      number=18, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pair_device', full_name='arsdk.microhard.Command.pair_device', index=3,
      number=19, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_COMMAND_GETSTATE, _COMMAND_POWERON, _COMMAND_SHUTDOWN, _COMMAND_PAIRDEVICE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='id', full_name='arsdk.microhard.Command.id',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=77,
  serialized_end=589,
)


_EVENT_STATE = _descriptor.Descriptor(
  name='State',
  full_name='arsdk.microhard.Event.State',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='default_capabilities', full_name='arsdk.microhard.Event.State.default_capabilities', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='offline', full_name='arsdk.microhard.Event.State.offline', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='booting', full_name='arsdk.microhard.Event.State.booting', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='idle', full_name='arsdk.microhard.Event.State.idle', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pairing', full_name='arsdk.microhard.Event.State.pairing', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='connecting', full_name='arsdk.microhard.Event.State.connecting', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='connected', full_name='arsdk.microhard.Event.State.connected', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='state', full_name='arsdk.microhard.Event.State.state',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=764,
  serialized_end=1151,
)

_EVENT_HARDWAREERROR = _descriptor.Descriptor(
  name='HardwareError',
  full_name='arsdk.microhard.Event.HardwareError',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cause', full_name='arsdk.microhard.Event.HardwareError.cause', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1153,
  serialized_end=1220,
)

_EVENT_PAIRING = _descriptor.Descriptor(
  name='Pairing',
  full_name='arsdk.microhard.Event.Pairing',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='failure', full_name='arsdk.microhard.Event.Pairing.failure', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='success', full_name='arsdk.microhard.Event.Pairing.success', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='network_id', full_name='arsdk.microhard.Event.Pairing.network_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='status', full_name='arsdk.microhard.Event.Pairing.status',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1223,
  serialized_end=1380,
)

_EVENT = _descriptor.Descriptor(
  name='Event',
  full_name='arsdk.microhard.Event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state', full_name='arsdk.microhard.Event.state', index=0,
      number=16, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='hardware_error', full_name='arsdk.microhard.Event.hardware_error', index=1,
      number=18, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pairing', full_name='arsdk.microhard.Event.pairing', index=2,
      number=19, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_EVENT_STATE, _EVENT_HARDWAREERROR, _EVENT_PAIRING, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='id', full_name='arsdk.microhard.Event.id',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=592,
  serialized_end=1392,
)


_CAPABILITIES = _descriptor.Descriptor(
  name='Capabilities',
  full_name='arsdk.microhard.Capabilities',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='channel_min', full_name='arsdk.microhard.Capabilities.channel_min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='channel_max', full_name='arsdk.microhard.Capabilities.channel_max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='power_min', full_name='arsdk.microhard.Capabilities.power_min', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='power_max', full_name='arsdk.microhard.Capabilities.power_max', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bandwidths', full_name='arsdk.microhard.Capabilities.bandwidths', index=4,
      number=5, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='encryption_algorithms', full_name='arsdk.microhard.Capabilities.encryption_algorithms', index=5,
      number=6, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1395,
  serialized_end=1597,
)


_CONNECTIONPARAMETERS = _descriptor.Descriptor(
  name='ConnectionParameters',
  full_name='arsdk.microhard.ConnectionParameters',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='channel', full_name='arsdk.microhard.ConnectionParameters.channel', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='power', full_name='arsdk.microhard.ConnectionParameters.power', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bandwidth', full_name='arsdk.microhard.ConnectionParameters.bandwidth', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1599,
  serialized_end=1700,
)


_STATE_OFFLINE = _descriptor.Descriptor(
  name='Offline',
  full_name='arsdk.microhard.State.Offline',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1712,
  serialized_end=1721,
)

_STATE_BOOTING = _descriptor.Descriptor(
  name='Booting',
  full_name='arsdk.microhard.State.Booting',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1723,
  serialized_end=1732,
)

_STATE_IDLE = _descriptor.Descriptor(
  name='Idle',
  full_name='arsdk.microhard.State.Idle',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1734,
  serialized_end=1740,
)

_STATE_PAIRING = _descriptor.Descriptor(
  name='Pairing',
  full_name='arsdk.microhard.State.Pairing',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network_id', full_name='arsdk.microhard.State.Pairing.network_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pairing_parameters', full_name='arsdk.microhard.State.Pairing.pairing_parameters', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='connection_parameters', full_name='arsdk.microhard.State.Pairing.connection_parameters', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1743,
  serialized_end=1906,
)

_STATE_CONNECTING = _descriptor.Descriptor(
  name='Connecting',
  full_name='arsdk.microhard.State.Connecting',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_uid', full_name='arsdk.microhard.State.Connecting.device_uid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1908,
  serialized_end=1940,
)

_STATE_CONNECTED = _descriptor.Descriptor(
  name='Connected',
  full_name='arsdk.microhard.State.Connected',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_uid', full_name='arsdk.microhard.State.Connected.device_uid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1942,
  serialized_end=1973,
)

_STATE = _descriptor.Descriptor(
  name='State',
  full_name='arsdk.microhard.State',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[_STATE_OFFLINE, _STATE_BOOTING, _STATE_IDLE, _STATE_PAIRING, _STATE_CONNECTING, _STATE_CONNECTED, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1703,
  serialized_end=1973,
)


_PAIRINGPARAMETERS = _descriptor.Descriptor(
  name='PairingParameters',
  full_name='arsdk.microhard.PairingParameters',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='channel', full_name='arsdk.microhard.PairingParameters.channel', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='power', full_name='arsdk.microhard.PairingParameters.power', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bandwidth', full_name='arsdk.microhard.PairingParameters.bandwidth', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='encryption_algorithm', full_name='arsdk.microhard.PairingParameters.encryption_algorithm', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1976,
  serialized_end=2133,
)


_PAIRINGSTATUS_FAILURE = _descriptor.Descriptor(
  name='Failure',
  full_name='arsdk.microhard.PairingStatus.Failure',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reason', full_name='arsdk.microhard.PairingStatus.Failure.reason', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2152,
  serialized_end=2216,
)

_PAIRINGSTATUS_SUCCESS = _descriptor.Descriptor(
  name='Success',
  full_name='arsdk.microhard.PairingStatus.Success',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_uid', full_name='arsdk.microhard.PairingStatus.Success.device_uid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2218,
  serialized_end=2247,
)

_PAIRINGSTATUS = _descriptor.Descriptor(
  name='PairingStatus',
  full_name='arsdk.microhard.PairingStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[_PAIRINGSTATUS_FAILURE, _PAIRINGSTATUS_SUCCESS, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2135,
  serialized_end=2247,
)

_COMMAND_GETSTATE.containing_type = _COMMAND
_COMMAND_POWERON.containing_type = _COMMAND
_COMMAND_SHUTDOWN.containing_type = _COMMAND
_COMMAND_PAIRDEVICE.fields_by_name['pairing_parameters'].message_type = _PAIRINGPARAMETERS
_COMMAND_PAIRDEVICE.fields_by_name['connection_parameters'].message_type = _CONNECTIONPARAMETERS
_COMMAND_PAIRDEVICE.containing_type = _COMMAND
_COMMAND.fields_by_name['get_state'].message_type = _COMMAND_GETSTATE
_COMMAND.fields_by_name['power_on'].message_type = _COMMAND_POWERON
_COMMAND.fields_by_name['shutdown'].message_type = _COMMAND_SHUTDOWN
_COMMAND.fields_by_name['pair_device'].message_type = _COMMAND_PAIRDEVICE
_COMMAND.oneofs_by_name['id'].fields.append(
  _COMMAND.fields_by_name['get_state'])
_COMMAND.fields_by_name['get_state'].containing_oneof = _COMMAND.oneofs_by_name['id']
_COMMAND.oneofs_by_name['id'].fields.append(
  _COMMAND.fields_by_name['power_on'])
_COMMAND.fields_by_name['power_on'].containing_oneof = _COMMAND.oneofs_by_name['id']
_COMMAND.oneofs_by_name['id'].fields.append(
  _COMMAND.fields_by_name['shutdown'])
_COMMAND.fields_by_name['shutdown'].containing_oneof = _COMMAND.oneofs_by_name['id']
_COMMAND.oneofs_by_name['id'].fields.append(
  _COMMAND.fields_by_name['pair_device'])
_COMMAND.fields_by_name['pair_device'].containing_oneof = _COMMAND.oneofs_by_name['id']
_EVENT_STATE.fields_by_name['default_capabilities'].message_type = _CAPABILITIES
_EVENT_STATE.fields_by_name['offline'].message_type = _STATE_OFFLINE
_EVENT_STATE.fields_by_name['booting'].message_type = _STATE_BOOTING
_EVENT_STATE.fields_by_name['idle'].message_type = _STATE_IDLE
_EVENT_STATE.fields_by_name['pairing'].message_type = _STATE_PAIRING
_EVENT_STATE.fields_by_name['connecting'].message_type = _STATE_CONNECTING
_EVENT_STATE.fields_by_name['connected'].message_type = _STATE_CONNECTED
_EVENT_STATE.containing_type = _EVENT
_EVENT_STATE.oneofs_by_name['state'].fields.append(
  _EVENT_STATE.fields_by_name['offline'])
_EVENT_STATE.fields_by_name['offline'].containing_oneof = _EVENT_STATE.oneofs_by_name['state']
_EVENT_STATE.oneofs_by_name['state'].fields.append(
  _EVENT_STATE.fields_by_name['booting'])
_EVENT_STATE.fields_by_name['booting'].containing_oneof = _EVENT_STATE.oneofs_by_name['state']
_EVENT_STATE.oneofs_by_name['state'].fields.append(
  _EVENT_STATE.fields_by_name['idle'])
_EVENT_STATE.fields_by_name['idle'].containing_oneof = _EVENT_STATE.oneofs_by_name['state']
_EVENT_STATE.oneofs_by_name['state'].fields.append(
  _EVENT_STATE.fields_by_name['pairing'])
_EVENT_STATE.fields_by_name['pairing'].containing_oneof = _EVENT_STATE.oneofs_by_name['state']
_EVENT_STATE.oneofs_by_name['state'].fields.append(
  _EVENT_STATE.fields_by_name['connecting'])
_EVENT_STATE.fields_by_name['connecting'].containing_oneof = _EVENT_STATE.oneofs_by_name['state']
_EVENT_STATE.oneofs_by_name['state'].fields.append(
  _EVENT_STATE.fields_by_name['connected'])
_EVENT_STATE.fields_by_name['connected'].containing_oneof = _EVENT_STATE.oneofs_by_name['state']
_EVENT_HARDWAREERROR.fields_by_name['cause'].enum_type = _HARDWAREERRORCAUSE
_EVENT_HARDWAREERROR.containing_type = _EVENT
_EVENT_PAIRING.fields_by_name['failure'].message_type = _PAIRINGSTATUS_FAILURE
_EVENT_PAIRING.fields_by_name['success'].message_type = _PAIRINGSTATUS_SUCCESS
_EVENT_PAIRING.containing_type = _EVENT
_EVENT_PAIRING.oneofs_by_name['status'].fields.append(
  _EVENT_PAIRING.fields_by_name['failure'])
_EVENT_PAIRING.fields_by_name['failure'].containing_oneof = _EVENT_PAIRING.oneofs_by_name['status']
_EVENT_PAIRING.oneofs_by_name['status'].fields.append(
  _EVENT_PAIRING.fields_by_name['success'])
_EVENT_PAIRING.fields_by_name['success'].containing_oneof = _EVENT_PAIRING.oneofs_by_name['status']
_EVENT.fields_by_name['state'].message_type = _EVENT_STATE
_EVENT.fields_by_name['hardware_error'].message_type = _EVENT_HARDWAREERROR
_EVENT.fields_by_name['pairing'].message_type = _EVENT_PAIRING
_EVENT.oneofs_by_name['id'].fields.append(
  _EVENT.fields_by_name['state'])
_EVENT.fields_by_name['state'].containing_oneof = _EVENT.oneofs_by_name['id']
_EVENT.oneofs_by_name['id'].fields.append(
  _EVENT.fields_by_name['hardware_error'])
_EVENT.fields_by_name['hardware_error'].containing_oneof = _EVENT.oneofs_by_name['id']
_EVENT.oneofs_by_name['id'].fields.append(
  _EVENT.fields_by_name['pairing'])
_EVENT.fields_by_name['pairing'].containing_oneof = _EVENT.oneofs_by_name['id']
_CAPABILITIES.fields_by_name['bandwidths'].enum_type = _BANDWIDTH
_CAPABILITIES.fields_by_name['encryption_algorithms'].enum_type = _ENCRYPTION
_CONNECTIONPARAMETERS.fields_by_name['bandwidth'].enum_type = _BANDWIDTH
_STATE_OFFLINE.containing_type = _STATE
_STATE_BOOTING.containing_type = _STATE
_STATE_IDLE.containing_type = _STATE
_STATE_PAIRING.fields_by_name['pairing_parameters'].message_type = _PAIRINGPARAMETERS
_STATE_PAIRING.fields_by_name['connection_parameters'].message_type = _CONNECTIONPARAMETERS
_STATE_PAIRING.containing_type = _STATE
_STATE_CONNECTING.containing_type = _STATE
_STATE_CONNECTED.containing_type = _STATE
_PAIRINGPARAMETERS.fields_by_name['bandwidth'].enum_type = _BANDWIDTH
_PAIRINGPARAMETERS.fields_by_name['encryption_algorithm'].enum_type = _ENCRYPTION
_PAIRINGSTATUS_FAILURE.fields_by_name['reason'].enum_type = _PAIRINGFAILUREREASON
_PAIRINGSTATUS_FAILURE.containing_type = _PAIRINGSTATUS
_PAIRINGSTATUS_SUCCESS.containing_type = _PAIRINGSTATUS
DESCRIPTOR.message_types_by_name['Command'] = _COMMAND
DESCRIPTOR.message_types_by_name['Event'] = _EVENT
DESCRIPTOR.message_types_by_name['Capabilities'] = _CAPABILITIES
DESCRIPTOR.message_types_by_name['ConnectionParameters'] = _CONNECTIONPARAMETERS
DESCRIPTOR.message_types_by_name['State'] = _STATE
DESCRIPTOR.message_types_by_name['PairingParameters'] = _PAIRINGPARAMETERS
DESCRIPTOR.message_types_by_name['PairingStatus'] = _PAIRINGSTATUS
DESCRIPTOR.enum_types_by_name['Bandwidth'] = _BANDWIDTH
DESCRIPTOR.enum_types_by_name['Encryption'] = _ENCRYPTION
DESCRIPTOR.enum_types_by_name['HardwareErrorCause'] = _HARDWAREERRORCAUSE
DESCRIPTOR.enum_types_by_name['PairingFailureReason'] = _PAIRINGFAILUREREASON
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Command = _reflection.GeneratedProtocolMessageType('Command', (_message.Message,), dict(

  GetState = _reflection.GeneratedProtocolMessageType('GetState', (_message.Message,), dict(
    DESCRIPTOR = _COMMAND_GETSTATE,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Command.GetState)
    ))
  ,

  PowerOn = _reflection.GeneratedProtocolMessageType('PowerOn', (_message.Message,), dict(
    DESCRIPTOR = _COMMAND_POWERON,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Command.PowerOn)
    ))
  ,

  ShutDown = _reflection.GeneratedProtocolMessageType('ShutDown', (_message.Message,), dict(
    DESCRIPTOR = _COMMAND_SHUTDOWN,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Command.ShutDown)
    ))
  ,

  PairDevice = _reflection.GeneratedProtocolMessageType('PairDevice', (_message.Message,), dict(
    DESCRIPTOR = _COMMAND_PAIRDEVICE,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Command.PairDevice)
    ))
  ,
  DESCRIPTOR = _COMMAND,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.Command)
  ))
_sym_db.RegisterMessage(Command)
_sym_db.RegisterMessage(Command.GetState)
_sym_db.RegisterMessage(Command.PowerOn)
_sym_db.RegisterMessage(Command.ShutDown)
_sym_db.RegisterMessage(Command.PairDevice)

Event = _reflection.GeneratedProtocolMessageType('Event', (_message.Message,), dict(

  State = _reflection.GeneratedProtocolMessageType('State', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_STATE,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Event.State)
    ))
  ,

  HardwareError = _reflection.GeneratedProtocolMessageType('HardwareError', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_HARDWAREERROR,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Event.HardwareError)
    ))
  ,

  Pairing = _reflection.GeneratedProtocolMessageType('Pairing', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_PAIRING,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.Event.Pairing)
    ))
  ,
  DESCRIPTOR = _EVENT,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.Event)
  ))
_sym_db.RegisterMessage(Event)
_sym_db.RegisterMessage(Event.State)
_sym_db.RegisterMessage(Event.HardwareError)
_sym_db.RegisterMessage(Event.Pairing)

Capabilities = _reflection.GeneratedProtocolMessageType('Capabilities', (_message.Message,), dict(
  DESCRIPTOR = _CAPABILITIES,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.Capabilities)
  ))
_sym_db.RegisterMessage(Capabilities)

ConnectionParameters = _reflection.GeneratedProtocolMessageType('ConnectionParameters', (_message.Message,), dict(
  DESCRIPTOR = _CONNECTIONPARAMETERS,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.ConnectionParameters)
  ))
_sym_db.RegisterMessage(ConnectionParameters)

State = _reflection.GeneratedProtocolMessageType('State', (_message.Message,), dict(

  Offline = _reflection.GeneratedProtocolMessageType('Offline', (_message.Message,), dict(
    DESCRIPTOR = _STATE_OFFLINE,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.State.Offline)
    ))
  ,

  Booting = _reflection.GeneratedProtocolMessageType('Booting', (_message.Message,), dict(
    DESCRIPTOR = _STATE_BOOTING,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.State.Booting)
    ))
  ,

  Idle = _reflection.GeneratedProtocolMessageType('Idle', (_message.Message,), dict(
    DESCRIPTOR = _STATE_IDLE,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.State.Idle)
    ))
  ,

  Pairing = _reflection.GeneratedProtocolMessageType('Pairing', (_message.Message,), dict(
    DESCRIPTOR = _STATE_PAIRING,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.State.Pairing)
    ))
  ,

  Connecting = _reflection.GeneratedProtocolMessageType('Connecting', (_message.Message,), dict(
    DESCRIPTOR = _STATE_CONNECTING,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.State.Connecting)
    ))
  ,

  Connected = _reflection.GeneratedProtocolMessageType('Connected', (_message.Message,), dict(
    DESCRIPTOR = _STATE_CONNECTED,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.State.Connected)
    ))
  ,
  DESCRIPTOR = _STATE,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.State)
  ))
_sym_db.RegisterMessage(State)
_sym_db.RegisterMessage(State.Offline)
_sym_db.RegisterMessage(State.Booting)
_sym_db.RegisterMessage(State.Idle)
_sym_db.RegisterMessage(State.Pairing)
_sym_db.RegisterMessage(State.Connecting)
_sym_db.RegisterMessage(State.Connected)

PairingParameters = _reflection.GeneratedProtocolMessageType('PairingParameters', (_message.Message,), dict(
  DESCRIPTOR = _PAIRINGPARAMETERS,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.PairingParameters)
  ))
_sym_db.RegisterMessage(PairingParameters)

PairingStatus = _reflection.GeneratedProtocolMessageType('PairingStatus', (_message.Message,), dict(

  Failure = _reflection.GeneratedProtocolMessageType('Failure', (_message.Message,), dict(
    DESCRIPTOR = _PAIRINGSTATUS_FAILURE,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.PairingStatus.Failure)
    ))
  ,

  Success = _reflection.GeneratedProtocolMessageType('Success', (_message.Message,), dict(
    DESCRIPTOR = _PAIRINGSTATUS_SUCCESS,
    __module__ = 'arsdk.microhard_pb2'
    # @@protoc_insertion_point(class_scope:arsdk.microhard.PairingStatus.Success)
    ))
  ,
  DESCRIPTOR = _PAIRINGSTATUS,
  __module__ = 'arsdk.microhard_pb2'
  # @@protoc_insertion_point(class_scope:arsdk.microhard.PairingStatus)
  ))
_sym_db.RegisterMessage(PairingStatus)
_sym_db.RegisterMessage(PairingStatus.Failure)
_sym_db.RegisterMessage(PairingStatus.Success)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
