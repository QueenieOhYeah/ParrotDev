// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guidance/camera_rotation_move.proto

#ifndef PROTOBUF_INCLUDED_guidance_2fcamera_5frotation_5fmove_2eproto
#define PROTOBUF_INCLUDED_guidance_2fcamera_5frotation_5fmove_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_guidance_2fcamera_5frotation_5fmove_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_guidance_2fcamera_5frotation_5fmove_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_guidance_2fcamera_5frotation_5fmove_2eproto();
namespace Guidance {
namespace CameraRotationMove {
namespace Messages {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Displacement;
class DisplacementDefaultTypeInternal;
extern DisplacementDefaultTypeInternal _Displacement_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace Messages
}  // namespace CameraRotationMove
}  // namespace Guidance
namespace google {
namespace protobuf {
template<> ::Guidance::CameraRotationMove::Messages::Config* Arena::CreateMaybeMessage<::Guidance::CameraRotationMove::Messages::Config>(Arena*);
template<> ::Guidance::CameraRotationMove::Messages::Displacement* Arena::CreateMaybeMessage<::Guidance::CameraRotationMove::Messages::Displacement>(Arena*);
template<> ::Guidance::CameraRotationMove::Messages::Event* Arena::CreateMaybeMessage<::Guidance::CameraRotationMove::Messages::Event>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Guidance {
namespace CameraRotationMove {
namespace Messages {

// ===================================================================

class Displacement :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.CameraRotationMove.Messages.Displacement) */ {
 public:
  Displacement();
  virtual ~Displacement();

  Displacement(const Displacement& from);

  inline Displacement& operator=(const Displacement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Displacement(Displacement&& from) noexcept
    : Displacement() {
    *this = ::std::move(from);
  }

  inline Displacement& operator=(Displacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Displacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Displacement* internal_default_instance() {
    return reinterpret_cast<const Displacement*>(
               &_Displacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Displacement* other);
  friend void swap(Displacement& a, Displacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Displacement* New() const final {
    return CreateMaybeMessage<Displacement>(nullptr);
  }

  Displacement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Displacement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Displacement& from);
  void MergeFrom(const Displacement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Displacement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float roll = 1;
  void clear_roll();
  static const int kRollFieldNumber = 1;
  float roll() const;
  void set_roll(float value);

  // float pitch = 2;
  void clear_pitch();
  static const int kPitchFieldNumber = 2;
  float pitch() const;
  void set_pitch(float value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:Guidance.CameraRotationMove.Messages.Displacement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guidance_2fcamera_5frotation_5fmove_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.CameraRotationMove.Messages.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Guidance.CameraRotationMove.Messages.Displacement displacement = 1;
  bool has_displacement() const;
  void clear_displacement();
  static const int kDisplacementFieldNumber = 1;
  const ::Guidance::CameraRotationMove::Messages::Displacement& displacement() const;
  ::Guidance::CameraRotationMove::Messages::Displacement* release_displacement();
  ::Guidance::CameraRotationMove::Messages::Displacement* mutable_displacement();
  void set_allocated_displacement(::Guidance::CameraRotationMove::Messages::Displacement* displacement);

  // @@protoc_insertion_point(class_scope:Guidance.CameraRotationMove.Messages.Config)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Guidance::CameraRotationMove::Messages::Displacement* displacement_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guidance_2fcamera_5frotation_5fmove_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.CameraRotationMove.Messages.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kMoveValidated = 1,
    kTimeOut = 2,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Empty move_validated = 1;
  bool has_move_validated() const;
  void clear_move_validated();
  static const int kMoveValidatedFieldNumber = 1;
  const ::google::protobuf::Empty& move_validated() const;
  ::google::protobuf::Empty* release_move_validated();
  ::google::protobuf::Empty* mutable_move_validated();
  void set_allocated_move_validated(::google::protobuf::Empty* move_validated);

  // .google.protobuf.Empty time_out = 2;
  bool has_time_out() const;
  void clear_time_out();
  static const int kTimeOutFieldNumber = 2;
  const ::google::protobuf::Empty& time_out() const;
  ::google::protobuf::Empty* release_time_out();
  ::google::protobuf::Empty* mutable_time_out();
  void set_allocated_time_out(::google::protobuf::Empty* time_out);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:Guidance.CameraRotationMove.Messages.Event)
 private:
  class HasBitSetters;
  void set_has_move_validated();
  void set_has_time_out();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::Empty* move_validated_;
    ::google::protobuf::Empty* time_out_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_guidance_2fcamera_5frotation_5fmove_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Displacement

// float roll = 1;
inline void Displacement::clear_roll() {
  roll_ = 0;
}
inline float Displacement::roll() const {
  // @@protoc_insertion_point(field_get:Guidance.CameraRotationMove.Messages.Displacement.roll)
  return roll_;
}
inline void Displacement::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:Guidance.CameraRotationMove.Messages.Displacement.roll)
}

// float pitch = 2;
inline void Displacement::clear_pitch() {
  pitch_ = 0;
}
inline float Displacement::pitch() const {
  // @@protoc_insertion_point(field_get:Guidance.CameraRotationMove.Messages.Displacement.pitch)
  return pitch_;
}
inline void Displacement::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:Guidance.CameraRotationMove.Messages.Displacement.pitch)
}

// float yaw = 3;
inline void Displacement::clear_yaw() {
  yaw_ = 0;
}
inline float Displacement::yaw() const {
  // @@protoc_insertion_point(field_get:Guidance.CameraRotationMove.Messages.Displacement.yaw)
  return yaw_;
}
inline void Displacement::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:Guidance.CameraRotationMove.Messages.Displacement.yaw)
}

// -------------------------------------------------------------------

// Config

// .Guidance.CameraRotationMove.Messages.Displacement displacement = 1;
inline bool Config::has_displacement() const {
  return this != internal_default_instance() && displacement_ != nullptr;
}
inline void Config::clear_displacement() {
  if (GetArenaNoVirtual() == nullptr && displacement_ != nullptr) {
    delete displacement_;
  }
  displacement_ = nullptr;
}
inline const ::Guidance::CameraRotationMove::Messages::Displacement& Config::displacement() const {
  const ::Guidance::CameraRotationMove::Messages::Displacement* p = displacement_;
  // @@protoc_insertion_point(field_get:Guidance.CameraRotationMove.Messages.Config.displacement)
  return p != nullptr ? *p : *reinterpret_cast<const ::Guidance::CameraRotationMove::Messages::Displacement*>(
      &::Guidance::CameraRotationMove::Messages::_Displacement_default_instance_);
}
inline ::Guidance::CameraRotationMove::Messages::Displacement* Config::release_displacement() {
  // @@protoc_insertion_point(field_release:Guidance.CameraRotationMove.Messages.Config.displacement)
  
  ::Guidance::CameraRotationMove::Messages::Displacement* temp = displacement_;
  displacement_ = nullptr;
  return temp;
}
inline ::Guidance::CameraRotationMove::Messages::Displacement* Config::mutable_displacement() {
  
  if (displacement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Guidance::CameraRotationMove::Messages::Displacement>(GetArenaNoVirtual());
    displacement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Guidance.CameraRotationMove.Messages.Config.displacement)
  return displacement_;
}
inline void Config::set_allocated_displacement(::Guidance::CameraRotationMove::Messages::Displacement* displacement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete displacement_;
  }
  if (displacement) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      displacement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, displacement, submessage_arena);
    }
    
  } else {
    
  }
  displacement_ = displacement;
  // @@protoc_insertion_point(field_set_allocated:Guidance.CameraRotationMove.Messages.Config.displacement)
}

// -------------------------------------------------------------------

// Event

// .google.protobuf.Empty move_validated = 1;
inline bool Event::has_move_validated() const {
  return id_case() == kMoveValidated;
}
inline void Event::set_has_move_validated() {
  _oneof_case_[0] = kMoveValidated;
}
inline ::google::protobuf::Empty* Event::release_move_validated() {
  // @@protoc_insertion_point(field_release:Guidance.CameraRotationMove.Messages.Event.move_validated)
  if (has_move_validated()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.move_validated_;
    id_.move_validated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::move_validated() const {
  // @@protoc_insertion_point(field_get:Guidance.CameraRotationMove.Messages.Event.move_validated)
  return has_move_validated()
      ? *id_.move_validated_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_move_validated() {
  if (!has_move_validated()) {
    clear_id();
    set_has_move_validated();
    id_.move_validated_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Guidance.CameraRotationMove.Messages.Event.move_validated)
  return id_.move_validated_;
}

// .google.protobuf.Empty time_out = 2;
inline bool Event::has_time_out() const {
  return id_case() == kTimeOut;
}
inline void Event::set_has_time_out() {
  _oneof_case_[0] = kTimeOut;
}
inline ::google::protobuf::Empty* Event::release_time_out() {
  // @@protoc_insertion_point(field_release:Guidance.CameraRotationMove.Messages.Event.time_out)
  if (has_time_out()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.time_out_;
    id_.time_out_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::time_out() const {
  // @@protoc_insertion_point(field_get:Guidance.CameraRotationMove.Messages.Event.time_out)
  return has_time_out()
      ? *id_.time_out_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_time_out() {
  if (!has_time_out()) {
    clear_id();
    set_has_time_out();
    id_.time_out_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Guidance.CameraRotationMove.Messages.Event.time_out)
  return id_.time_out_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace CameraRotationMove
}  // namespace Guidance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_guidance_2fcamera_5frotation_5fmove_2eproto
