// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drone_controller/drone_controller.proto

#ifndef PROTOBUF_INCLUDED_drone_5fcontroller_2fdrone_5fcontroller_2eproto
#define PROTOBUF_INCLUDED_drone_5fcontroller_2fdrone_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "colibrylite/colibrylite.pb.h"
#include "drone_controller/battery_alert.pb.h"
#include "drone_controller/battery_data_role.pb.h"
#include "drone_controller/battery_power_role.pb.h"
#include "drone_controller/motor_error.pb.h"
#include "drone_controller/emergency_behavior.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_drone_5fcontroller_2fdrone_5fcontroller_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_drone_5fcontroller_2fdrone_5fcontroller_2eproto();
namespace DroneController {
namespace Messages {
class BatteryHealth;
class BatteryHealthDefaultTypeInternal;
extern BatteryHealthDefaultTypeInternal _BatteryHealth_default_instance_;
class BatteryRole;
class BatteryRoleDefaultTypeInternal;
extern BatteryRoleDefaultTypeInternal _BatteryRole_default_instance_;
class BatteryState;
class BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class HorizontalAngles;
class HorizontalAnglesDefaultTypeInternal;
extern HorizontalAnglesDefaultTypeInternal _HorizontalAngles_default_instance_;
class HorizontalGoToFix;
class HorizontalGoToFixDefaultTypeInternal;
extern HorizontalGoToFixDefaultTypeInternal _HorizontalGoToFix_default_instance_;
class HorizontalReference;
class HorizontalReferenceDefaultTypeInternal;
extern HorizontalReferenceDefaultTypeInternal _HorizontalReference_default_instance_;
class HorizontalTrajectoryGlobal;
class HorizontalTrajectoryGlobalDefaultTypeInternal;
extern HorizontalTrajectoryGlobalDefaultTypeInternal _HorizontalTrajectoryGlobal_default_instance_;
class HorizontalTrajectoryLocal;
class HorizontalTrajectoryLocalDefaultTypeInternal;
extern HorizontalTrajectoryLocalDefaultTypeInternal _HorizontalTrajectoryLocal_default_instance_;
class HorizontalVelocityTrajectory;
class HorizontalVelocityTrajectoryDefaultTypeInternal;
extern HorizontalVelocityTrajectoryDefaultTypeInternal _HorizontalVelocityTrajectory_default_instance_;
class InitStatus;
class InitStatusDefaultTypeInternal;
extern InitStatusDefaultTypeInternal _InitStatus_default_instance_;
class MotorErrorChange;
class MotorErrorChangeDefaultTypeInternal;
extern MotorErrorChangeDefaultTypeInternal _MotorErrorChange_default_instance_;
class MotorsErrorsChanged;
class MotorsErrorsChangedDefaultTypeInternal;
extern MotorsErrorsChangedDefaultTypeInternal _MotorsErrorsChanged_default_instance_;
class MotorsFlightInfo;
class MotorsFlightInfoDefaultTypeInternal;
extern MotorsFlightInfoDefaultTypeInternal _MotorsFlightInfo_default_instance_;
class MotorsVersion;
class MotorsVersionDefaultTypeInternal;
extern MotorsVersionDefaultTypeInternal _MotorsVersion_default_instance_;
class NavDebug;
class NavDebugDefaultTypeInternal;
extern NavDebugDefaultTypeInternal _NavDebug_default_instance_;
class PositionVelocityTargets;
class PositionVelocityTargetsDefaultTypeInternal;
extern PositionVelocityTargetsDefaultTypeInternal _PositionVelocityTargets_default_instance_;
class TargetReached;
class TargetReachedDefaultTypeInternal;
extern TargetReachedDefaultTypeInternal _TargetReached_default_instance_;
class Tick;
class TickDefaultTypeInternal;
extern TickDefaultTypeInternal _Tick_default_instance_;
class TickNotificationConfig;
class TickNotificationConfigDefaultTypeInternal;
extern TickNotificationConfigDefaultTypeInternal _TickNotificationConfig_default_instance_;
class VerticalReference;
class VerticalReferenceDefaultTypeInternal;
extern VerticalReferenceDefaultTypeInternal _VerticalReference_default_instance_;
class VerticalThrust;
class VerticalThrustDefaultTypeInternal;
extern VerticalThrustDefaultTypeInternal _VerticalThrust_default_instance_;
class VerticalThrustRamp;
class VerticalThrustRampDefaultTypeInternal;
extern VerticalThrustRampDefaultTypeInternal _VerticalThrustRamp_default_instance_;
class VerticalTrajectory;
class VerticalTrajectoryDefaultTypeInternal;
extern VerticalTrajectoryDefaultTypeInternal _VerticalTrajectory_default_instance_;
class VerticalVelocity;
class VerticalVelocityDefaultTypeInternal;
extern VerticalVelocityDefaultTypeInternal _VerticalVelocity_default_instance_;
class VerticalVelocityTrajectory;
class VerticalVelocityTrajectoryDefaultTypeInternal;
extern VerticalVelocityTrajectoryDefaultTypeInternal _VerticalVelocityTrajectory_default_instance_;
class YawRate;
class YawRateDefaultTypeInternal;
extern YawRateDefaultTypeInternal _YawRate_default_instance_;
class YawReference;
class YawReferenceDefaultTypeInternal;
extern YawReferenceDefaultTypeInternal _YawReference_default_instance_;
class YawTrajectoryNed;
class YawTrajectoryNedDefaultTypeInternal;
extern YawTrajectoryNedDefaultTypeInternal _YawTrajectoryNed_default_instance_;
class YawTrajectoryNedStart;
class YawTrajectoryNedStartDefaultTypeInternal;
extern YawTrajectoryNedStartDefaultTypeInternal _YawTrajectoryNedStart_default_instance_;
}  // namespace Messages
}  // namespace DroneController
namespace google {
namespace protobuf {
template<> ::DroneController::Messages::BatteryHealth* Arena::CreateMaybeMessage<::DroneController::Messages::BatteryHealth>(Arena*);
template<> ::DroneController::Messages::BatteryRole* Arena::CreateMaybeMessage<::DroneController::Messages::BatteryRole>(Arena*);
template<> ::DroneController::Messages::BatteryState* Arena::CreateMaybeMessage<::DroneController::Messages::BatteryState>(Arena*);
template<> ::DroneController::Messages::Command* Arena::CreateMaybeMessage<::DroneController::Messages::Command>(Arena*);
template<> ::DroneController::Messages::Event* Arena::CreateMaybeMessage<::DroneController::Messages::Event>(Arena*);
template<> ::DroneController::Messages::HorizontalAngles* Arena::CreateMaybeMessage<::DroneController::Messages::HorizontalAngles>(Arena*);
template<> ::DroneController::Messages::HorizontalGoToFix* Arena::CreateMaybeMessage<::DroneController::Messages::HorizontalGoToFix>(Arena*);
template<> ::DroneController::Messages::HorizontalReference* Arena::CreateMaybeMessage<::DroneController::Messages::HorizontalReference>(Arena*);
template<> ::DroneController::Messages::HorizontalTrajectoryGlobal* Arena::CreateMaybeMessage<::DroneController::Messages::HorizontalTrajectoryGlobal>(Arena*);
template<> ::DroneController::Messages::HorizontalTrajectoryLocal* Arena::CreateMaybeMessage<::DroneController::Messages::HorizontalTrajectoryLocal>(Arena*);
template<> ::DroneController::Messages::HorizontalVelocityTrajectory* Arena::CreateMaybeMessage<::DroneController::Messages::HorizontalVelocityTrajectory>(Arena*);
template<> ::DroneController::Messages::InitStatus* Arena::CreateMaybeMessage<::DroneController::Messages::InitStatus>(Arena*);
template<> ::DroneController::Messages::MotorErrorChange* Arena::CreateMaybeMessage<::DroneController::Messages::MotorErrorChange>(Arena*);
template<> ::DroneController::Messages::MotorsErrorsChanged* Arena::CreateMaybeMessage<::DroneController::Messages::MotorsErrorsChanged>(Arena*);
template<> ::DroneController::Messages::MotorsFlightInfo* Arena::CreateMaybeMessage<::DroneController::Messages::MotorsFlightInfo>(Arena*);
template<> ::DroneController::Messages::MotorsVersion* Arena::CreateMaybeMessage<::DroneController::Messages::MotorsVersion>(Arena*);
template<> ::DroneController::Messages::NavDebug* Arena::CreateMaybeMessage<::DroneController::Messages::NavDebug>(Arena*);
template<> ::DroneController::Messages::PositionVelocityTargets* Arena::CreateMaybeMessage<::DroneController::Messages::PositionVelocityTargets>(Arena*);
template<> ::DroneController::Messages::TargetReached* Arena::CreateMaybeMessage<::DroneController::Messages::TargetReached>(Arena*);
template<> ::DroneController::Messages::Tick* Arena::CreateMaybeMessage<::DroneController::Messages::Tick>(Arena*);
template<> ::DroneController::Messages::TickNotificationConfig* Arena::CreateMaybeMessage<::DroneController::Messages::TickNotificationConfig>(Arena*);
template<> ::DroneController::Messages::VerticalReference* Arena::CreateMaybeMessage<::DroneController::Messages::VerticalReference>(Arena*);
template<> ::DroneController::Messages::VerticalThrust* Arena::CreateMaybeMessage<::DroneController::Messages::VerticalThrust>(Arena*);
template<> ::DroneController::Messages::VerticalThrustRamp* Arena::CreateMaybeMessage<::DroneController::Messages::VerticalThrustRamp>(Arena*);
template<> ::DroneController::Messages::VerticalTrajectory* Arena::CreateMaybeMessage<::DroneController::Messages::VerticalTrajectory>(Arena*);
template<> ::DroneController::Messages::VerticalVelocity* Arena::CreateMaybeMessage<::DroneController::Messages::VerticalVelocity>(Arena*);
template<> ::DroneController::Messages::VerticalVelocityTrajectory* Arena::CreateMaybeMessage<::DroneController::Messages::VerticalVelocityTrajectory>(Arena*);
template<> ::DroneController::Messages::YawRate* Arena::CreateMaybeMessage<::DroneController::Messages::YawRate>(Arena*);
template<> ::DroneController::Messages::YawReference* Arena::CreateMaybeMessage<::DroneController::Messages::YawReference>(Arena*);
template<> ::DroneController::Messages::YawTrajectoryNed* Arena::CreateMaybeMessage<::DroneController::Messages::YawTrajectoryNed>(Arena*);
template<> ::DroneController::Messages::YawTrajectoryNedStart* Arena::CreateMaybeMessage<::DroneController::Messages::YawTrajectoryNedStart>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace DroneController {
namespace Messages {

// ===================================================================

class HorizontalAngles :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.HorizontalAngles) */ {
 public:
  HorizontalAngles();
  virtual ~HorizontalAngles();

  HorizontalAngles(const HorizontalAngles& from);

  inline HorizontalAngles& operator=(const HorizontalAngles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalAngles(HorizontalAngles&& from) noexcept
    : HorizontalAngles() {
    *this = ::std::move(from);
  }

  inline HorizontalAngles& operator=(HorizontalAngles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalAngles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalAngles* internal_default_instance() {
    return reinterpret_cast<const HorizontalAngles*>(
               &_HorizontalAngles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HorizontalAngles* other);
  friend void swap(HorizontalAngles& a, HorizontalAngles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalAngles* New() const final {
    return CreateMaybeMessage<HorizontalAngles>(nullptr);
  }

  HorizontalAngles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalAngles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalAngles& from);
  void MergeFrom(const HorizontalAngles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalAngles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.TiltTrajectoryPoint ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::TiltTrajectoryPoint& ref() const;
  ::ColibryLite::Messages::TiltTrajectoryPoint* release_ref();
  ::ColibryLite::Messages::TiltTrajectoryPoint* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::TiltTrajectoryPoint* ref);

  // .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::HorizontalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value);

  // bool enable_wind_compensation = 3;
  void clear_enable_wind_compensation();
  static const int kEnableWindCompensationFieldNumber = 3;
  bool enable_wind_compensation() const;
  void set_enable_wind_compensation(bool value);

  // bool enable_auto_banked_turn = 4;
  void clear_enable_auto_banked_turn();
  static const int kEnableAutoBankedTurnFieldNumber = 4;
  bool enable_auto_banked_turn() const;
  void set_enable_auto_banked_turn(bool value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.HorizontalAngles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::TiltTrajectoryPoint* ref_;
  int config_;
  bool enable_wind_compensation_;
  bool enable_auto_banked_turn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class HorizontalTrajectoryLocal :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.HorizontalTrajectoryLocal) */ {
 public:
  HorizontalTrajectoryLocal();
  virtual ~HorizontalTrajectoryLocal();

  HorizontalTrajectoryLocal(const HorizontalTrajectoryLocal& from);

  inline HorizontalTrajectoryLocal& operator=(const HorizontalTrajectoryLocal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalTrajectoryLocal(HorizontalTrajectoryLocal&& from) noexcept
    : HorizontalTrajectoryLocal() {
    *this = ::std::move(from);
  }

  inline HorizontalTrajectoryLocal& operator=(HorizontalTrajectoryLocal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalTrajectoryLocal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalTrajectoryLocal* internal_default_instance() {
    return reinterpret_cast<const HorizontalTrajectoryLocal*>(
               &_HorizontalTrajectoryLocal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HorizontalTrajectoryLocal* other);
  friend void swap(HorizontalTrajectoryLocal& a, HorizontalTrajectoryLocal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalTrajectoryLocal* New() const final {
    return CreateMaybeMessage<HorizontalTrajectoryLocal>(nullptr);
  }

  HorizontalTrajectoryLocal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalTrajectoryLocal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalTrajectoryLocal& from);
  void MergeFrom(const HorizontalTrajectoryLocal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalTrajectoryLocal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.HorizontalTrajectoryPoint ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::HorizontalTrajectoryPoint& ref() const;
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* release_ref();
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::HorizontalTrajectoryPoint* ref);

  // .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::HorizontalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value);

  // .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
  void clear_reference_propagation_model();
  static const int kReferencePropagationModelFieldNumber = 3;
  ::ColibryLite::Messages::ReferencePropagationModel::Enum reference_propagation_model() const;
  void set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value);

  // float maximum_horizontal_speed = 4;
  void clear_maximum_horizontal_speed();
  static const int kMaximumHorizontalSpeedFieldNumber = 4;
  float maximum_horizontal_speed() const;
  void set_maximum_horizontal_speed(float value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.HorizontalTrajectoryLocal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* ref_;
  int config_;
  int reference_propagation_model_;
  float maximum_horizontal_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class HorizontalTrajectoryGlobal :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.HorizontalTrajectoryGlobal) */ {
 public:
  HorizontalTrajectoryGlobal();
  virtual ~HorizontalTrajectoryGlobal();

  HorizontalTrajectoryGlobal(const HorizontalTrajectoryGlobal& from);

  inline HorizontalTrajectoryGlobal& operator=(const HorizontalTrajectoryGlobal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalTrajectoryGlobal(HorizontalTrajectoryGlobal&& from) noexcept
    : HorizontalTrajectoryGlobal() {
    *this = ::std::move(from);
  }

  inline HorizontalTrajectoryGlobal& operator=(HorizontalTrajectoryGlobal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalTrajectoryGlobal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalTrajectoryGlobal* internal_default_instance() {
    return reinterpret_cast<const HorizontalTrajectoryGlobal*>(
               &_HorizontalTrajectoryGlobal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HorizontalTrajectoryGlobal* other);
  friend void swap(HorizontalTrajectoryGlobal& a, HorizontalTrajectoryGlobal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalTrajectoryGlobal* New() const final {
    return CreateMaybeMessage<HorizontalTrajectoryGlobal>(nullptr);
  }

  HorizontalTrajectoryGlobal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalTrajectoryGlobal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalTrajectoryGlobal& from);
  void MergeFrom(const HorizontalTrajectoryGlobal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalTrajectoryGlobal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.HorizontalTrajectoryPoint ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::HorizontalTrajectoryPoint& ref() const;
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* release_ref();
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::HorizontalTrajectoryPoint* ref);

  // .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::HorizontalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value);

  // .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
  void clear_reference_propagation_model();
  static const int kReferencePropagationModelFieldNumber = 3;
  ::ColibryLite::Messages::ReferencePropagationModel::Enum reference_propagation_model() const;
  void set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value);

  // float maximum_horizontal_speed = 4;
  void clear_maximum_horizontal_speed();
  static const int kMaximumHorizontalSpeedFieldNumber = 4;
  float maximum_horizontal_speed() const;
  void set_maximum_horizontal_speed(float value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.HorizontalTrajectoryGlobal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* ref_;
  int config_;
  int reference_propagation_model_;
  float maximum_horizontal_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class HorizontalGoToFix :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.HorizontalGoToFix) */ {
 public:
  HorizontalGoToFix();
  virtual ~HorizontalGoToFix();

  HorizontalGoToFix(const HorizontalGoToFix& from);

  inline HorizontalGoToFix& operator=(const HorizontalGoToFix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalGoToFix(HorizontalGoToFix&& from) noexcept
    : HorizontalGoToFix() {
    *this = ::std::move(from);
  }

  inline HorizontalGoToFix& operator=(HorizontalGoToFix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalGoToFix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalGoToFix* internal_default_instance() {
    return reinterpret_cast<const HorizontalGoToFix*>(
               &_HorizontalGoToFix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(HorizontalGoToFix* other);
  friend void swap(HorizontalGoToFix& a, HorizontalGoToFix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalGoToFix* New() const final {
    return CreateMaybeMessage<HorizontalGoToFix>(nullptr);
  }

  HorizontalGoToFix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalGoToFix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalGoToFix& from);
  void MergeFrom(const HorizontalGoToFix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalGoToFix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.HorizontalControlConfig.Enum config = 1;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  ::ColibryLite::Messages::HorizontalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.HorizontalGoToFix)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class HorizontalVelocityTrajectory :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.HorizontalVelocityTrajectory) */ {
 public:
  HorizontalVelocityTrajectory();
  virtual ~HorizontalVelocityTrajectory();

  HorizontalVelocityTrajectory(const HorizontalVelocityTrajectory& from);

  inline HorizontalVelocityTrajectory& operator=(const HorizontalVelocityTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalVelocityTrajectory(HorizontalVelocityTrajectory&& from) noexcept
    : HorizontalVelocityTrajectory() {
    *this = ::std::move(from);
  }

  inline HorizontalVelocityTrajectory& operator=(HorizontalVelocityTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalVelocityTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalVelocityTrajectory* internal_default_instance() {
    return reinterpret_cast<const HorizontalVelocityTrajectory*>(
               &_HorizontalVelocityTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HorizontalVelocityTrajectory* other);
  friend void swap(HorizontalVelocityTrajectory& a, HorizontalVelocityTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalVelocityTrajectory* New() const final {
    return CreateMaybeMessage<HorizontalVelocityTrajectory>(nullptr);
  }

  HorizontalVelocityTrajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalVelocityTrajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalVelocityTrajectory& from);
  void MergeFrom(const HorizontalVelocityTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalVelocityTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.HorizontalVelocityTrajectory ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::HorizontalVelocityTrajectory& ref() const;
  ::ColibryLite::Messages::HorizontalVelocityTrajectory* release_ref();
  ::ColibryLite::Messages::HorizontalVelocityTrajectory* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::HorizontalVelocityTrajectory* ref);

  // .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::HorizontalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.HorizontalVelocityTrajectory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::HorizontalVelocityTrajectory* ref_;
  int config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class HorizontalReference :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.HorizontalReference) */ {
 public:
  HorizontalReference();
  virtual ~HorizontalReference();

  HorizontalReference(const HorizontalReference& from);

  inline HorizontalReference& operator=(const HorizontalReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalReference(HorizontalReference&& from) noexcept
    : HorizontalReference() {
    *this = ::std::move(from);
  }

  inline HorizontalReference& operator=(HorizontalReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalReference& default_instance();

  enum RefCase {
    kAngles = 1,
    kTrajectoryLocal = 2,
    kTrajectoryGlobal = 3,
    kGoToFix = 4,
    kVelocityTrajectory = 5,
    REF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalReference* internal_default_instance() {
    return reinterpret_cast<const HorizontalReference*>(
               &_HorizontalReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HorizontalReference* other);
  friend void swap(HorizontalReference& a, HorizontalReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalReference* New() const final {
    return CreateMaybeMessage<HorizontalReference>(nullptr);
  }

  HorizontalReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalReference& from);
  void MergeFrom(const HorizontalReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DroneController.Messages.HorizontalAngles angles = 1;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 1;
  const ::DroneController::Messages::HorizontalAngles& angles() const;
  ::DroneController::Messages::HorizontalAngles* release_angles();
  ::DroneController::Messages::HorizontalAngles* mutable_angles();
  void set_allocated_angles(::DroneController::Messages::HorizontalAngles* angles);

  // .DroneController.Messages.HorizontalTrajectoryLocal trajectory_local = 2;
  bool has_trajectory_local() const;
  void clear_trajectory_local();
  static const int kTrajectoryLocalFieldNumber = 2;
  const ::DroneController::Messages::HorizontalTrajectoryLocal& trajectory_local() const;
  ::DroneController::Messages::HorizontalTrajectoryLocal* release_trajectory_local();
  ::DroneController::Messages::HorizontalTrajectoryLocal* mutable_trajectory_local();
  void set_allocated_trajectory_local(::DroneController::Messages::HorizontalTrajectoryLocal* trajectory_local);

  // .DroneController.Messages.HorizontalTrajectoryGlobal trajectory_global = 3;
  bool has_trajectory_global() const;
  void clear_trajectory_global();
  static const int kTrajectoryGlobalFieldNumber = 3;
  const ::DroneController::Messages::HorizontalTrajectoryGlobal& trajectory_global() const;
  ::DroneController::Messages::HorizontalTrajectoryGlobal* release_trajectory_global();
  ::DroneController::Messages::HorizontalTrajectoryGlobal* mutable_trajectory_global();
  void set_allocated_trajectory_global(::DroneController::Messages::HorizontalTrajectoryGlobal* trajectory_global);

  // .DroneController.Messages.HorizontalGoToFix go_to_fix = 4;
  bool has_go_to_fix() const;
  void clear_go_to_fix();
  static const int kGoToFixFieldNumber = 4;
  const ::DroneController::Messages::HorizontalGoToFix& go_to_fix() const;
  ::DroneController::Messages::HorizontalGoToFix* release_go_to_fix();
  ::DroneController::Messages::HorizontalGoToFix* mutable_go_to_fix();
  void set_allocated_go_to_fix(::DroneController::Messages::HorizontalGoToFix* go_to_fix);

  // .DroneController.Messages.HorizontalVelocityTrajectory velocity_trajectory = 5;
  bool has_velocity_trajectory() const;
  void clear_velocity_trajectory();
  static const int kVelocityTrajectoryFieldNumber = 5;
  const ::DroneController::Messages::HorizontalVelocityTrajectory& velocity_trajectory() const;
  ::DroneController::Messages::HorizontalVelocityTrajectory* release_velocity_trajectory();
  ::DroneController::Messages::HorizontalVelocityTrajectory* mutable_velocity_trajectory();
  void set_allocated_velocity_trajectory(::DroneController::Messages::HorizontalVelocityTrajectory* velocity_trajectory);

  void clear_ref();
  RefCase ref_case() const;
  // @@protoc_insertion_point(class_scope:DroneController.Messages.HorizontalReference)
 private:
  class HasBitSetters;
  void set_has_angles();
  void set_has_trajectory_local();
  void set_has_trajectory_global();
  void set_has_go_to_fix();
  void set_has_velocity_trajectory();

  inline bool has_ref() const;
  inline void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RefUnion {
    RefUnion() {}
    ::DroneController::Messages::HorizontalAngles* angles_;
    ::DroneController::Messages::HorizontalTrajectoryLocal* trajectory_local_;
    ::DroneController::Messages::HorizontalTrajectoryGlobal* trajectory_global_;
    ::DroneController::Messages::HorizontalGoToFix* go_to_fix_;
    ::DroneController::Messages::HorizontalVelocityTrajectory* velocity_trajectory_;
  } ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class VerticalVelocity :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.VerticalVelocity) */ {
 public:
  VerticalVelocity();
  virtual ~VerticalVelocity();

  VerticalVelocity(const VerticalVelocity& from);

  inline VerticalVelocity& operator=(const VerticalVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalVelocity(VerticalVelocity&& from) noexcept
    : VerticalVelocity() {
    *this = ::std::move(from);
  }

  inline VerticalVelocity& operator=(VerticalVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalVelocity* internal_default_instance() {
    return reinterpret_cast<const VerticalVelocity*>(
               &_VerticalVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(VerticalVelocity* other);
  friend void swap(VerticalVelocity& a, VerticalVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalVelocity* New() const final {
    return CreateMaybeMessage<VerticalVelocity>(nullptr);
  }

  VerticalVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalVelocity& from);
  void MergeFrom(const VerticalVelocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  float ref() const;
  void set_ref(float value);

  // .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::VerticalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value);

  // .ColibryLite.Messages.VerticalControllerSetting.Enum controller_setting = 3;
  void clear_controller_setting();
  static const int kControllerSettingFieldNumber = 3;
  ::ColibryLite::Messages::VerticalControllerSetting::Enum controller_setting() const;
  void set_controller_setting(::ColibryLite::Messages::VerticalControllerSetting::Enum value);

  // bool ground_constrained = 4;
  void clear_ground_constrained();
  static const int kGroundConstrainedFieldNumber = 4;
  bool ground_constrained() const;
  void set_ground_constrained(bool value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.VerticalVelocity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float ref_;
  int config_;
  int controller_setting_;
  bool ground_constrained_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class VerticalVelocityTrajectory :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.VerticalVelocityTrajectory) */ {
 public:
  VerticalVelocityTrajectory();
  virtual ~VerticalVelocityTrajectory();

  VerticalVelocityTrajectory(const VerticalVelocityTrajectory& from);

  inline VerticalVelocityTrajectory& operator=(const VerticalVelocityTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalVelocityTrajectory(VerticalVelocityTrajectory&& from) noexcept
    : VerticalVelocityTrajectory() {
    *this = ::std::move(from);
  }

  inline VerticalVelocityTrajectory& operator=(VerticalVelocityTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalVelocityTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalVelocityTrajectory* internal_default_instance() {
    return reinterpret_cast<const VerticalVelocityTrajectory*>(
               &_VerticalVelocityTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(VerticalVelocityTrajectory* other);
  friend void swap(VerticalVelocityTrajectory& a, VerticalVelocityTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalVelocityTrajectory* New() const final {
    return CreateMaybeMessage<VerticalVelocityTrajectory>(nullptr);
  }

  VerticalVelocityTrajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalVelocityTrajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalVelocityTrajectory& from);
  void MergeFrom(const VerticalVelocityTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalVelocityTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.VelocityTrajectory ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::VelocityTrajectory& ref() const;
  ::ColibryLite::Messages::VelocityTrajectory* release_ref();
  ::ColibryLite::Messages::VelocityTrajectory* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::VelocityTrajectory* ref);

  // .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::VerticalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value);

  // .ColibryLite.Messages.VerticalControllerSetting.Enum controller_setting = 3;
  void clear_controller_setting();
  static const int kControllerSettingFieldNumber = 3;
  ::ColibryLite::Messages::VerticalControllerSetting::Enum controller_setting() const;
  void set_controller_setting(::ColibryLite::Messages::VerticalControllerSetting::Enum value);

  // bool ground_constrained = 4;
  void clear_ground_constrained();
  static const int kGroundConstrainedFieldNumber = 4;
  bool ground_constrained() const;
  void set_ground_constrained(bool value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.VerticalVelocityTrajectory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::VelocityTrajectory* ref_;
  int config_;
  int controller_setting_;
  bool ground_constrained_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class VerticalTrajectory :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.VerticalTrajectory) */ {
 public:
  VerticalTrajectory();
  virtual ~VerticalTrajectory();

  VerticalTrajectory(const VerticalTrajectory& from);

  inline VerticalTrajectory& operator=(const VerticalTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalTrajectory(VerticalTrajectory&& from) noexcept
    : VerticalTrajectory() {
    *this = ::std::move(from);
  }

  inline VerticalTrajectory& operator=(VerticalTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalTrajectory* internal_default_instance() {
    return reinterpret_cast<const VerticalTrajectory*>(
               &_VerticalTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(VerticalTrajectory* other);
  friend void swap(VerticalTrajectory& a, VerticalTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalTrajectory* New() const final {
    return CreateMaybeMessage<VerticalTrajectory>(nullptr);
  }

  VerticalTrajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalTrajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalTrajectory& from);
  void MergeFrom(const VerticalTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.TrajectoryPoint ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::TrajectoryPoint& ref() const;
  ::ColibryLite::Messages::TrajectoryPoint* release_ref();
  ::ColibryLite::Messages::TrajectoryPoint* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::TrajectoryPoint* ref);

  // .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::VerticalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value);

  // .ColibryLite.Messages.VerticalControllerSetting.Enum controller_setting = 3;
  void clear_controller_setting();
  static const int kControllerSettingFieldNumber = 3;
  ::ColibryLite::Messages::VerticalControllerSetting::Enum controller_setting() const;
  void set_controller_setting(::ColibryLite::Messages::VerticalControllerSetting::Enum value);

  // .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 4;
  void clear_reference_propagation_model();
  static const int kReferencePropagationModelFieldNumber = 4;
  ::ColibryLite::Messages::ReferencePropagationModel::Enum reference_propagation_model() const;
  void set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value);

  // bool ground_constrained = 5;
  void clear_ground_constrained();
  static const int kGroundConstrainedFieldNumber = 5;
  bool ground_constrained() const;
  void set_ground_constrained(bool value);

  // float maximum_vertical_speed = 6;
  void clear_maximum_vertical_speed();
  static const int kMaximumVerticalSpeedFieldNumber = 6;
  float maximum_vertical_speed() const;
  void set_maximum_vertical_speed(float value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.VerticalTrajectory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::TrajectoryPoint* ref_;
  int config_;
  int controller_setting_;
  int reference_propagation_model_;
  bool ground_constrained_;
  float maximum_vertical_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class VerticalThrust :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.VerticalThrust) */ {
 public:
  VerticalThrust();
  virtual ~VerticalThrust();

  VerticalThrust(const VerticalThrust& from);

  inline VerticalThrust& operator=(const VerticalThrust& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalThrust(VerticalThrust&& from) noexcept
    : VerticalThrust() {
    *this = ::std::move(from);
  }

  inline VerticalThrust& operator=(VerticalThrust&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalThrust& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalThrust* internal_default_instance() {
    return reinterpret_cast<const VerticalThrust*>(
               &_VerticalThrust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(VerticalThrust* other);
  friend void swap(VerticalThrust& a, VerticalThrust& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalThrust* New() const final {
    return CreateMaybeMessage<VerticalThrust>(nullptr);
  }

  VerticalThrust* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalThrust>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalThrust& from);
  void MergeFrom(const VerticalThrust& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalThrust* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  float ref() const;
  void set_ref(float value);

  // .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::VerticalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.VerticalThrust)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float ref_;
  int config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class VerticalThrustRamp :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.VerticalThrustRamp) */ {
 public:
  VerticalThrustRamp();
  virtual ~VerticalThrustRamp();

  VerticalThrustRamp(const VerticalThrustRamp& from);

  inline VerticalThrustRamp& operator=(const VerticalThrustRamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalThrustRamp(VerticalThrustRamp&& from) noexcept
    : VerticalThrustRamp() {
    *this = ::std::move(from);
  }

  inline VerticalThrustRamp& operator=(VerticalThrustRamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalThrustRamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalThrustRamp* internal_default_instance() {
    return reinterpret_cast<const VerticalThrustRamp*>(
               &_VerticalThrustRamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(VerticalThrustRamp* other);
  friend void swap(VerticalThrustRamp& a, VerticalThrustRamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalThrustRamp* New() const final {
    return CreateMaybeMessage<VerticalThrustRamp>(nullptr);
  }

  VerticalThrustRamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalThrustRamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalThrustRamp& from);
  void MergeFrom(const VerticalThrustRamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalThrustRamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  float ref() const;
  void set_ref(float value);

  // float rate = 2;
  void clear_rate();
  static const int kRateFieldNumber = 2;
  float rate() const;
  void set_rate(float value);

  // .ColibryLite.Messages.VerticalControlConfig.Enum config = 3;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  ::ColibryLite::Messages::VerticalControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.VerticalThrustRamp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float ref_;
  float rate_;
  int config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class VerticalReference :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.VerticalReference) */ {
 public:
  VerticalReference();
  virtual ~VerticalReference();

  VerticalReference(const VerticalReference& from);

  inline VerticalReference& operator=(const VerticalReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalReference(VerticalReference&& from) noexcept
    : VerticalReference() {
    *this = ::std::move(from);
  }

  inline VerticalReference& operator=(VerticalReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalReference& default_instance();

  enum RefCase {
    kVelocity = 1,
    kVelocityTrajectory = 2,
    kTrajectory = 3,
    kThrust = 4,
    kThrustRamp = 5,
    REF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalReference* internal_default_instance() {
    return reinterpret_cast<const VerticalReference*>(
               &_VerticalReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(VerticalReference* other);
  friend void swap(VerticalReference& a, VerticalReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalReference* New() const final {
    return CreateMaybeMessage<VerticalReference>(nullptr);
  }

  VerticalReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalReference& from);
  void MergeFrom(const VerticalReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DroneController.Messages.VerticalVelocity velocity = 1;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 1;
  const ::DroneController::Messages::VerticalVelocity& velocity() const;
  ::DroneController::Messages::VerticalVelocity* release_velocity();
  ::DroneController::Messages::VerticalVelocity* mutable_velocity();
  void set_allocated_velocity(::DroneController::Messages::VerticalVelocity* velocity);

  // .DroneController.Messages.VerticalVelocityTrajectory velocity_trajectory = 2;
  bool has_velocity_trajectory() const;
  void clear_velocity_trajectory();
  static const int kVelocityTrajectoryFieldNumber = 2;
  const ::DroneController::Messages::VerticalVelocityTrajectory& velocity_trajectory() const;
  ::DroneController::Messages::VerticalVelocityTrajectory* release_velocity_trajectory();
  ::DroneController::Messages::VerticalVelocityTrajectory* mutable_velocity_trajectory();
  void set_allocated_velocity_trajectory(::DroneController::Messages::VerticalVelocityTrajectory* velocity_trajectory);

  // .DroneController.Messages.VerticalTrajectory trajectory = 3;
  bool has_trajectory() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 3;
  const ::DroneController::Messages::VerticalTrajectory& trajectory() const;
  ::DroneController::Messages::VerticalTrajectory* release_trajectory();
  ::DroneController::Messages::VerticalTrajectory* mutable_trajectory();
  void set_allocated_trajectory(::DroneController::Messages::VerticalTrajectory* trajectory);

  // .DroneController.Messages.VerticalThrust thrust = 4;
  bool has_thrust() const;
  void clear_thrust();
  static const int kThrustFieldNumber = 4;
  const ::DroneController::Messages::VerticalThrust& thrust() const;
  ::DroneController::Messages::VerticalThrust* release_thrust();
  ::DroneController::Messages::VerticalThrust* mutable_thrust();
  void set_allocated_thrust(::DroneController::Messages::VerticalThrust* thrust);

  // .DroneController.Messages.VerticalThrustRamp thrust_ramp = 5;
  bool has_thrust_ramp() const;
  void clear_thrust_ramp();
  static const int kThrustRampFieldNumber = 5;
  const ::DroneController::Messages::VerticalThrustRamp& thrust_ramp() const;
  ::DroneController::Messages::VerticalThrustRamp* release_thrust_ramp();
  ::DroneController::Messages::VerticalThrustRamp* mutable_thrust_ramp();
  void set_allocated_thrust_ramp(::DroneController::Messages::VerticalThrustRamp* thrust_ramp);

  void clear_ref();
  RefCase ref_case() const;
  // @@protoc_insertion_point(class_scope:DroneController.Messages.VerticalReference)
 private:
  class HasBitSetters;
  void set_has_velocity();
  void set_has_velocity_trajectory();
  void set_has_trajectory();
  void set_has_thrust();
  void set_has_thrust_ramp();

  inline bool has_ref() const;
  inline void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RefUnion {
    RefUnion() {}
    ::DroneController::Messages::VerticalVelocity* velocity_;
    ::DroneController::Messages::VerticalVelocityTrajectory* velocity_trajectory_;
    ::DroneController::Messages::VerticalTrajectory* trajectory_;
    ::DroneController::Messages::VerticalThrust* thrust_;
    ::DroneController::Messages::VerticalThrustRamp* thrust_ramp_;
  } ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class YawRate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.YawRate) */ {
 public:
  YawRate();
  virtual ~YawRate();

  YawRate(const YawRate& from);

  inline YawRate& operator=(const YawRate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YawRate(YawRate&& from) noexcept
    : YawRate() {
    *this = ::std::move(from);
  }

  inline YawRate& operator=(YawRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const YawRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YawRate* internal_default_instance() {
    return reinterpret_cast<const YawRate*>(
               &_YawRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(YawRate* other);
  friend void swap(YawRate& a, YawRate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YawRate* New() const final {
    return CreateMaybeMessage<YawRate>(nullptr);
  }

  YawRate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<YawRate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const YawRate& from);
  void MergeFrom(const YawRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YawRate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  float ref() const;
  void set_ref(float value);

  // .ColibryLite.Messages.YawControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::YawControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::YawControlConfig::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.YawRate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float ref_;
  int config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class YawTrajectoryNedStart :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.YawTrajectoryNedStart) */ {
 public:
  YawTrajectoryNedStart();
  virtual ~YawTrajectoryNedStart();

  YawTrajectoryNedStart(const YawTrajectoryNedStart& from);

  inline YawTrajectoryNedStart& operator=(const YawTrajectoryNedStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YawTrajectoryNedStart(YawTrajectoryNedStart&& from) noexcept
    : YawTrajectoryNedStart() {
    *this = ::std::move(from);
  }

  inline YawTrajectoryNedStart& operator=(YawTrajectoryNedStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const YawTrajectoryNedStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YawTrajectoryNedStart* internal_default_instance() {
    return reinterpret_cast<const YawTrajectoryNedStart*>(
               &_YawTrajectoryNedStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(YawTrajectoryNedStart* other);
  friend void swap(YawTrajectoryNedStart& a, YawTrajectoryNedStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YawTrajectoryNedStart* New() const final {
    return CreateMaybeMessage<YawTrajectoryNedStart>(nullptr);
  }

  YawTrajectoryNedStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<YawTrajectoryNedStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const YawTrajectoryNedStart& from);
  void MergeFrom(const YawTrajectoryNedStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YawTrajectoryNedStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.TrajectoryPoint ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::TrajectoryPoint& ref() const;
  ::ColibryLite::Messages::TrajectoryPoint* release_ref();
  ::ColibryLite::Messages::TrajectoryPoint* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::TrajectoryPoint* ref);

  // .ColibryLite.Messages.YawControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::YawControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::YawControlConfig::Enum value);

  // .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
  void clear_reference_propagation_model();
  static const int kReferencePropagationModelFieldNumber = 3;
  ::ColibryLite::Messages::ReferencePropagationModel::Enum reference_propagation_model() const;
  void set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value);

  // bool use_shortest_path = 4;
  void clear_use_shortest_path();
  static const int kUseShortestPathFieldNumber = 4;
  bool use_shortest_path() const;
  void set_use_shortest_path(bool value);

  // float maximum_yaw_angular_rate = 5;
  void clear_maximum_yaw_angular_rate();
  static const int kMaximumYawAngularRateFieldNumber = 5;
  float maximum_yaw_angular_rate() const;
  void set_maximum_yaw_angular_rate(float value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.YawTrajectoryNedStart)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::TrajectoryPoint* ref_;
  int config_;
  int reference_propagation_model_;
  bool use_shortest_path_;
  float maximum_yaw_angular_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class YawTrajectoryNed :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.YawTrajectoryNed) */ {
 public:
  YawTrajectoryNed();
  virtual ~YawTrajectoryNed();

  YawTrajectoryNed(const YawTrajectoryNed& from);

  inline YawTrajectoryNed& operator=(const YawTrajectoryNed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YawTrajectoryNed(YawTrajectoryNed&& from) noexcept
    : YawTrajectoryNed() {
    *this = ::std::move(from);
  }

  inline YawTrajectoryNed& operator=(YawTrajectoryNed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const YawTrajectoryNed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YawTrajectoryNed* internal_default_instance() {
    return reinterpret_cast<const YawTrajectoryNed*>(
               &_YawTrajectoryNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(YawTrajectoryNed* other);
  friend void swap(YawTrajectoryNed& a, YawTrajectoryNed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YawTrajectoryNed* New() const final {
    return CreateMaybeMessage<YawTrajectoryNed>(nullptr);
  }

  YawTrajectoryNed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<YawTrajectoryNed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const YawTrajectoryNed& from);
  void MergeFrom(const YawTrajectoryNed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YawTrajectoryNed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.TrajectoryPoint ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::ColibryLite::Messages::TrajectoryPoint& ref() const;
  ::ColibryLite::Messages::TrajectoryPoint* release_ref();
  ::ColibryLite::Messages::TrajectoryPoint* mutable_ref();
  void set_allocated_ref(::ColibryLite::Messages::TrajectoryPoint* ref);

  // .ColibryLite.Messages.YawControlConfig.Enum config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  ::ColibryLite::Messages::YawControlConfig::Enum config() const;
  void set_config(::ColibryLite::Messages::YawControlConfig::Enum value);

  // .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
  void clear_reference_propagation_model();
  static const int kReferencePropagationModelFieldNumber = 3;
  ::ColibryLite::Messages::ReferencePropagationModel::Enum reference_propagation_model() const;
  void set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value);

  // bool use_shortest_path = 4;
  void clear_use_shortest_path();
  static const int kUseShortestPathFieldNumber = 4;
  bool use_shortest_path() const;
  void set_use_shortest_path(bool value);

  // float maximum_yaw_angular_rate = 5;
  void clear_maximum_yaw_angular_rate();
  static const int kMaximumYawAngularRateFieldNumber = 5;
  float maximum_yaw_angular_rate() const;
  void set_maximum_yaw_angular_rate(float value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.YawTrajectoryNed)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::TrajectoryPoint* ref_;
  int config_;
  int reference_propagation_model_;
  bool use_shortest_path_;
  float maximum_yaw_angular_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class YawReference :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.YawReference) */ {
 public:
  YawReference();
  virtual ~YawReference();

  YawReference(const YawReference& from);

  inline YawReference& operator=(const YawReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YawReference(YawReference&& from) noexcept
    : YawReference() {
    *this = ::std::move(from);
  }

  inline YawReference& operator=(YawReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const YawReference& default_instance();

  enum RefCase {
    kRate = 1,
    kTrajectoryNedStart = 2,
    kTrajectoryNed = 3,
    REF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YawReference* internal_default_instance() {
    return reinterpret_cast<const YawReference*>(
               &_YawReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(YawReference* other);
  friend void swap(YawReference& a, YawReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YawReference* New() const final {
    return CreateMaybeMessage<YawReference>(nullptr);
  }

  YawReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<YawReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const YawReference& from);
  void MergeFrom(const YawReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YawReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DroneController.Messages.YawRate rate = 1;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 1;
  const ::DroneController::Messages::YawRate& rate() const;
  ::DroneController::Messages::YawRate* release_rate();
  ::DroneController::Messages::YawRate* mutable_rate();
  void set_allocated_rate(::DroneController::Messages::YawRate* rate);

  // .DroneController.Messages.YawTrajectoryNedStart trajectory_ned_start = 2;
  bool has_trajectory_ned_start() const;
  void clear_trajectory_ned_start();
  static const int kTrajectoryNedStartFieldNumber = 2;
  const ::DroneController::Messages::YawTrajectoryNedStart& trajectory_ned_start() const;
  ::DroneController::Messages::YawTrajectoryNedStart* release_trajectory_ned_start();
  ::DroneController::Messages::YawTrajectoryNedStart* mutable_trajectory_ned_start();
  void set_allocated_trajectory_ned_start(::DroneController::Messages::YawTrajectoryNedStart* trajectory_ned_start);

  // .DroneController.Messages.YawTrajectoryNed trajectory_ned = 3;
  bool has_trajectory_ned() const;
  void clear_trajectory_ned();
  static const int kTrajectoryNedFieldNumber = 3;
  const ::DroneController::Messages::YawTrajectoryNed& trajectory_ned() const;
  ::DroneController::Messages::YawTrajectoryNed* release_trajectory_ned();
  ::DroneController::Messages::YawTrajectoryNed* mutable_trajectory_ned();
  void set_allocated_trajectory_ned(::DroneController::Messages::YawTrajectoryNed* trajectory_ned);

  void clear_ref();
  RefCase ref_case() const;
  // @@protoc_insertion_point(class_scope:DroneController.Messages.YawReference)
 private:
  class HasBitSetters;
  void set_has_rate();
  void set_has_trajectory_ned_start();
  void set_has_trajectory_ned();

  inline bool has_ref() const;
  inline void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RefUnion {
    RefUnion() {}
    ::DroneController::Messages::YawRate* rate_;
    ::DroneController::Messages::YawTrajectoryNedStart* trajectory_ned_start_;
    ::DroneController::Messages::YawTrajectoryNed* trajectory_ned_;
  } ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class TargetReached :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.TargetReached) */ {
 public:
  TargetReached();
  virtual ~TargetReached();

  TargetReached(const TargetReached& from);

  inline TargetReached& operator=(const TargetReached& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetReached(TargetReached&& from) noexcept
    : TargetReached() {
    *this = ::std::move(from);
  }

  inline TargetReached& operator=(TargetReached&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TargetReached& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetReached* internal_default_instance() {
    return reinterpret_cast<const TargetReached*>(
               &_TargetReached_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TargetReached* other);
  friend void swap(TargetReached& a, TargetReached& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetReached* New() const final {
    return CreateMaybeMessage<TargetReached>(nullptr);
  }

  TargetReached* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TargetReached>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TargetReached& from);
  void MergeFrom(const TargetReached& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetReached* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.EventDetectionState.Enum horizontal_position = 1;
  void clear_horizontal_position();
  static const int kHorizontalPositionFieldNumber = 1;
  ::ColibryLite::Messages::EventDetectionState::Enum horizontal_position() const;
  void set_horizontal_position(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum horizontal_velocity = 2;
  void clear_horizontal_velocity();
  static const int kHorizontalVelocityFieldNumber = 2;
  ::ColibryLite::Messages::EventDetectionState::Enum horizontal_velocity() const;
  void set_horizontal_velocity(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum vertical_position = 3;
  void clear_vertical_position();
  static const int kVerticalPositionFieldNumber = 3;
  ::ColibryLite::Messages::EventDetectionState::Enum vertical_position() const;
  void set_vertical_position(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum vertical_velocity = 4;
  void clear_vertical_velocity();
  static const int kVerticalVelocityFieldNumber = 4;
  ::ColibryLite::Messages::EventDetectionState::Enum vertical_velocity() const;
  void set_vertical_velocity(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum yaw_position = 5;
  void clear_yaw_position();
  static const int kYawPositionFieldNumber = 5;
  ::ColibryLite::Messages::EventDetectionState::Enum yaw_position() const;
  void set_yaw_position(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum yaw_velocity = 6;
  void clear_yaw_velocity();
  static const int kYawVelocityFieldNumber = 6;
  ::ColibryLite::Messages::EventDetectionState::Enum yaw_velocity() const;
  void set_yaw_velocity(::ColibryLite::Messages::EventDetectionState::Enum value);

  // bool all_reached = 7;
  void clear_all_reached();
  static const int kAllReachedFieldNumber = 7;
  bool all_reached() const;
  void set_all_reached(bool value);

  // uint32 id = 8;
  void clear_id();
  static const int kIdFieldNumber = 8;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.TargetReached)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int horizontal_position_;
  int horizontal_velocity_;
  int vertical_position_;
  int vertical_velocity_;
  int yaw_position_;
  int yaw_velocity_;
  bool all_reached_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class NavDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.NavDebug) */ {
 public:
  NavDebug();
  virtual ~NavDebug();

  NavDebug(const NavDebug& from);

  inline NavDebug& operator=(const NavDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavDebug(NavDebug&& from) noexcept
    : NavDebug() {
    *this = ::std::move(from);
  }

  inline NavDebug& operator=(NavDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NavDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavDebug* internal_default_instance() {
    return reinterpret_cast<const NavDebug*>(
               &_NavDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(NavDebug* other);
  friend void swap(NavDebug& a, NavDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavDebug* New() const final {
    return CreateMaybeMessage<NavDebug>(nullptr);
  }

  NavDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavDebug& from);
  void MergeFrom(const NavDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.NavDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 num_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class BatteryState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.BatteryState) */ {
 public:
  BatteryState();
  virtual ~BatteryState();

  BatteryState(const BatteryState& from);

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatteryState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(BatteryState* other);
  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryState* New() const final {
    return CreateMaybeMessage<BatteryState>(nullptr);
  }

  BatteryState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryState& from);
  void MergeFrom(const BatteryState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float voltage = 1;
  void clear_voltage();
  static const int kVoltageFieldNumber = 1;
  float voltage() const;
  void set_voltage(float value);

  // int32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // uint32 remaining_cap = 3;
  void clear_remaining_cap();
  static const int kRemainingCapFieldNumber = 3;
  ::google::protobuf::uint32 remaining_cap() const;
  void set_remaining_cap(::google::protobuf::uint32 value);

  // uint32 full_charge_cap = 4;
  void clear_full_charge_cap();
  static const int kFullChargeCapFieldNumber = 4;
  ::google::protobuf::uint32 full_charge_cap() const;
  void set_full_charge_cap(::google::protobuf::uint32 value);

  // bool is_smartbattery = 5;
  void clear_is_smartbattery();
  static const int kIsSmartbatteryFieldNumber = 5;
  bool is_smartbattery() const;
  void set_is_smartbattery(bool value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.BatteryState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float voltage_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 remaining_cap_;
  ::google::protobuf::uint32 full_charge_cap_;
  bool is_smartbattery_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class BatteryRole :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.BatteryRole) */ {
 public:
  BatteryRole();
  virtual ~BatteryRole();

  BatteryRole(const BatteryRole& from);

  inline BatteryRole& operator=(const BatteryRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryRole(BatteryRole&& from) noexcept
    : BatteryRole() {
    *this = ::std::move(from);
  }

  inline BatteryRole& operator=(BatteryRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatteryRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryRole* internal_default_instance() {
    return reinterpret_cast<const BatteryRole*>(
               &_BatteryRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(BatteryRole* other);
  friend void swap(BatteryRole& a, BatteryRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryRole* New() const final {
    return CreateMaybeMessage<BatteryRole>(nullptr);
  }

  BatteryRole* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryRole>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryRole& from);
  void MergeFrom(const BatteryRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DroneController.Messages.BatteryDataRole.Enum data_role = 1;
  void clear_data_role();
  static const int kDataRoleFieldNumber = 1;
  ::DroneController::Messages::BatteryDataRole::Enum data_role() const;
  void set_data_role(::DroneController::Messages::BatteryDataRole::Enum value);

  // .DroneController.Messages.BatteryPowerRole.Enum power_role = 2;
  void clear_power_role();
  static const int kPowerRoleFieldNumber = 2;
  ::DroneController::Messages::BatteryPowerRole::Enum power_role() const;
  void set_power_role(::DroneController::Messages::BatteryPowerRole::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.BatteryRole)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int data_role_;
  int power_role_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class BatteryHealth :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.BatteryHealth) */ {
 public:
  BatteryHealth();
  virtual ~BatteryHealth();

  BatteryHealth(const BatteryHealth& from);

  inline BatteryHealth& operator=(const BatteryHealth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryHealth(BatteryHealth&& from) noexcept
    : BatteryHealth() {
    *this = ::std::move(from);
  }

  inline BatteryHealth& operator=(BatteryHealth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatteryHealth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryHealth* internal_default_instance() {
    return reinterpret_cast<const BatteryHealth*>(
               &_BatteryHealth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(BatteryHealth* other);
  friend void swap(BatteryHealth& a, BatteryHealth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryHealth* New() const final {
    return CreateMaybeMessage<BatteryHealth>(nullptr);
  }

  BatteryHealth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryHealth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryHealth& from);
  void MergeFrom(const BatteryHealth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryHealth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 state_of_health = 1;
  void clear_state_of_health();
  static const int kStateOfHealthFieldNumber = 1;
  ::google::protobuf::uint32 state_of_health() const;
  void set_state_of_health(::google::protobuf::uint32 value);

  // uint32 cycle_count = 2;
  void clear_cycle_count();
  static const int kCycleCountFieldNumber = 2;
  ::google::protobuf::uint32 cycle_count() const;
  void set_cycle_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.BatteryHealth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 state_of_health_;
  ::google::protobuf::uint32 cycle_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class TickNotificationConfig :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.TickNotificationConfig) */ {
 public:
  TickNotificationConfig();
  virtual ~TickNotificationConfig();

  TickNotificationConfig(const TickNotificationConfig& from);

  inline TickNotificationConfig& operator=(const TickNotificationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TickNotificationConfig(TickNotificationConfig&& from) noexcept
    : TickNotificationConfig() {
    *this = ::std::move(from);
  }

  inline TickNotificationConfig& operator=(TickNotificationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TickNotificationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickNotificationConfig* internal_default_instance() {
    return reinterpret_cast<const TickNotificationConfig*>(
               &_TickNotificationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TickNotificationConfig* other);
  friend void swap(TickNotificationConfig& a, TickNotificationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TickNotificationConfig* New() const final {
    return CreateMaybeMessage<TickNotificationConfig>(nullptr);
  }

  TickNotificationConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TickNotificationConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TickNotificationConfig& from);
  void MergeFrom(const TickNotificationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickNotificationConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 period = 1;
  void clear_period();
  static const int kPeriodFieldNumber = 1;
  ::google::protobuf::uint32 period() const;
  void set_period(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.TickNotificationConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Tick :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.Tick) */ {
 public:
  Tick();
  virtual ~Tick();

  Tick(const Tick& from);

  inline Tick& operator=(const Tick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tick(Tick&& from) noexcept
    : Tick() {
    *this = ::std::move(from);
  }

  inline Tick& operator=(Tick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Tick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tick* internal_default_instance() {
    return reinterpret_cast<const Tick*>(
               &_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Tick* other);
  friend void swap(Tick& a, Tick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tick* New() const final {
    return CreateMaybeMessage<Tick>(nullptr);
  }

  Tick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tick& from);
  void MergeFrom(const Tick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp_us = 2;
  void clear_timestamp_us();
  static const int kTimestampUsFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_us() const;
  void set_timestamp_us(::google::protobuf::uint64 value);

  // uint32 num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.Tick)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_us_;
  ::google::protobuf::uint32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class InitStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.InitStatus) */ {
 public:
  InitStatus();
  virtual ~InitStatus();

  InitStatus(const InitStatus& from);

  inline InitStatus& operator=(const InitStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitStatus(InitStatus&& from) noexcept
    : InitStatus() {
    *this = ::std::move(from);
  }

  inline InitStatus& operator=(InitStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InitStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitStatus* internal_default_instance() {
    return reinterpret_cast<const InitStatus*>(
               &_InitStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(InitStatus* other);
  friend void swap(InitStatus& a, InitStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitStatus* New() const final {
    return CreateMaybeMessage<InitStatus>(nullptr);
  }

  InitStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitStatus& from);
  void MergeFrom(const InitStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool flying = 1;
  void clear_flying();
  static const int kFlyingFieldNumber = 1;
  bool flying() const;
  void set_flying(bool value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.InitStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool flying_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class MotorErrorChange :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.MotorErrorChange) */ {
 public:
  MotorErrorChange();
  virtual ~MotorErrorChange();

  MotorErrorChange(const MotorErrorChange& from);

  inline MotorErrorChange& operator=(const MotorErrorChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MotorErrorChange(MotorErrorChange&& from) noexcept
    : MotorErrorChange() {
    *this = ::std::move(from);
  }

  inline MotorErrorChange& operator=(MotorErrorChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MotorErrorChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorErrorChange* internal_default_instance() {
    return reinterpret_cast<const MotorErrorChange*>(
               &_MotorErrorChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(MotorErrorChange* other);
  friend void swap(MotorErrorChange& a, MotorErrorChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorErrorChange* New() const final {
    return CreateMaybeMessage<MotorErrorChange>(nullptr);
  }

  MotorErrorChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MotorErrorChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MotorErrorChange& from);
  void MergeFrom(const MotorErrorChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorErrorChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // .DroneController.Messages.MotorError.Enum value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::DroneController::Messages::MotorError::Enum value() const;
  void set_value(::DroneController::Messages::MotorError::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.MotorErrorChange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 index_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class MotorsErrorsChanged :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.MotorsErrorsChanged) */ {
 public:
  MotorsErrorsChanged();
  virtual ~MotorsErrorsChanged();

  MotorsErrorsChanged(const MotorsErrorsChanged& from);

  inline MotorsErrorsChanged& operator=(const MotorsErrorsChanged& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MotorsErrorsChanged(MotorsErrorsChanged&& from) noexcept
    : MotorsErrorsChanged() {
    *this = ::std::move(from);
  }

  inline MotorsErrorsChanged& operator=(MotorsErrorsChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MotorsErrorsChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorsErrorsChanged* internal_default_instance() {
    return reinterpret_cast<const MotorsErrorsChanged*>(
               &_MotorsErrorsChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(MotorsErrorsChanged* other);
  friend void swap(MotorsErrorsChanged& a, MotorsErrorsChanged& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorsErrorsChanged* New() const final {
    return CreateMaybeMessage<MotorsErrorsChanged>(nullptr);
  }

  MotorsErrorsChanged* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MotorsErrorsChanged>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MotorsErrorsChanged& from);
  void MergeFrom(const MotorsErrorsChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorsErrorsChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DroneController.Messages.MotorErrorChange errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::DroneController::Messages::MotorErrorChange* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::DroneController::Messages::MotorErrorChange >*
      mutable_errors();
  const ::DroneController::Messages::MotorErrorChange& errors(int index) const;
  ::DroneController::Messages::MotorErrorChange* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::DroneController::Messages::MotorErrorChange >&
      errors() const;

  // @@protoc_insertion_point(class_scope:DroneController.Messages.MotorsErrorsChanged)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DroneController::Messages::MotorErrorChange > errors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class MotorsVersion :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.MotorsVersion) */ {
 public:
  MotorsVersion();
  virtual ~MotorsVersion();

  MotorsVersion(const MotorsVersion& from);

  inline MotorsVersion& operator=(const MotorsVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MotorsVersion(MotorsVersion&& from) noexcept
    : MotorsVersion() {
    *this = ::std::move(from);
  }

  inline MotorsVersion& operator=(MotorsVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MotorsVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorsVersion* internal_default_instance() {
    return reinterpret_cast<const MotorsVersion*>(
               &_MotorsVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(MotorsVersion* other);
  friend void swap(MotorsVersion& a, MotorsVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorsVersion* New() const final {
    return CreateMaybeMessage<MotorsVersion>(nullptr);
  }

  MotorsVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MotorsVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MotorsVersion& from);
  void MergeFrom(const MotorsVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorsVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 hard_version = 1;
  void clear_hard_version();
  static const int kHardVersionFieldNumber = 1;
  ::google::protobuf::uint32 hard_version() const;
  void set_hard_version(::google::protobuf::uint32 value);

  // uint32 major_version = 2;
  void clear_major_version();
  static const int kMajorVersionFieldNumber = 2;
  ::google::protobuf::uint32 major_version() const;
  void set_major_version(::google::protobuf::uint32 value);

  // uint32 minor_version = 3;
  void clear_minor_version();
  static const int kMinorVersionFieldNumber = 3;
  ::google::protobuf::uint32 minor_version() const;
  void set_minor_version(::google::protobuf::uint32 value);

  // uint32 type_version = 4;
  void clear_type_version();
  static const int kTypeVersionFieldNumber = 4;
  ::google::protobuf::uint32 type_version() const;
  void set_type_version(::google::protobuf::uint32 value);

  // uint32 motors_count = 5;
  void clear_motors_count();
  static const int kMotorsCountFieldNumber = 5;
  ::google::protobuf::uint32 motors_count() const;
  void set_motors_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.MotorsVersion)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 hard_version_;
  ::google::protobuf::uint32 major_version_;
  ::google::protobuf::uint32 minor_version_;
  ::google::protobuf::uint32 type_version_;
  ::google::protobuf::uint32 motors_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class MotorsFlightInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.MotorsFlightInfo) */ {
 public:
  MotorsFlightInfo();
  virtual ~MotorsFlightInfo();

  MotorsFlightInfo(const MotorsFlightInfo& from);

  inline MotorsFlightInfo& operator=(const MotorsFlightInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MotorsFlightInfo(MotorsFlightInfo&& from) noexcept
    : MotorsFlightInfo() {
    *this = ::std::move(from);
  }

  inline MotorsFlightInfo& operator=(MotorsFlightInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MotorsFlightInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorsFlightInfo* internal_default_instance() {
    return reinterpret_cast<const MotorsFlightInfo*>(
               &_MotorsFlightInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(MotorsFlightInfo* other);
  friend void swap(MotorsFlightInfo& a, MotorsFlightInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorsFlightInfo* New() const final {
    return CreateMaybeMessage<MotorsFlightInfo>(nullptr);
  }

  MotorsFlightInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MotorsFlightInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MotorsFlightInfo& from);
  void MergeFrom(const MotorsFlightInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorsFlightInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 nb_flights = 1;
  void clear_nb_flights();
  static const int kNbFlightsFieldNumber = 1;
  ::google::protobuf::uint32 nb_flights() const;
  void set_nb_flights(::google::protobuf::uint32 value);

  // uint32 previous_time = 2;
  void clear_previous_time();
  static const int kPreviousTimeFieldNumber = 2;
  ::google::protobuf::uint32 previous_time() const;
  void set_previous_time(::google::protobuf::uint32 value);

  // uint32 total_time = 3;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 3;
  ::google::protobuf::uint32 total_time() const;
  void set_total_time(::google::protobuf::uint32 value);

  // .DroneController.Messages.MotorError.Enum last_error = 4;
  void clear_last_error();
  static const int kLastErrorFieldNumber = 4;
  ::DroneController::Messages::MotorError::Enum last_error() const;
  void set_last_error(::DroneController::Messages::MotorError::Enum value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.MotorsFlightInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 nb_flights_;
  ::google::protobuf::uint32 previous_time_;
  ::google::protobuf::uint32 total_time_;
  int last_error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class PositionVelocityTargets :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.PositionVelocityTargets) */ {
 public:
  PositionVelocityTargets();
  virtual ~PositionVelocityTargets();

  PositionVelocityTargets(const PositionVelocityTargets& from);

  inline PositionVelocityTargets& operator=(const PositionVelocityTargets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionVelocityTargets(PositionVelocityTargets&& from) noexcept
    : PositionVelocityTargets() {
    *this = ::std::move(from);
  }

  inline PositionVelocityTargets& operator=(PositionVelocityTargets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PositionVelocityTargets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionVelocityTargets* internal_default_instance() {
    return reinterpret_cast<const PositionVelocityTargets*>(
               &_PositionVelocityTargets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(PositionVelocityTargets* other);
  friend void swap(PositionVelocityTargets& a, PositionVelocityTargets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionVelocityTargets* New() const final {
    return CreateMaybeMessage<PositionVelocityTargets>(nullptr);
  }

  PositionVelocityTargets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PositionVelocityTargets>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PositionVelocityTargets& from);
  void MergeFrom(const PositionVelocityTargets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionVelocityTargets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.HorizontalPositionTarget horizontal_position_target = 1;
  bool has_horizontal_position_target() const;
  void clear_horizontal_position_target();
  static const int kHorizontalPositionTargetFieldNumber = 1;
  const ::ColibryLite::Messages::HorizontalPositionTarget& horizontal_position_target() const;
  ::ColibryLite::Messages::HorizontalPositionTarget* release_horizontal_position_target();
  ::ColibryLite::Messages::HorizontalPositionTarget* mutable_horizontal_position_target();
  void set_allocated_horizontal_position_target(::ColibryLite::Messages::HorizontalPositionTarget* horizontal_position_target);

  // .ColibryLite.Messages.HorizontalVelocityTarget horizontal_velocity_target = 2;
  bool has_horizontal_velocity_target() const;
  void clear_horizontal_velocity_target();
  static const int kHorizontalVelocityTargetFieldNumber = 2;
  const ::ColibryLite::Messages::HorizontalVelocityTarget& horizontal_velocity_target() const;
  ::ColibryLite::Messages::HorizontalVelocityTarget* release_horizontal_velocity_target();
  ::ColibryLite::Messages::HorizontalVelocityTarget* mutable_horizontal_velocity_target();
  void set_allocated_horizontal_velocity_target(::ColibryLite::Messages::HorizontalVelocityTarget* horizontal_velocity_target);

  // .ColibryLite.Messages.VerticalPositionTarget vertical_position_target = 3;
  bool has_vertical_position_target() const;
  void clear_vertical_position_target();
  static const int kVerticalPositionTargetFieldNumber = 3;
  const ::ColibryLite::Messages::VerticalPositionTarget& vertical_position_target() const;
  ::ColibryLite::Messages::VerticalPositionTarget* release_vertical_position_target();
  ::ColibryLite::Messages::VerticalPositionTarget* mutable_vertical_position_target();
  void set_allocated_vertical_position_target(::ColibryLite::Messages::VerticalPositionTarget* vertical_position_target);

  // .ColibryLite.Messages.VerticalVelocityTarget vertical_velocity_target = 4;
  bool has_vertical_velocity_target() const;
  void clear_vertical_velocity_target();
  static const int kVerticalVelocityTargetFieldNumber = 4;
  const ::ColibryLite::Messages::VerticalVelocityTarget& vertical_velocity_target() const;
  ::ColibryLite::Messages::VerticalVelocityTarget* release_vertical_velocity_target();
  ::ColibryLite::Messages::VerticalVelocityTarget* mutable_vertical_velocity_target();
  void set_allocated_vertical_velocity_target(::ColibryLite::Messages::VerticalVelocityTarget* vertical_velocity_target);

  // .ColibryLite.Messages.YawPositionTarget yaw_position_target = 5;
  bool has_yaw_position_target() const;
  void clear_yaw_position_target();
  static const int kYawPositionTargetFieldNumber = 5;
  const ::ColibryLite::Messages::YawPositionTarget& yaw_position_target() const;
  ::ColibryLite::Messages::YawPositionTarget* release_yaw_position_target();
  ::ColibryLite::Messages::YawPositionTarget* mutable_yaw_position_target();
  void set_allocated_yaw_position_target(::ColibryLite::Messages::YawPositionTarget* yaw_position_target);

  // .ColibryLite.Messages.YawVelocityTarget yaw_velocity_target = 6;
  bool has_yaw_velocity_target() const;
  void clear_yaw_velocity_target();
  static const int kYawVelocityTargetFieldNumber = 6;
  const ::ColibryLite::Messages::YawVelocityTarget& yaw_velocity_target() const;
  ::ColibryLite::Messages::YawVelocityTarget* release_yaw_velocity_target();
  ::ColibryLite::Messages::YawVelocityTarget* mutable_yaw_velocity_target();
  void set_allocated_yaw_velocity_target(::ColibryLite::Messages::YawVelocityTarget* yaw_velocity_target);

  // uint32 id = 7;
  void clear_id();
  static const int kIdFieldNumber = 7;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DroneController.Messages.PositionVelocityTargets)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ColibryLite::Messages::HorizontalPositionTarget* horizontal_position_target_;
  ::ColibryLite::Messages::HorizontalVelocityTarget* horizontal_velocity_target_;
  ::ColibryLite::Messages::VerticalPositionTarget* vertical_position_target_;
  ::ColibryLite::Messages::VerticalVelocityTarget* vertical_velocity_target_;
  ::ColibryLite::Messages::YawPositionTarget* yaw_position_target_;
  ::ColibryLite::Messages::YawVelocityTarget* yaw_velocity_target_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kRequestAllEvents = 1,
    kRequestFullSteadyState = 2,
    kSetEstimationMode = 10,
    kDisableHorizontalControl = 20,
    kSetHorizontalReference = 21,
    kDisableVerticalControl = 30,
    kSetVerticalReference = 31,
    kDisableYawControl = 40,
    kSetYawReference = 41,
    kResetQuaternionLoopIntegral = 53,
    kActivateMotorDownControl = 54,
    kStartMotors = 60,
    kStopAllMotors = 61,
    kStopMotor = 62,
    kSetTickNotificationConfig = 70,
    kKeepAlive = 71,
    kSetVisionCarpet = 80,
    kSetNavDebug = 81,
    kSetEmergencyBehavior = 90,
    kSetPositionVelocityTargets = 100,
    kResetAllTargets = 120,
    kClearCommandQueue = 130,
    kSetMagnetoRejectionNominal = 140,
    kSetMagnetoRejectionUnlimited = 141,
    kSetExternalHeading = 150,
    kStopExternalHeadingMode = 151,
    kUnlockHeading = 152,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tick_num = 1000;
  void clear_tick_num();
  static const int kTickNumFieldNumber = 1000;
  ::google::protobuf::uint32 tick_num() const;
  void set_tick_num(::google::protobuf::uint32 value);

  // .google.protobuf.Empty request_all_events = 1;
  bool has_request_all_events() const;
  void clear_request_all_events();
  static const int kRequestAllEventsFieldNumber = 1;
  const ::google::protobuf::Empty& request_all_events() const;
  ::google::protobuf::Empty* release_request_all_events();
  ::google::protobuf::Empty* mutable_request_all_events();
  void set_allocated_request_all_events(::google::protobuf::Empty* request_all_events);

  // .google.protobuf.Empty request_full_steady_state = 2;
  bool has_request_full_steady_state() const;
  void clear_request_full_steady_state();
  static const int kRequestFullSteadyStateFieldNumber = 2;
  const ::google::protobuf::Empty& request_full_steady_state() const;
  ::google::protobuf::Empty* release_request_full_steady_state();
  ::google::protobuf::Empty* mutable_request_full_steady_state();
  void set_allocated_request_full_steady_state(::google::protobuf::Empty* request_full_steady_state);

  // .ColibryLite.Messages.EstimationMode.Enum set_estimation_mode = 10;
  private:
  bool has_set_estimation_mode() const;
  public:
  void clear_set_estimation_mode();
  static const int kSetEstimationModeFieldNumber = 10;
  ::ColibryLite::Messages::EstimationMode::Enum set_estimation_mode() const;
  void set_set_estimation_mode(::ColibryLite::Messages::EstimationMode::Enum value);

  // .google.protobuf.Empty disable_horizontal_control = 20;
  bool has_disable_horizontal_control() const;
  void clear_disable_horizontal_control();
  static const int kDisableHorizontalControlFieldNumber = 20;
  const ::google::protobuf::Empty& disable_horizontal_control() const;
  ::google::protobuf::Empty* release_disable_horizontal_control();
  ::google::protobuf::Empty* mutable_disable_horizontal_control();
  void set_allocated_disable_horizontal_control(::google::protobuf::Empty* disable_horizontal_control);

  // .DroneController.Messages.HorizontalReference set_horizontal_reference = 21;
  bool has_set_horizontal_reference() const;
  void clear_set_horizontal_reference();
  static const int kSetHorizontalReferenceFieldNumber = 21;
  const ::DroneController::Messages::HorizontalReference& set_horizontal_reference() const;
  ::DroneController::Messages::HorizontalReference* release_set_horizontal_reference();
  ::DroneController::Messages::HorizontalReference* mutable_set_horizontal_reference();
  void set_allocated_set_horizontal_reference(::DroneController::Messages::HorizontalReference* set_horizontal_reference);

  // .google.protobuf.Empty disable_vertical_control = 30;
  bool has_disable_vertical_control() const;
  void clear_disable_vertical_control();
  static const int kDisableVerticalControlFieldNumber = 30;
  const ::google::protobuf::Empty& disable_vertical_control() const;
  ::google::protobuf::Empty* release_disable_vertical_control();
  ::google::protobuf::Empty* mutable_disable_vertical_control();
  void set_allocated_disable_vertical_control(::google::protobuf::Empty* disable_vertical_control);

  // .DroneController.Messages.VerticalReference set_vertical_reference = 31;
  bool has_set_vertical_reference() const;
  void clear_set_vertical_reference();
  static const int kSetVerticalReferenceFieldNumber = 31;
  const ::DroneController::Messages::VerticalReference& set_vertical_reference() const;
  ::DroneController::Messages::VerticalReference* release_set_vertical_reference();
  ::DroneController::Messages::VerticalReference* mutable_set_vertical_reference();
  void set_allocated_set_vertical_reference(::DroneController::Messages::VerticalReference* set_vertical_reference);

  // .google.protobuf.Empty disable_yaw_control = 40;
  bool has_disable_yaw_control() const;
  void clear_disable_yaw_control();
  static const int kDisableYawControlFieldNumber = 40;
  const ::google::protobuf::Empty& disable_yaw_control() const;
  ::google::protobuf::Empty* release_disable_yaw_control();
  ::google::protobuf::Empty* mutable_disable_yaw_control();
  void set_allocated_disable_yaw_control(::google::protobuf::Empty* disable_yaw_control);

  // .DroneController.Messages.YawReference set_yaw_reference = 41;
  bool has_set_yaw_reference() const;
  void clear_set_yaw_reference();
  static const int kSetYawReferenceFieldNumber = 41;
  const ::DroneController::Messages::YawReference& set_yaw_reference() const;
  ::DroneController::Messages::YawReference* release_set_yaw_reference();
  ::DroneController::Messages::YawReference* mutable_set_yaw_reference();
  void set_allocated_set_yaw_reference(::DroneController::Messages::YawReference* set_yaw_reference);

  // bool reset_quaternion_loop_integral = 53;
  private:
  bool has_reset_quaternion_loop_integral() const;
  public:
  void clear_reset_quaternion_loop_integral();
  static const int kResetQuaternionLoopIntegralFieldNumber = 53;
  bool reset_quaternion_loop_integral() const;
  void set_reset_quaternion_loop_integral(bool value);

  // .google.protobuf.Empty activate_motor_down_control = 54;
  bool has_activate_motor_down_control() const;
  void clear_activate_motor_down_control();
  static const int kActivateMotorDownControlFieldNumber = 54;
  const ::google::protobuf::Empty& activate_motor_down_control() const;
  ::google::protobuf::Empty* release_activate_motor_down_control();
  ::google::protobuf::Empty* mutable_activate_motor_down_control();
  void set_allocated_activate_motor_down_control(::google::protobuf::Empty* activate_motor_down_control);

  // .google.protobuf.Empty start_motors = 60;
  bool has_start_motors() const;
  void clear_start_motors();
  static const int kStartMotorsFieldNumber = 60;
  const ::google::protobuf::Empty& start_motors() const;
  ::google::protobuf::Empty* release_start_motors();
  ::google::protobuf::Empty* mutable_start_motors();
  void set_allocated_start_motors(::google::protobuf::Empty* start_motors);

  // .google.protobuf.Empty stop_all_motors = 61;
  bool has_stop_all_motors() const;
  void clear_stop_all_motors();
  static const int kStopAllMotorsFieldNumber = 61;
  const ::google::protobuf::Empty& stop_all_motors() const;
  ::google::protobuf::Empty* release_stop_all_motors();
  ::google::protobuf::Empty* mutable_stop_all_motors();
  void set_allocated_stop_all_motors(::google::protobuf::Empty* stop_all_motors);

  // .ColibryLite.Messages.DefectiveMotorId.Enum stop_motor = 62;
  private:
  bool has_stop_motor() const;
  public:
  void clear_stop_motor();
  static const int kStopMotorFieldNumber = 62;
  ::ColibryLite::Messages::DefectiveMotorId::Enum stop_motor() const;
  void set_stop_motor(::ColibryLite::Messages::DefectiveMotorId::Enum value);

  // .DroneController.Messages.TickNotificationConfig set_tick_notification_config = 70;
  bool has_set_tick_notification_config() const;
  void clear_set_tick_notification_config();
  static const int kSetTickNotificationConfigFieldNumber = 70;
  const ::DroneController::Messages::TickNotificationConfig& set_tick_notification_config() const;
  ::DroneController::Messages::TickNotificationConfig* release_set_tick_notification_config();
  ::DroneController::Messages::TickNotificationConfig* mutable_set_tick_notification_config();
  void set_allocated_set_tick_notification_config(::DroneController::Messages::TickNotificationConfig* set_tick_notification_config);

  // .google.protobuf.Empty keep_alive = 71;
  bool has_keep_alive() const;
  void clear_keep_alive();
  static const int kKeepAliveFieldNumber = 71;
  const ::google::protobuf::Empty& keep_alive() const;
  ::google::protobuf::Empty* release_keep_alive();
  ::google::protobuf::Empty* mutable_keep_alive();
  void set_allocated_keep_alive(::google::protobuf::Empty* keep_alive);

  // bool set_vision_carpet = 80;
  private:
  bool has_set_vision_carpet() const;
  public:
  void clear_set_vision_carpet();
  static const int kSetVisionCarpetFieldNumber = 80;
  bool set_vision_carpet() const;
  void set_set_vision_carpet(bool value);

  // .DroneController.Messages.NavDebug set_nav_debug = 81;
  bool has_set_nav_debug() const;
  void clear_set_nav_debug();
  static const int kSetNavDebugFieldNumber = 81;
  const ::DroneController::Messages::NavDebug& set_nav_debug() const;
  ::DroneController::Messages::NavDebug* release_set_nav_debug();
  ::DroneController::Messages::NavDebug* mutable_set_nav_debug();
  void set_allocated_set_nav_debug(::DroneController::Messages::NavDebug* set_nav_debug);

  // .DroneController.Messages.EmergencyBehavior.Enum set_emergency_behavior = 90;
  private:
  bool has_set_emergency_behavior() const;
  public:
  void clear_set_emergency_behavior();
  static const int kSetEmergencyBehaviorFieldNumber = 90;
  ::DroneController::Messages::EmergencyBehavior::Enum set_emergency_behavior() const;
  void set_set_emergency_behavior(::DroneController::Messages::EmergencyBehavior::Enum value);

  // .DroneController.Messages.PositionVelocityTargets set_position_velocity_targets = 100;
  bool has_set_position_velocity_targets() const;
  void clear_set_position_velocity_targets();
  static const int kSetPositionVelocityTargetsFieldNumber = 100;
  const ::DroneController::Messages::PositionVelocityTargets& set_position_velocity_targets() const;
  ::DroneController::Messages::PositionVelocityTargets* release_set_position_velocity_targets();
  ::DroneController::Messages::PositionVelocityTargets* mutable_set_position_velocity_targets();
  void set_allocated_set_position_velocity_targets(::DroneController::Messages::PositionVelocityTargets* set_position_velocity_targets);

  // .google.protobuf.Empty reset_all_targets = 120;
  bool has_reset_all_targets() const;
  void clear_reset_all_targets();
  static const int kResetAllTargetsFieldNumber = 120;
  const ::google::protobuf::Empty& reset_all_targets() const;
  ::google::protobuf::Empty* release_reset_all_targets();
  ::google::protobuf::Empty* mutable_reset_all_targets();
  void set_allocated_reset_all_targets(::google::protobuf::Empty* reset_all_targets);

  // .google.protobuf.Empty clear_command_queue = 130;
  bool has_clear_command_queue() const;
  void clear_clear_command_queue();
  static const int kClearCommandQueueFieldNumber = 130;
  const ::google::protobuf::Empty& clear_command_queue() const;
  ::google::protobuf::Empty* release_clear_command_queue();
  ::google::protobuf::Empty* mutable_clear_command_queue();
  void set_allocated_clear_command_queue(::google::protobuf::Empty* clear_command_queue);

  // .google.protobuf.Empty set_magneto_rejection_nominal = 140;
  bool has_set_magneto_rejection_nominal() const;
  void clear_set_magneto_rejection_nominal();
  static const int kSetMagnetoRejectionNominalFieldNumber = 140;
  const ::google::protobuf::Empty& set_magneto_rejection_nominal() const;
  ::google::protobuf::Empty* release_set_magneto_rejection_nominal();
  ::google::protobuf::Empty* mutable_set_magneto_rejection_nominal();
  void set_allocated_set_magneto_rejection_nominal(::google::protobuf::Empty* set_magneto_rejection_nominal);

  // .google.protobuf.Empty set_magneto_rejection_unlimited = 141;
  bool has_set_magneto_rejection_unlimited() const;
  void clear_set_magneto_rejection_unlimited();
  static const int kSetMagnetoRejectionUnlimitedFieldNumber = 141;
  const ::google::protobuf::Empty& set_magneto_rejection_unlimited() const;
  ::google::protobuf::Empty* release_set_magneto_rejection_unlimited();
  ::google::protobuf::Empty* mutable_set_magneto_rejection_unlimited();
  void set_allocated_set_magneto_rejection_unlimited(::google::protobuf::Empty* set_magneto_rejection_unlimited);

  // float set_external_heading = 150;
  private:
  bool has_set_external_heading() const;
  public:
  void clear_set_external_heading();
  static const int kSetExternalHeadingFieldNumber = 150;
  float set_external_heading() const;
  void set_set_external_heading(float value);

  // .google.protobuf.Empty stop_external_heading_mode = 151;
  bool has_stop_external_heading_mode() const;
  void clear_stop_external_heading_mode();
  static const int kStopExternalHeadingModeFieldNumber = 151;
  const ::google::protobuf::Empty& stop_external_heading_mode() const;
  ::google::protobuf::Empty* release_stop_external_heading_mode();
  ::google::protobuf::Empty* mutable_stop_external_heading_mode();
  void set_allocated_stop_external_heading_mode(::google::protobuf::Empty* stop_external_heading_mode);

  // .google.protobuf.Empty unlock_heading = 152;
  bool has_unlock_heading() const;
  void clear_unlock_heading();
  static const int kUnlockHeadingFieldNumber = 152;
  const ::google::protobuf::Empty& unlock_heading() const;
  ::google::protobuf::Empty* release_unlock_heading();
  ::google::protobuf::Empty* mutable_unlock_heading();
  void set_allocated_unlock_heading(::google::protobuf::Empty* unlock_heading);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:DroneController.Messages.Command)
 private:
  class HasBitSetters;
  void set_has_request_all_events();
  void set_has_request_full_steady_state();
  void set_has_set_estimation_mode();
  void set_has_disable_horizontal_control();
  void set_has_set_horizontal_reference();
  void set_has_disable_vertical_control();
  void set_has_set_vertical_reference();
  void set_has_disable_yaw_control();
  void set_has_set_yaw_reference();
  void set_has_reset_quaternion_loop_integral();
  void set_has_activate_motor_down_control();
  void set_has_start_motors();
  void set_has_stop_all_motors();
  void set_has_stop_motor();
  void set_has_set_tick_notification_config();
  void set_has_keep_alive();
  void set_has_set_vision_carpet();
  void set_has_set_nav_debug();
  void set_has_set_emergency_behavior();
  void set_has_set_position_velocity_targets();
  void set_has_reset_all_targets();
  void set_has_clear_command_queue();
  void set_has_set_magneto_rejection_nominal();
  void set_has_set_magneto_rejection_unlimited();
  void set_has_set_external_heading();
  void set_has_stop_external_heading_mode();
  void set_has_unlock_heading();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tick_num_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::Empty* request_all_events_;
    ::google::protobuf::Empty* request_full_steady_state_;
    int set_estimation_mode_;
    ::google::protobuf::Empty* disable_horizontal_control_;
    ::DroneController::Messages::HorizontalReference* set_horizontal_reference_;
    ::google::protobuf::Empty* disable_vertical_control_;
    ::DroneController::Messages::VerticalReference* set_vertical_reference_;
    ::google::protobuf::Empty* disable_yaw_control_;
    ::DroneController::Messages::YawReference* set_yaw_reference_;
    bool reset_quaternion_loop_integral_;
    ::google::protobuf::Empty* activate_motor_down_control_;
    ::google::protobuf::Empty* start_motors_;
    ::google::protobuf::Empty* stop_all_motors_;
    int stop_motor_;
    ::DroneController::Messages::TickNotificationConfig* set_tick_notification_config_;
    ::google::protobuf::Empty* keep_alive_;
    bool set_vision_carpet_;
    ::DroneController::Messages::NavDebug* set_nav_debug_;
    int set_emergency_behavior_;
    ::DroneController::Messages::PositionVelocityTargets* set_position_velocity_targets_;
    ::google::protobuf::Empty* reset_all_targets_;
    ::google::protobuf::Empty* clear_command_queue_;
    ::google::protobuf::Empty* set_magneto_rejection_nominal_;
    ::google::protobuf::Empty* set_magneto_rejection_unlimited_;
    float set_external_heading_;
    ::google::protobuf::Empty* stop_external_heading_mode_;
    ::google::protobuf::Empty* unlock_heading_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneController.Messages.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kMotionStateChanged = 10,
    kMovingGroundStateChanged = 11,
    kFreefallDetected = 12,
    kLandedDetected = 13,
    kThrustRampDone = 14,
    kHorizontalSteady = 15,
    kVerticalSteady = 16,
    kYawSteady = 17,
    kFullSteadyOk = 18,
    kFullSteadyKo = 19,
    kTooMuchAngleDetected = 20,
    kTooMuchAngleDetectedAtLowAltitude = 21,
    kNominalAngleDetected = 22,
    kNominalAngleDetectedAtLowAltitude = 23,
    kFlyawayDetected = 24,
    kMagnetoFarEnoughFromEarthPoles = 25,
    kMagnetoTooCloseToEarthPoles = 26,
    kMagneticInterferenceDetected = 27,
    kNoMagneticInterference = 28,
    kFreefallNotDetected = 29,
    kMotorsStarted = 30,
    kMotorsStartFailure = 31,
    kMotorsStopped = 32,
    kMotorsCutout = 33,
    kMotorsRampingDone = 34,
    kMotorsErrors = 35,
    kMotorsVersion = 36,
    kMotorsFlightInfo = 37,
    kTargetReached = 40,
    kHandTakeoffLowAngle = 41,
    kHandTakeoffLowVerticalSpeedError = 42,
    kHandTakeoffLowAngularVelocity = 43,
    kLinearVelocityReliable = 44,
    kLinearVelocityUnreliable = 45,
    kGroundDistanceDefective = 46,
    kGroundDistanceFunctional = 47,
    kThrustForAngleReached = 48,
    kGpsNavigationReady = 50,
    kGpsNavigationUnavailable = 51,
    kGpsSensorOk = 54,
    kGpsSensorKo = 55,
    kHeadingLockedOk = 56,
    kHeadingLockedKo = 57,
    kGpsSatellites = 52,
    kVisionNavigationReady = 58,
    kVisionNavigationUnavailable = 59,
    kWindStatusChanged = 70,
    kDefectiveMotorIdChanged = 71,
    kDefectiveMotorFailureTypeChanged = 72,
    kVibrationLevelChanged = 73,
    kPropellerIcingLevelChanged = 74,
    kMagnetoNotCalibrated = 80,
    kMagnetoCalibrationXDone = 81,
    kMagnetoCalibrationYDone = 82,
    kMagnetoCalibrationZDone = 83,
    kMagnetoCalibrationAborted = 84,
    kMagnetoCalibrationFailed = 85,
    kMagnetoCalibrationDone = 86,
    kMagnetoCalibrationRequired = 87,
    kMagnetoCalibrationAdvised = 88,
    kMinAltitudeConstrained = 90,
    kMinAltitudeNotConstrained = 91,
    kDefectiveSensorsStateChanged = 110,
    kBatteryStateChanged = 120,
    kBatteryRoleChanged = 121,
    kBatteryAlertTooHot = 122,
    kBatteryAlertTooCold = 123,
    kBatteryHealth = 124,
    kTick = 130,
    kMotorDownControlReady = 140,
    kMotorDownControlUnavailable = 141,
    kSingleStallAvailable = 142,
    kSingleStallUnavailable = 143,
    kInitOk = 1000,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ColibryLite.Messages.MotionState.Enum motion_state_changed = 10;
  private:
  bool has_motion_state_changed() const;
  public:
  void clear_motion_state_changed();
  static const int kMotionStateChangedFieldNumber = 10;
  ::ColibryLite::Messages::MotionState::Enum motion_state_changed() const;
  void set_motion_state_changed(::ColibryLite::Messages::MotionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum moving_ground_state_changed = 11;
  private:
  bool has_moving_ground_state_changed() const;
  public:
  void clear_moving_ground_state_changed();
  static const int kMovingGroundStateChangedFieldNumber = 11;
  ::ColibryLite::Messages::EventDetectionState::Enum moving_ground_state_changed() const;
  void set_moving_ground_state_changed(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .google.protobuf.Empty freefall_detected = 12;
  bool has_freefall_detected() const;
  void clear_freefall_detected();
  static const int kFreefallDetectedFieldNumber = 12;
  const ::google::protobuf::Empty& freefall_detected() const;
  ::google::protobuf::Empty* release_freefall_detected();
  ::google::protobuf::Empty* mutable_freefall_detected();
  void set_allocated_freefall_detected(::google::protobuf::Empty* freefall_detected);

  // .google.protobuf.Empty landed_detected = 13;
  bool has_landed_detected() const;
  void clear_landed_detected();
  static const int kLandedDetectedFieldNumber = 13;
  const ::google::protobuf::Empty& landed_detected() const;
  ::google::protobuf::Empty* release_landed_detected();
  ::google::protobuf::Empty* mutable_landed_detected();
  void set_allocated_landed_detected(::google::protobuf::Empty* landed_detected);

  // .google.protobuf.Empty thrust_ramp_done = 14;
  bool has_thrust_ramp_done() const;
  void clear_thrust_ramp_done();
  static const int kThrustRampDoneFieldNumber = 14;
  const ::google::protobuf::Empty& thrust_ramp_done() const;
  ::google::protobuf::Empty* release_thrust_ramp_done();
  ::google::protobuf::Empty* mutable_thrust_ramp_done();
  void set_allocated_thrust_ramp_done(::google::protobuf::Empty* thrust_ramp_done);

  // .ColibryLite.Messages.EventDetectionState.Enum horizontal_steady = 15;
  private:
  bool has_horizontal_steady() const;
  public:
  void clear_horizontal_steady();
  static const int kHorizontalSteadyFieldNumber = 15;
  ::ColibryLite::Messages::EventDetectionState::Enum horizontal_steady() const;
  void set_horizontal_steady(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum vertical_steady = 16;
  private:
  bool has_vertical_steady() const;
  public:
  void clear_vertical_steady();
  static const int kVerticalSteadyFieldNumber = 16;
  ::ColibryLite::Messages::EventDetectionState::Enum vertical_steady() const;
  void set_vertical_steady(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum yaw_steady = 17;
  private:
  bool has_yaw_steady() const;
  public:
  void clear_yaw_steady();
  static const int kYawSteadyFieldNumber = 17;
  ::ColibryLite::Messages::EventDetectionState::Enum yaw_steady() const;
  void set_yaw_steady(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .google.protobuf.Empty full_steady_ok = 18;
  bool has_full_steady_ok() const;
  void clear_full_steady_ok();
  static const int kFullSteadyOkFieldNumber = 18;
  const ::google::protobuf::Empty& full_steady_ok() const;
  ::google::protobuf::Empty* release_full_steady_ok();
  ::google::protobuf::Empty* mutable_full_steady_ok();
  void set_allocated_full_steady_ok(::google::protobuf::Empty* full_steady_ok);

  // .google.protobuf.Empty full_steady_ko = 19;
  bool has_full_steady_ko() const;
  void clear_full_steady_ko();
  static const int kFullSteadyKoFieldNumber = 19;
  const ::google::protobuf::Empty& full_steady_ko() const;
  ::google::protobuf::Empty* release_full_steady_ko();
  ::google::protobuf::Empty* mutable_full_steady_ko();
  void set_allocated_full_steady_ko(::google::protobuf::Empty* full_steady_ko);

  // .google.protobuf.Empty too_much_angle_detected = 20;
  bool has_too_much_angle_detected() const;
  void clear_too_much_angle_detected();
  static const int kTooMuchAngleDetectedFieldNumber = 20;
  const ::google::protobuf::Empty& too_much_angle_detected() const;
  ::google::protobuf::Empty* release_too_much_angle_detected();
  ::google::protobuf::Empty* mutable_too_much_angle_detected();
  void set_allocated_too_much_angle_detected(::google::protobuf::Empty* too_much_angle_detected);

  // .google.protobuf.Empty too_much_angle_detected_at_low_altitude = 21;
  bool has_too_much_angle_detected_at_low_altitude() const;
  void clear_too_much_angle_detected_at_low_altitude();
  static const int kTooMuchAngleDetectedAtLowAltitudeFieldNumber = 21;
  const ::google::protobuf::Empty& too_much_angle_detected_at_low_altitude() const;
  ::google::protobuf::Empty* release_too_much_angle_detected_at_low_altitude();
  ::google::protobuf::Empty* mutable_too_much_angle_detected_at_low_altitude();
  void set_allocated_too_much_angle_detected_at_low_altitude(::google::protobuf::Empty* too_much_angle_detected_at_low_altitude);

  // .google.protobuf.Empty nominal_angle_detected = 22;
  bool has_nominal_angle_detected() const;
  void clear_nominal_angle_detected();
  static const int kNominalAngleDetectedFieldNumber = 22;
  const ::google::protobuf::Empty& nominal_angle_detected() const;
  ::google::protobuf::Empty* release_nominal_angle_detected();
  ::google::protobuf::Empty* mutable_nominal_angle_detected();
  void set_allocated_nominal_angle_detected(::google::protobuf::Empty* nominal_angle_detected);

  // .google.protobuf.Empty nominal_angle_detected_at_low_altitude = 23;
  bool has_nominal_angle_detected_at_low_altitude() const;
  void clear_nominal_angle_detected_at_low_altitude();
  static const int kNominalAngleDetectedAtLowAltitudeFieldNumber = 23;
  const ::google::protobuf::Empty& nominal_angle_detected_at_low_altitude() const;
  ::google::protobuf::Empty* release_nominal_angle_detected_at_low_altitude();
  ::google::protobuf::Empty* mutable_nominal_angle_detected_at_low_altitude();
  void set_allocated_nominal_angle_detected_at_low_altitude(::google::protobuf::Empty* nominal_angle_detected_at_low_altitude);

  // .google.protobuf.Empty flyaway_detected = 24;
  bool has_flyaway_detected() const;
  void clear_flyaway_detected();
  static const int kFlyawayDetectedFieldNumber = 24;
  const ::google::protobuf::Empty& flyaway_detected() const;
  ::google::protobuf::Empty* release_flyaway_detected();
  ::google::protobuf::Empty* mutable_flyaway_detected();
  void set_allocated_flyaway_detected(::google::protobuf::Empty* flyaway_detected);

  // .google.protobuf.Empty magneto_far_enough_from_earth_poles = 25;
  bool has_magneto_far_enough_from_earth_poles() const;
  void clear_magneto_far_enough_from_earth_poles();
  static const int kMagnetoFarEnoughFromEarthPolesFieldNumber = 25;
  const ::google::protobuf::Empty& magneto_far_enough_from_earth_poles() const;
  ::google::protobuf::Empty* release_magneto_far_enough_from_earth_poles();
  ::google::protobuf::Empty* mutable_magneto_far_enough_from_earth_poles();
  void set_allocated_magneto_far_enough_from_earth_poles(::google::protobuf::Empty* magneto_far_enough_from_earth_poles);

  // .google.protobuf.Empty magneto_too_close_to_earth_poles = 26;
  bool has_magneto_too_close_to_earth_poles() const;
  void clear_magneto_too_close_to_earth_poles();
  static const int kMagnetoTooCloseToEarthPolesFieldNumber = 26;
  const ::google::protobuf::Empty& magneto_too_close_to_earth_poles() const;
  ::google::protobuf::Empty* release_magneto_too_close_to_earth_poles();
  ::google::protobuf::Empty* mutable_magneto_too_close_to_earth_poles();
  void set_allocated_magneto_too_close_to_earth_poles(::google::protobuf::Empty* magneto_too_close_to_earth_poles);

  // .google.protobuf.Empty magnetic_interference_detected = 27;
  bool has_magnetic_interference_detected() const;
  void clear_magnetic_interference_detected();
  static const int kMagneticInterferenceDetectedFieldNumber = 27;
  const ::google::protobuf::Empty& magnetic_interference_detected() const;
  ::google::protobuf::Empty* release_magnetic_interference_detected();
  ::google::protobuf::Empty* mutable_magnetic_interference_detected();
  void set_allocated_magnetic_interference_detected(::google::protobuf::Empty* magnetic_interference_detected);

  // .google.protobuf.Empty no_magnetic_interference = 28;
  bool has_no_magnetic_interference() const;
  void clear_no_magnetic_interference();
  static const int kNoMagneticInterferenceFieldNumber = 28;
  const ::google::protobuf::Empty& no_magnetic_interference() const;
  ::google::protobuf::Empty* release_no_magnetic_interference();
  ::google::protobuf::Empty* mutable_no_magnetic_interference();
  void set_allocated_no_magnetic_interference(::google::protobuf::Empty* no_magnetic_interference);

  // .google.protobuf.Empty freefall_not_detected = 29;
  bool has_freefall_not_detected() const;
  void clear_freefall_not_detected();
  static const int kFreefallNotDetectedFieldNumber = 29;
  const ::google::protobuf::Empty& freefall_not_detected() const;
  ::google::protobuf::Empty* release_freefall_not_detected();
  ::google::protobuf::Empty* mutable_freefall_not_detected();
  void set_allocated_freefall_not_detected(::google::protobuf::Empty* freefall_not_detected);

  // .google.protobuf.Empty motors_started = 30;
  bool has_motors_started() const;
  void clear_motors_started();
  static const int kMotorsStartedFieldNumber = 30;
  const ::google::protobuf::Empty& motors_started() const;
  ::google::protobuf::Empty* release_motors_started();
  ::google::protobuf::Empty* mutable_motors_started();
  void set_allocated_motors_started(::google::protobuf::Empty* motors_started);

  // .google.protobuf.Empty motors_start_failure = 31;
  bool has_motors_start_failure() const;
  void clear_motors_start_failure();
  static const int kMotorsStartFailureFieldNumber = 31;
  const ::google::protobuf::Empty& motors_start_failure() const;
  ::google::protobuf::Empty* release_motors_start_failure();
  ::google::protobuf::Empty* mutable_motors_start_failure();
  void set_allocated_motors_start_failure(::google::protobuf::Empty* motors_start_failure);

  // .google.protobuf.Empty motors_stopped = 32;
  bool has_motors_stopped() const;
  void clear_motors_stopped();
  static const int kMotorsStoppedFieldNumber = 32;
  const ::google::protobuf::Empty& motors_stopped() const;
  ::google::protobuf::Empty* release_motors_stopped();
  ::google::protobuf::Empty* mutable_motors_stopped();
  void set_allocated_motors_stopped(::google::protobuf::Empty* motors_stopped);

  // .google.protobuf.Empty motors_cutout = 33;
  bool has_motors_cutout() const;
  void clear_motors_cutout();
  static const int kMotorsCutoutFieldNumber = 33;
  const ::google::protobuf::Empty& motors_cutout() const;
  ::google::protobuf::Empty* release_motors_cutout();
  ::google::protobuf::Empty* mutable_motors_cutout();
  void set_allocated_motors_cutout(::google::protobuf::Empty* motors_cutout);

  // .google.protobuf.Empty motors_ramping_done = 34;
  bool has_motors_ramping_done() const;
  void clear_motors_ramping_done();
  static const int kMotorsRampingDoneFieldNumber = 34;
  const ::google::protobuf::Empty& motors_ramping_done() const;
  ::google::protobuf::Empty* release_motors_ramping_done();
  ::google::protobuf::Empty* mutable_motors_ramping_done();
  void set_allocated_motors_ramping_done(::google::protobuf::Empty* motors_ramping_done);

  // .DroneController.Messages.MotorsErrorsChanged motors_errors = 35;
  bool has_motors_errors() const;
  void clear_motors_errors();
  static const int kMotorsErrorsFieldNumber = 35;
  const ::DroneController::Messages::MotorsErrorsChanged& motors_errors() const;
  ::DroneController::Messages::MotorsErrorsChanged* release_motors_errors();
  ::DroneController::Messages::MotorsErrorsChanged* mutable_motors_errors();
  void set_allocated_motors_errors(::DroneController::Messages::MotorsErrorsChanged* motors_errors);

  // .DroneController.Messages.MotorsVersion motors_version = 36;
  bool has_motors_version() const;
  void clear_motors_version();
  static const int kMotorsVersionFieldNumber = 36;
  const ::DroneController::Messages::MotorsVersion& motors_version() const;
  ::DroneController::Messages::MotorsVersion* release_motors_version();
  ::DroneController::Messages::MotorsVersion* mutable_motors_version();
  void set_allocated_motors_version(::DroneController::Messages::MotorsVersion* motors_version);

  // .DroneController.Messages.MotorsFlightInfo motors_flight_info = 37;
  bool has_motors_flight_info() const;
  void clear_motors_flight_info();
  static const int kMotorsFlightInfoFieldNumber = 37;
  const ::DroneController::Messages::MotorsFlightInfo& motors_flight_info() const;
  ::DroneController::Messages::MotorsFlightInfo* release_motors_flight_info();
  ::DroneController::Messages::MotorsFlightInfo* mutable_motors_flight_info();
  void set_allocated_motors_flight_info(::DroneController::Messages::MotorsFlightInfo* motors_flight_info);

  // .DroneController.Messages.TargetReached target_reached = 40;
  bool has_target_reached() const;
  void clear_target_reached();
  static const int kTargetReachedFieldNumber = 40;
  const ::DroneController::Messages::TargetReached& target_reached() const;
  ::DroneController::Messages::TargetReached* release_target_reached();
  ::DroneController::Messages::TargetReached* mutable_target_reached();
  void set_allocated_target_reached(::DroneController::Messages::TargetReached* target_reached);

  // .ColibryLite.Messages.EventDetectionState.Enum hand_takeoff_low_angle = 41;
  private:
  bool has_hand_takeoff_low_angle() const;
  public:
  void clear_hand_takeoff_low_angle();
  static const int kHandTakeoffLowAngleFieldNumber = 41;
  ::ColibryLite::Messages::EventDetectionState::Enum hand_takeoff_low_angle() const;
  void set_hand_takeoff_low_angle(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum hand_takeoff_low_vertical_speed_error = 42;
  private:
  bool has_hand_takeoff_low_vertical_speed_error() const;
  public:
  void clear_hand_takeoff_low_vertical_speed_error();
  static const int kHandTakeoffLowVerticalSpeedErrorFieldNumber = 42;
  ::ColibryLite::Messages::EventDetectionState::Enum hand_takeoff_low_vertical_speed_error() const;
  void set_hand_takeoff_low_vertical_speed_error(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .ColibryLite.Messages.EventDetectionState.Enum hand_takeoff_low_angular_velocity = 43;
  private:
  bool has_hand_takeoff_low_angular_velocity() const;
  public:
  void clear_hand_takeoff_low_angular_velocity();
  static const int kHandTakeoffLowAngularVelocityFieldNumber = 43;
  ::ColibryLite::Messages::EventDetectionState::Enum hand_takeoff_low_angular_velocity() const;
  void set_hand_takeoff_low_angular_velocity(::ColibryLite::Messages::EventDetectionState::Enum value);

  // .google.protobuf.Empty linear_velocity_reliable = 44;
  bool has_linear_velocity_reliable() const;
  void clear_linear_velocity_reliable();
  static const int kLinearVelocityReliableFieldNumber = 44;
  const ::google::protobuf::Empty& linear_velocity_reliable() const;
  ::google::protobuf::Empty* release_linear_velocity_reliable();
  ::google::protobuf::Empty* mutable_linear_velocity_reliable();
  void set_allocated_linear_velocity_reliable(::google::protobuf::Empty* linear_velocity_reliable);

  // .google.protobuf.Empty linear_velocity_unreliable = 45;
  bool has_linear_velocity_unreliable() const;
  void clear_linear_velocity_unreliable();
  static const int kLinearVelocityUnreliableFieldNumber = 45;
  const ::google::protobuf::Empty& linear_velocity_unreliable() const;
  ::google::protobuf::Empty* release_linear_velocity_unreliable();
  ::google::protobuf::Empty* mutable_linear_velocity_unreliable();
  void set_allocated_linear_velocity_unreliable(::google::protobuf::Empty* linear_velocity_unreliable);

  // .google.protobuf.Empty ground_distance_defective = 46;
  bool has_ground_distance_defective() const;
  void clear_ground_distance_defective();
  static const int kGroundDistanceDefectiveFieldNumber = 46;
  const ::google::protobuf::Empty& ground_distance_defective() const;
  ::google::protobuf::Empty* release_ground_distance_defective();
  ::google::protobuf::Empty* mutable_ground_distance_defective();
  void set_allocated_ground_distance_defective(::google::protobuf::Empty* ground_distance_defective);

  // .google.protobuf.Empty ground_distance_functional = 47;
  bool has_ground_distance_functional() const;
  void clear_ground_distance_functional();
  static const int kGroundDistanceFunctionalFieldNumber = 47;
  const ::google::protobuf::Empty& ground_distance_functional() const;
  ::google::protobuf::Empty* release_ground_distance_functional();
  ::google::protobuf::Empty* mutable_ground_distance_functional();
  void set_allocated_ground_distance_functional(::google::protobuf::Empty* ground_distance_functional);

  // .google.protobuf.Empty thrust_for_angle_reached = 48;
  bool has_thrust_for_angle_reached() const;
  void clear_thrust_for_angle_reached();
  static const int kThrustForAngleReachedFieldNumber = 48;
  const ::google::protobuf::Empty& thrust_for_angle_reached() const;
  ::google::protobuf::Empty* release_thrust_for_angle_reached();
  ::google::protobuf::Empty* mutable_thrust_for_angle_reached();
  void set_allocated_thrust_for_angle_reached(::google::protobuf::Empty* thrust_for_angle_reached);

  // .google.protobuf.Empty gps_navigation_ready = 50;
  bool has_gps_navigation_ready() const;
  void clear_gps_navigation_ready();
  static const int kGpsNavigationReadyFieldNumber = 50;
  const ::google::protobuf::Empty& gps_navigation_ready() const;
  ::google::protobuf::Empty* release_gps_navigation_ready();
  ::google::protobuf::Empty* mutable_gps_navigation_ready();
  void set_allocated_gps_navigation_ready(::google::protobuf::Empty* gps_navigation_ready);

  // .google.protobuf.Empty gps_navigation_unavailable = 51;
  bool has_gps_navigation_unavailable() const;
  void clear_gps_navigation_unavailable();
  static const int kGpsNavigationUnavailableFieldNumber = 51;
  const ::google::protobuf::Empty& gps_navigation_unavailable() const;
  ::google::protobuf::Empty* release_gps_navigation_unavailable();
  ::google::protobuf::Empty* mutable_gps_navigation_unavailable();
  void set_allocated_gps_navigation_unavailable(::google::protobuf::Empty* gps_navigation_unavailable);

  // .google.protobuf.Empty gps_sensor_ok = 54;
  bool has_gps_sensor_ok() const;
  void clear_gps_sensor_ok();
  static const int kGpsSensorOkFieldNumber = 54;
  const ::google::protobuf::Empty& gps_sensor_ok() const;
  ::google::protobuf::Empty* release_gps_sensor_ok();
  ::google::protobuf::Empty* mutable_gps_sensor_ok();
  void set_allocated_gps_sensor_ok(::google::protobuf::Empty* gps_sensor_ok);

  // .google.protobuf.Empty gps_sensor_ko = 55;
  bool has_gps_sensor_ko() const;
  void clear_gps_sensor_ko();
  static const int kGpsSensorKoFieldNumber = 55;
  const ::google::protobuf::Empty& gps_sensor_ko() const;
  ::google::protobuf::Empty* release_gps_sensor_ko();
  ::google::protobuf::Empty* mutable_gps_sensor_ko();
  void set_allocated_gps_sensor_ko(::google::protobuf::Empty* gps_sensor_ko);

  // .google.protobuf.Empty heading_locked_ok = 56;
  bool has_heading_locked_ok() const;
  void clear_heading_locked_ok();
  static const int kHeadingLockedOkFieldNumber = 56;
  const ::google::protobuf::Empty& heading_locked_ok() const;
  ::google::protobuf::Empty* release_heading_locked_ok();
  ::google::protobuf::Empty* mutable_heading_locked_ok();
  void set_allocated_heading_locked_ok(::google::protobuf::Empty* heading_locked_ok);

  // .google.protobuf.Empty heading_locked_ko = 57;
  bool has_heading_locked_ko() const;
  void clear_heading_locked_ko();
  static const int kHeadingLockedKoFieldNumber = 57;
  const ::google::protobuf::Empty& heading_locked_ko() const;
  ::google::protobuf::Empty* release_heading_locked_ko();
  ::google::protobuf::Empty* mutable_heading_locked_ko();
  void set_allocated_heading_locked_ko(::google::protobuf::Empty* heading_locked_ko);

  // uint32 gps_satellites = 52;
  private:
  bool has_gps_satellites() const;
  public:
  void clear_gps_satellites();
  static const int kGpsSatellitesFieldNumber = 52;
  ::google::protobuf::uint32 gps_satellites() const;
  void set_gps_satellites(::google::protobuf::uint32 value);

  // .google.protobuf.Empty vision_navigation_ready = 58;
  bool has_vision_navigation_ready() const;
  void clear_vision_navigation_ready();
  static const int kVisionNavigationReadyFieldNumber = 58;
  const ::google::protobuf::Empty& vision_navigation_ready() const;
  ::google::protobuf::Empty* release_vision_navigation_ready();
  ::google::protobuf::Empty* mutable_vision_navigation_ready();
  void set_allocated_vision_navigation_ready(::google::protobuf::Empty* vision_navigation_ready);

  // .google.protobuf.Empty vision_navigation_unavailable = 59;
  bool has_vision_navigation_unavailable() const;
  void clear_vision_navigation_unavailable();
  static const int kVisionNavigationUnavailableFieldNumber = 59;
  const ::google::protobuf::Empty& vision_navigation_unavailable() const;
  ::google::protobuf::Empty* release_vision_navigation_unavailable();
  ::google::protobuf::Empty* mutable_vision_navigation_unavailable();
  void set_allocated_vision_navigation_unavailable(::google::protobuf::Empty* vision_navigation_unavailable);

  // .ColibryLite.Messages.WindStatus.Enum wind_status_changed = 70;
  private:
  bool has_wind_status_changed() const;
  public:
  void clear_wind_status_changed();
  static const int kWindStatusChangedFieldNumber = 70;
  ::ColibryLite::Messages::WindStatus::Enum wind_status_changed() const;
  void set_wind_status_changed(::ColibryLite::Messages::WindStatus::Enum value);

  // .ColibryLite.Messages.DefectiveMotorId.Enum defective_motor_id_changed = 71;
  private:
  bool has_defective_motor_id_changed() const;
  public:
  void clear_defective_motor_id_changed();
  static const int kDefectiveMotorIdChangedFieldNumber = 71;
  ::ColibryLite::Messages::DefectiveMotorId::Enum defective_motor_id_changed() const;
  void set_defective_motor_id_changed(::ColibryLite::Messages::DefectiveMotorId::Enum value);

  // .ColibryLite.Messages.DefectiveMotorFailureType.Enum defective_motor_failure_type_changed = 72;
  private:
  bool has_defective_motor_failure_type_changed() const;
  public:
  void clear_defective_motor_failure_type_changed();
  static const int kDefectiveMotorFailureTypeChangedFieldNumber = 72;
  ::ColibryLite::Messages::DefectiveMotorFailureType::Enum defective_motor_failure_type_changed() const;
  void set_defective_motor_failure_type_changed(::ColibryLite::Messages::DefectiveMotorFailureType::Enum value);

  // .ColibryLite.Messages.ThreeLevelStatus.Enum vibration_level_changed = 73;
  private:
  bool has_vibration_level_changed() const;
  public:
  void clear_vibration_level_changed();
  static const int kVibrationLevelChangedFieldNumber = 73;
  ::ColibryLite::Messages::ThreeLevelStatus::Enum vibration_level_changed() const;
  void set_vibration_level_changed(::ColibryLite::Messages::ThreeLevelStatus::Enum value);

  // .ColibryLite.Messages.ThreeLevelStatus.Enum propeller_icing_level_changed = 74;
  private:
  bool has_propeller_icing_level_changed() const;
  public:
  void clear_propeller_icing_level_changed();
  static const int kPropellerIcingLevelChangedFieldNumber = 74;
  ::ColibryLite::Messages::ThreeLevelStatus::Enum propeller_icing_level_changed() const;
  void set_propeller_icing_level_changed(::ColibryLite::Messages::ThreeLevelStatus::Enum value);

  // .google.protobuf.Empty magneto_not_calibrated = 80;
  bool has_magneto_not_calibrated() const;
  void clear_magneto_not_calibrated();
  static const int kMagnetoNotCalibratedFieldNumber = 80;
  const ::google::protobuf::Empty& magneto_not_calibrated() const;
  ::google::protobuf::Empty* release_magneto_not_calibrated();
  ::google::protobuf::Empty* mutable_magneto_not_calibrated();
  void set_allocated_magneto_not_calibrated(::google::protobuf::Empty* magneto_not_calibrated);

  // .google.protobuf.Empty magneto_calibration_x_done = 81;
  bool has_magneto_calibration_x_done() const;
  void clear_magneto_calibration_x_done();
  static const int kMagnetoCalibrationXDoneFieldNumber = 81;
  const ::google::protobuf::Empty& magneto_calibration_x_done() const;
  ::google::protobuf::Empty* release_magneto_calibration_x_done();
  ::google::protobuf::Empty* mutable_magneto_calibration_x_done();
  void set_allocated_magneto_calibration_x_done(::google::protobuf::Empty* magneto_calibration_x_done);

  // .google.protobuf.Empty magneto_calibration_y_done = 82;
  bool has_magneto_calibration_y_done() const;
  void clear_magneto_calibration_y_done();
  static const int kMagnetoCalibrationYDoneFieldNumber = 82;
  const ::google::protobuf::Empty& magneto_calibration_y_done() const;
  ::google::protobuf::Empty* release_magneto_calibration_y_done();
  ::google::protobuf::Empty* mutable_magneto_calibration_y_done();
  void set_allocated_magneto_calibration_y_done(::google::protobuf::Empty* magneto_calibration_y_done);

  // .google.protobuf.Empty magneto_calibration_z_done = 83;
  bool has_magneto_calibration_z_done() const;
  void clear_magneto_calibration_z_done();
  static const int kMagnetoCalibrationZDoneFieldNumber = 83;
  const ::google::protobuf::Empty& magneto_calibration_z_done() const;
  ::google::protobuf::Empty* release_magneto_calibration_z_done();
  ::google::protobuf::Empty* mutable_magneto_calibration_z_done();
  void set_allocated_magneto_calibration_z_done(::google::protobuf::Empty* magneto_calibration_z_done);

  // .google.protobuf.Empty magneto_calibration_aborted = 84;
  bool has_magneto_calibration_aborted() const;
  void clear_magneto_calibration_aborted();
  static const int kMagnetoCalibrationAbortedFieldNumber = 84;
  const ::google::protobuf::Empty& magneto_calibration_aborted() const;
  ::google::protobuf::Empty* release_magneto_calibration_aborted();
  ::google::protobuf::Empty* mutable_magneto_calibration_aborted();
  void set_allocated_magneto_calibration_aborted(::google::protobuf::Empty* magneto_calibration_aborted);

  // .google.protobuf.Empty magneto_calibration_failed = 85;
  bool has_magneto_calibration_failed() const;
  void clear_magneto_calibration_failed();
  static const int kMagnetoCalibrationFailedFieldNumber = 85;
  const ::google::protobuf::Empty& magneto_calibration_failed() const;
  ::google::protobuf::Empty* release_magneto_calibration_failed();
  ::google::protobuf::Empty* mutable_magneto_calibration_failed();
  void set_allocated_magneto_calibration_failed(::google::protobuf::Empty* magneto_calibration_failed);

  // .google.protobuf.Empty magneto_calibration_done = 86;
  bool has_magneto_calibration_done() const;
  void clear_magneto_calibration_done();
  static const int kMagnetoCalibrationDoneFieldNumber = 86;
  const ::google::protobuf::Empty& magneto_calibration_done() const;
  ::google::protobuf::Empty* release_magneto_calibration_done();
  ::google::protobuf::Empty* mutable_magneto_calibration_done();
  void set_allocated_magneto_calibration_done(::google::protobuf::Empty* magneto_calibration_done);

  // .google.protobuf.Empty magneto_calibration_required = 87;
  bool has_magneto_calibration_required() const;
  void clear_magneto_calibration_required();
  static const int kMagnetoCalibrationRequiredFieldNumber = 87;
  const ::google::protobuf::Empty& magneto_calibration_required() const;
  ::google::protobuf::Empty* release_magneto_calibration_required();
  ::google::protobuf::Empty* mutable_magneto_calibration_required();
  void set_allocated_magneto_calibration_required(::google::protobuf::Empty* magneto_calibration_required);

  // .google.protobuf.Empty magneto_calibration_advised = 88;
  bool has_magneto_calibration_advised() const;
  void clear_magneto_calibration_advised();
  static const int kMagnetoCalibrationAdvisedFieldNumber = 88;
  const ::google::protobuf::Empty& magneto_calibration_advised() const;
  ::google::protobuf::Empty* release_magneto_calibration_advised();
  ::google::protobuf::Empty* mutable_magneto_calibration_advised();
  void set_allocated_magneto_calibration_advised(::google::protobuf::Empty* magneto_calibration_advised);

  // .google.protobuf.Empty min_altitude_constrained = 90;
  bool has_min_altitude_constrained() const;
  void clear_min_altitude_constrained();
  static const int kMinAltitudeConstrainedFieldNumber = 90;
  const ::google::protobuf::Empty& min_altitude_constrained() const;
  ::google::protobuf::Empty* release_min_altitude_constrained();
  ::google::protobuf::Empty* mutable_min_altitude_constrained();
  void set_allocated_min_altitude_constrained(::google::protobuf::Empty* min_altitude_constrained);

  // .google.protobuf.Empty min_altitude_not_constrained = 91;
  bool has_min_altitude_not_constrained() const;
  void clear_min_altitude_not_constrained();
  static const int kMinAltitudeNotConstrainedFieldNumber = 91;
  const ::google::protobuf::Empty& min_altitude_not_constrained() const;
  ::google::protobuf::Empty* release_min_altitude_not_constrained();
  ::google::protobuf::Empty* mutable_min_altitude_not_constrained();
  void set_allocated_min_altitude_not_constrained(::google::protobuf::Empty* min_altitude_not_constrained);

  // uint32 defective_sensors_state_changed = 110;
  private:
  bool has_defective_sensors_state_changed() const;
  public:
  void clear_defective_sensors_state_changed();
  static const int kDefectiveSensorsStateChangedFieldNumber = 110;
  ::google::protobuf::uint32 defective_sensors_state_changed() const;
  void set_defective_sensors_state_changed(::google::protobuf::uint32 value);

  // .DroneController.Messages.BatteryState battery_state_changed = 120;
  bool has_battery_state_changed() const;
  void clear_battery_state_changed();
  static const int kBatteryStateChangedFieldNumber = 120;
  const ::DroneController::Messages::BatteryState& battery_state_changed() const;
  ::DroneController::Messages::BatteryState* release_battery_state_changed();
  ::DroneController::Messages::BatteryState* mutable_battery_state_changed();
  void set_allocated_battery_state_changed(::DroneController::Messages::BatteryState* battery_state_changed);

  // .DroneController.Messages.BatteryRole battery_role_changed = 121;
  bool has_battery_role_changed() const;
  void clear_battery_role_changed();
  static const int kBatteryRoleChangedFieldNumber = 121;
  const ::DroneController::Messages::BatteryRole& battery_role_changed() const;
  ::DroneController::Messages::BatteryRole* release_battery_role_changed();
  ::DroneController::Messages::BatteryRole* mutable_battery_role_changed();
  void set_allocated_battery_role_changed(::DroneController::Messages::BatteryRole* battery_role_changed);

  // .DroneController.Messages.BatteryAlert.Enum battery_alert_too_hot = 122;
  private:
  bool has_battery_alert_too_hot() const;
  public:
  void clear_battery_alert_too_hot();
  static const int kBatteryAlertTooHotFieldNumber = 122;
  ::DroneController::Messages::BatteryAlert::Enum battery_alert_too_hot() const;
  void set_battery_alert_too_hot(::DroneController::Messages::BatteryAlert::Enum value);

  // .DroneController.Messages.BatteryAlert.Enum battery_alert_too_cold = 123;
  private:
  bool has_battery_alert_too_cold() const;
  public:
  void clear_battery_alert_too_cold();
  static const int kBatteryAlertTooColdFieldNumber = 123;
  ::DroneController::Messages::BatteryAlert::Enum battery_alert_too_cold() const;
  void set_battery_alert_too_cold(::DroneController::Messages::BatteryAlert::Enum value);

  // .DroneController.Messages.BatteryHealth battery_health = 124;
  bool has_battery_health() const;
  void clear_battery_health();
  static const int kBatteryHealthFieldNumber = 124;
  const ::DroneController::Messages::BatteryHealth& battery_health() const;
  ::DroneController::Messages::BatteryHealth* release_battery_health();
  ::DroneController::Messages::BatteryHealth* mutable_battery_health();
  void set_allocated_battery_health(::DroneController::Messages::BatteryHealth* battery_health);

  // .DroneController.Messages.Tick tick = 130;
  bool has_tick() const;
  void clear_tick();
  static const int kTickFieldNumber = 130;
  const ::DroneController::Messages::Tick& tick() const;
  ::DroneController::Messages::Tick* release_tick();
  ::DroneController::Messages::Tick* mutable_tick();
  void set_allocated_tick(::DroneController::Messages::Tick* tick);

  // .google.protobuf.Empty motor_down_control_ready = 140;
  bool has_motor_down_control_ready() const;
  void clear_motor_down_control_ready();
  static const int kMotorDownControlReadyFieldNumber = 140;
  const ::google::protobuf::Empty& motor_down_control_ready() const;
  ::google::protobuf::Empty* release_motor_down_control_ready();
  ::google::protobuf::Empty* mutable_motor_down_control_ready();
  void set_allocated_motor_down_control_ready(::google::protobuf::Empty* motor_down_control_ready);

  // .google.protobuf.Empty motor_down_control_unavailable = 141;
  bool has_motor_down_control_unavailable() const;
  void clear_motor_down_control_unavailable();
  static const int kMotorDownControlUnavailableFieldNumber = 141;
  const ::google::protobuf::Empty& motor_down_control_unavailable() const;
  ::google::protobuf::Empty* release_motor_down_control_unavailable();
  ::google::protobuf::Empty* mutable_motor_down_control_unavailable();
  void set_allocated_motor_down_control_unavailable(::google::protobuf::Empty* motor_down_control_unavailable);

  // .google.protobuf.Empty single_stall_available = 142;
  bool has_single_stall_available() const;
  void clear_single_stall_available();
  static const int kSingleStallAvailableFieldNumber = 142;
  const ::google::protobuf::Empty& single_stall_available() const;
  ::google::protobuf::Empty* release_single_stall_available();
  ::google::protobuf::Empty* mutable_single_stall_available();
  void set_allocated_single_stall_available(::google::protobuf::Empty* single_stall_available);

  // .google.protobuf.Empty single_stall_unavailable = 143;
  bool has_single_stall_unavailable() const;
  void clear_single_stall_unavailable();
  static const int kSingleStallUnavailableFieldNumber = 143;
  const ::google::protobuf::Empty& single_stall_unavailable() const;
  ::google::protobuf::Empty* release_single_stall_unavailable();
  ::google::protobuf::Empty* mutable_single_stall_unavailable();
  void set_allocated_single_stall_unavailable(::google::protobuf::Empty* single_stall_unavailable);

  // .DroneController.Messages.InitStatus init_ok = 1000;
  bool has_init_ok() const;
  void clear_init_ok();
  static const int kInitOkFieldNumber = 1000;
  const ::DroneController::Messages::InitStatus& init_ok() const;
  ::DroneController::Messages::InitStatus* release_init_ok();
  ::DroneController::Messages::InitStatus* mutable_init_ok();
  void set_allocated_init_ok(::DroneController::Messages::InitStatus* init_ok);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:DroneController.Messages.Event)
 private:
  class HasBitSetters;
  void set_has_motion_state_changed();
  void set_has_moving_ground_state_changed();
  void set_has_freefall_detected();
  void set_has_landed_detected();
  void set_has_thrust_ramp_done();
  void set_has_horizontal_steady();
  void set_has_vertical_steady();
  void set_has_yaw_steady();
  void set_has_full_steady_ok();
  void set_has_full_steady_ko();
  void set_has_too_much_angle_detected();
  void set_has_too_much_angle_detected_at_low_altitude();
  void set_has_nominal_angle_detected();
  void set_has_nominal_angle_detected_at_low_altitude();
  void set_has_flyaway_detected();
  void set_has_magneto_far_enough_from_earth_poles();
  void set_has_magneto_too_close_to_earth_poles();
  void set_has_magnetic_interference_detected();
  void set_has_no_magnetic_interference();
  void set_has_freefall_not_detected();
  void set_has_motors_started();
  void set_has_motors_start_failure();
  void set_has_motors_stopped();
  void set_has_motors_cutout();
  void set_has_motors_ramping_done();
  void set_has_motors_errors();
  void set_has_motors_version();
  void set_has_motors_flight_info();
  void set_has_target_reached();
  void set_has_hand_takeoff_low_angle();
  void set_has_hand_takeoff_low_vertical_speed_error();
  void set_has_hand_takeoff_low_angular_velocity();
  void set_has_linear_velocity_reliable();
  void set_has_linear_velocity_unreliable();
  void set_has_ground_distance_defective();
  void set_has_ground_distance_functional();
  void set_has_thrust_for_angle_reached();
  void set_has_gps_navigation_ready();
  void set_has_gps_navigation_unavailable();
  void set_has_gps_sensor_ok();
  void set_has_gps_sensor_ko();
  void set_has_heading_locked_ok();
  void set_has_heading_locked_ko();
  void set_has_gps_satellites();
  void set_has_vision_navigation_ready();
  void set_has_vision_navigation_unavailable();
  void set_has_wind_status_changed();
  void set_has_defective_motor_id_changed();
  void set_has_defective_motor_failure_type_changed();
  void set_has_vibration_level_changed();
  void set_has_propeller_icing_level_changed();
  void set_has_magneto_not_calibrated();
  void set_has_magneto_calibration_x_done();
  void set_has_magneto_calibration_y_done();
  void set_has_magneto_calibration_z_done();
  void set_has_magneto_calibration_aborted();
  void set_has_magneto_calibration_failed();
  void set_has_magneto_calibration_done();
  void set_has_magneto_calibration_required();
  void set_has_magneto_calibration_advised();
  void set_has_min_altitude_constrained();
  void set_has_min_altitude_not_constrained();
  void set_has_defective_sensors_state_changed();
  void set_has_battery_state_changed();
  void set_has_battery_role_changed();
  void set_has_battery_alert_too_hot();
  void set_has_battery_alert_too_cold();
  void set_has_battery_health();
  void set_has_tick();
  void set_has_motor_down_control_ready();
  void set_has_motor_down_control_unavailable();
  void set_has_single_stall_available();
  void set_has_single_stall_unavailable();
  void set_has_init_ok();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    int motion_state_changed_;
    int moving_ground_state_changed_;
    ::google::protobuf::Empty* freefall_detected_;
    ::google::protobuf::Empty* landed_detected_;
    ::google::protobuf::Empty* thrust_ramp_done_;
    int horizontal_steady_;
    int vertical_steady_;
    int yaw_steady_;
    ::google::protobuf::Empty* full_steady_ok_;
    ::google::protobuf::Empty* full_steady_ko_;
    ::google::protobuf::Empty* too_much_angle_detected_;
    ::google::protobuf::Empty* too_much_angle_detected_at_low_altitude_;
    ::google::protobuf::Empty* nominal_angle_detected_;
    ::google::protobuf::Empty* nominal_angle_detected_at_low_altitude_;
    ::google::protobuf::Empty* flyaway_detected_;
    ::google::protobuf::Empty* magneto_far_enough_from_earth_poles_;
    ::google::protobuf::Empty* magneto_too_close_to_earth_poles_;
    ::google::protobuf::Empty* magnetic_interference_detected_;
    ::google::protobuf::Empty* no_magnetic_interference_;
    ::google::protobuf::Empty* freefall_not_detected_;
    ::google::protobuf::Empty* motors_started_;
    ::google::protobuf::Empty* motors_start_failure_;
    ::google::protobuf::Empty* motors_stopped_;
    ::google::protobuf::Empty* motors_cutout_;
    ::google::protobuf::Empty* motors_ramping_done_;
    ::DroneController::Messages::MotorsErrorsChanged* motors_errors_;
    ::DroneController::Messages::MotorsVersion* motors_version_;
    ::DroneController::Messages::MotorsFlightInfo* motors_flight_info_;
    ::DroneController::Messages::TargetReached* target_reached_;
    int hand_takeoff_low_angle_;
    int hand_takeoff_low_vertical_speed_error_;
    int hand_takeoff_low_angular_velocity_;
    ::google::protobuf::Empty* linear_velocity_reliable_;
    ::google::protobuf::Empty* linear_velocity_unreliable_;
    ::google::protobuf::Empty* ground_distance_defective_;
    ::google::protobuf::Empty* ground_distance_functional_;
    ::google::protobuf::Empty* thrust_for_angle_reached_;
    ::google::protobuf::Empty* gps_navigation_ready_;
    ::google::protobuf::Empty* gps_navigation_unavailable_;
    ::google::protobuf::Empty* gps_sensor_ok_;
    ::google::protobuf::Empty* gps_sensor_ko_;
    ::google::protobuf::Empty* heading_locked_ok_;
    ::google::protobuf::Empty* heading_locked_ko_;
    ::google::protobuf::uint32 gps_satellites_;
    ::google::protobuf::Empty* vision_navigation_ready_;
    ::google::protobuf::Empty* vision_navigation_unavailable_;
    int wind_status_changed_;
    int defective_motor_id_changed_;
    int defective_motor_failure_type_changed_;
    int vibration_level_changed_;
    int propeller_icing_level_changed_;
    ::google::protobuf::Empty* magneto_not_calibrated_;
    ::google::protobuf::Empty* magneto_calibration_x_done_;
    ::google::protobuf::Empty* magneto_calibration_y_done_;
    ::google::protobuf::Empty* magneto_calibration_z_done_;
    ::google::protobuf::Empty* magneto_calibration_aborted_;
    ::google::protobuf::Empty* magneto_calibration_failed_;
    ::google::protobuf::Empty* magneto_calibration_done_;
    ::google::protobuf::Empty* magneto_calibration_required_;
    ::google::protobuf::Empty* magneto_calibration_advised_;
    ::google::protobuf::Empty* min_altitude_constrained_;
    ::google::protobuf::Empty* min_altitude_not_constrained_;
    ::google::protobuf::uint32 defective_sensors_state_changed_;
    ::DroneController::Messages::BatteryState* battery_state_changed_;
    ::DroneController::Messages::BatteryRole* battery_role_changed_;
    int battery_alert_too_hot_;
    int battery_alert_too_cold_;
    ::DroneController::Messages::BatteryHealth* battery_health_;
    ::DroneController::Messages::Tick* tick_;
    ::google::protobuf::Empty* motor_down_control_ready_;
    ::google::protobuf::Empty* motor_down_control_unavailable_;
    ::google::protobuf::Empty* single_stall_available_;
    ::google::protobuf::Empty* single_stall_unavailable_;
    ::DroneController::Messages::InitStatus* init_ok_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_drone_5fcontroller_2fdrone_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HorizontalAngles

// .ColibryLite.Messages.TiltTrajectoryPoint ref = 1;
inline bool HorizontalAngles::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::TiltTrajectoryPoint& HorizontalAngles::ref() const {
  const ::ColibryLite::Messages::TiltTrajectoryPoint* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalAngles.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::TiltTrajectoryPoint*>(
      &::ColibryLite::Messages::_TiltTrajectoryPoint_default_instance_);
}
inline ::ColibryLite::Messages::TiltTrajectoryPoint* HorizontalAngles::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalAngles.ref)
  
  ::ColibryLite::Messages::TiltTrajectoryPoint* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::TiltTrajectoryPoint* HorizontalAngles::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::TiltTrajectoryPoint>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalAngles.ref)
  return ref_;
}
inline void HorizontalAngles::set_allocated_ref(::ColibryLite::Messages::TiltTrajectoryPoint* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.HorizontalAngles.ref)
}

// .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
inline void HorizontalAngles::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::HorizontalControlConfig::Enum HorizontalAngles::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalAngles.config)
  return static_cast< ::ColibryLite::Messages::HorizontalControlConfig::Enum >(config_);
}
inline void HorizontalAngles::set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalAngles.config)
}

// bool enable_wind_compensation = 3;
inline void HorizontalAngles::clear_enable_wind_compensation() {
  enable_wind_compensation_ = false;
}
inline bool HorizontalAngles::enable_wind_compensation() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalAngles.enable_wind_compensation)
  return enable_wind_compensation_;
}
inline void HorizontalAngles::set_enable_wind_compensation(bool value) {
  
  enable_wind_compensation_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalAngles.enable_wind_compensation)
}

// bool enable_auto_banked_turn = 4;
inline void HorizontalAngles::clear_enable_auto_banked_turn() {
  enable_auto_banked_turn_ = false;
}
inline bool HorizontalAngles::enable_auto_banked_turn() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalAngles.enable_auto_banked_turn)
  return enable_auto_banked_turn_;
}
inline void HorizontalAngles::set_enable_auto_banked_turn(bool value) {
  
  enable_auto_banked_turn_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalAngles.enable_auto_banked_turn)
}

// -------------------------------------------------------------------

// HorizontalTrajectoryLocal

// .ColibryLite.Messages.HorizontalTrajectoryPoint ref = 1;
inline bool HorizontalTrajectoryLocal::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::HorizontalTrajectoryPoint& HorizontalTrajectoryLocal::ref() const {
  const ::ColibryLite::Messages::HorizontalTrajectoryPoint* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryLocal.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::HorizontalTrajectoryPoint*>(
      &::ColibryLite::Messages::_HorizontalTrajectoryPoint_default_instance_);
}
inline ::ColibryLite::Messages::HorizontalTrajectoryPoint* HorizontalTrajectoryLocal::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalTrajectoryLocal.ref)
  
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::HorizontalTrajectoryPoint* HorizontalTrajectoryLocal::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::HorizontalTrajectoryPoint>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalTrajectoryLocal.ref)
  return ref_;
}
inline void HorizontalTrajectoryLocal::set_allocated_ref(::ColibryLite::Messages::HorizontalTrajectoryPoint* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.HorizontalTrajectoryLocal.ref)
}

// .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
inline void HorizontalTrajectoryLocal::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::HorizontalControlConfig::Enum HorizontalTrajectoryLocal::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryLocal.config)
  return static_cast< ::ColibryLite::Messages::HorizontalControlConfig::Enum >(config_);
}
inline void HorizontalTrajectoryLocal::set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalTrajectoryLocal.config)
}

// .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
inline void HorizontalTrajectoryLocal::clear_reference_propagation_model() {
  reference_propagation_model_ = 0;
}
inline ::ColibryLite::Messages::ReferencePropagationModel::Enum HorizontalTrajectoryLocal::reference_propagation_model() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryLocal.reference_propagation_model)
  return static_cast< ::ColibryLite::Messages::ReferencePropagationModel::Enum >(reference_propagation_model_);
}
inline void HorizontalTrajectoryLocal::set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value) {
  
  reference_propagation_model_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalTrajectoryLocal.reference_propagation_model)
}

// float maximum_horizontal_speed = 4;
inline void HorizontalTrajectoryLocal::clear_maximum_horizontal_speed() {
  maximum_horizontal_speed_ = 0;
}
inline float HorizontalTrajectoryLocal::maximum_horizontal_speed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryLocal.maximum_horizontal_speed)
  return maximum_horizontal_speed_;
}
inline void HorizontalTrajectoryLocal::set_maximum_horizontal_speed(float value) {
  
  maximum_horizontal_speed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalTrajectoryLocal.maximum_horizontal_speed)
}

// -------------------------------------------------------------------

// HorizontalTrajectoryGlobal

// .ColibryLite.Messages.HorizontalTrajectoryPoint ref = 1;
inline bool HorizontalTrajectoryGlobal::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::HorizontalTrajectoryPoint& HorizontalTrajectoryGlobal::ref() const {
  const ::ColibryLite::Messages::HorizontalTrajectoryPoint* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryGlobal.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::HorizontalTrajectoryPoint*>(
      &::ColibryLite::Messages::_HorizontalTrajectoryPoint_default_instance_);
}
inline ::ColibryLite::Messages::HorizontalTrajectoryPoint* HorizontalTrajectoryGlobal::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalTrajectoryGlobal.ref)
  
  ::ColibryLite::Messages::HorizontalTrajectoryPoint* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::HorizontalTrajectoryPoint* HorizontalTrajectoryGlobal::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::HorizontalTrajectoryPoint>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalTrajectoryGlobal.ref)
  return ref_;
}
inline void HorizontalTrajectoryGlobal::set_allocated_ref(::ColibryLite::Messages::HorizontalTrajectoryPoint* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.HorizontalTrajectoryGlobal.ref)
}

// .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
inline void HorizontalTrajectoryGlobal::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::HorizontalControlConfig::Enum HorizontalTrajectoryGlobal::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryGlobal.config)
  return static_cast< ::ColibryLite::Messages::HorizontalControlConfig::Enum >(config_);
}
inline void HorizontalTrajectoryGlobal::set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalTrajectoryGlobal.config)
}

// .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
inline void HorizontalTrajectoryGlobal::clear_reference_propagation_model() {
  reference_propagation_model_ = 0;
}
inline ::ColibryLite::Messages::ReferencePropagationModel::Enum HorizontalTrajectoryGlobal::reference_propagation_model() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryGlobal.reference_propagation_model)
  return static_cast< ::ColibryLite::Messages::ReferencePropagationModel::Enum >(reference_propagation_model_);
}
inline void HorizontalTrajectoryGlobal::set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value) {
  
  reference_propagation_model_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalTrajectoryGlobal.reference_propagation_model)
}

// float maximum_horizontal_speed = 4;
inline void HorizontalTrajectoryGlobal::clear_maximum_horizontal_speed() {
  maximum_horizontal_speed_ = 0;
}
inline float HorizontalTrajectoryGlobal::maximum_horizontal_speed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalTrajectoryGlobal.maximum_horizontal_speed)
  return maximum_horizontal_speed_;
}
inline void HorizontalTrajectoryGlobal::set_maximum_horizontal_speed(float value) {
  
  maximum_horizontal_speed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalTrajectoryGlobal.maximum_horizontal_speed)
}

// -------------------------------------------------------------------

// HorizontalGoToFix

// .ColibryLite.Messages.HorizontalControlConfig.Enum config = 1;
inline void HorizontalGoToFix::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::HorizontalControlConfig::Enum HorizontalGoToFix::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalGoToFix.config)
  return static_cast< ::ColibryLite::Messages::HorizontalControlConfig::Enum >(config_);
}
inline void HorizontalGoToFix::set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalGoToFix.config)
}

// -------------------------------------------------------------------

// HorizontalVelocityTrajectory

// .ColibryLite.Messages.HorizontalVelocityTrajectory ref = 1;
inline bool HorizontalVelocityTrajectory::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::HorizontalVelocityTrajectory& HorizontalVelocityTrajectory::ref() const {
  const ::ColibryLite::Messages::HorizontalVelocityTrajectory* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalVelocityTrajectory.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::HorizontalVelocityTrajectory*>(
      &::ColibryLite::Messages::_HorizontalVelocityTrajectory_default_instance_);
}
inline ::ColibryLite::Messages::HorizontalVelocityTrajectory* HorizontalVelocityTrajectory::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalVelocityTrajectory.ref)
  
  ::ColibryLite::Messages::HorizontalVelocityTrajectory* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::HorizontalVelocityTrajectory* HorizontalVelocityTrajectory::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::HorizontalVelocityTrajectory>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalVelocityTrajectory.ref)
  return ref_;
}
inline void HorizontalVelocityTrajectory::set_allocated_ref(::ColibryLite::Messages::HorizontalVelocityTrajectory* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.HorizontalVelocityTrajectory.ref)
}

// .ColibryLite.Messages.HorizontalControlConfig.Enum config = 2;
inline void HorizontalVelocityTrajectory::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::HorizontalControlConfig::Enum HorizontalVelocityTrajectory::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalVelocityTrajectory.config)
  return static_cast< ::ColibryLite::Messages::HorizontalControlConfig::Enum >(config_);
}
inline void HorizontalVelocityTrajectory::set_config(::ColibryLite::Messages::HorizontalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.HorizontalVelocityTrajectory.config)
}

// -------------------------------------------------------------------

// HorizontalReference

// .DroneController.Messages.HorizontalAngles angles = 1;
inline bool HorizontalReference::has_angles() const {
  return ref_case() == kAngles;
}
inline void HorizontalReference::set_has_angles() {
  _oneof_case_[0] = kAngles;
}
inline void HorizontalReference::clear_angles() {
  if (has_angles()) {
    delete ref_.angles_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::HorizontalAngles* HorizontalReference::release_angles() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalReference.angles)
  if (has_angles()) {
    clear_has_ref();
      ::DroneController::Messages::HorizontalAngles* temp = ref_.angles_;
    ref_.angles_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::HorizontalAngles& HorizontalReference::angles() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalReference.angles)
  return has_angles()
      ? *ref_.angles_
      : *reinterpret_cast< ::DroneController::Messages::HorizontalAngles*>(&::DroneController::Messages::_HorizontalAngles_default_instance_);
}
inline ::DroneController::Messages::HorizontalAngles* HorizontalReference::mutable_angles() {
  if (!has_angles()) {
    clear_ref();
    set_has_angles();
    ref_.angles_ = CreateMaybeMessage< ::DroneController::Messages::HorizontalAngles >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalReference.angles)
  return ref_.angles_;
}

// .DroneController.Messages.HorizontalTrajectoryLocal trajectory_local = 2;
inline bool HorizontalReference::has_trajectory_local() const {
  return ref_case() == kTrajectoryLocal;
}
inline void HorizontalReference::set_has_trajectory_local() {
  _oneof_case_[0] = kTrajectoryLocal;
}
inline void HorizontalReference::clear_trajectory_local() {
  if (has_trajectory_local()) {
    delete ref_.trajectory_local_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::HorizontalTrajectoryLocal* HorizontalReference::release_trajectory_local() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalReference.trajectory_local)
  if (has_trajectory_local()) {
    clear_has_ref();
      ::DroneController::Messages::HorizontalTrajectoryLocal* temp = ref_.trajectory_local_;
    ref_.trajectory_local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::HorizontalTrajectoryLocal& HorizontalReference::trajectory_local() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalReference.trajectory_local)
  return has_trajectory_local()
      ? *ref_.trajectory_local_
      : *reinterpret_cast< ::DroneController::Messages::HorizontalTrajectoryLocal*>(&::DroneController::Messages::_HorizontalTrajectoryLocal_default_instance_);
}
inline ::DroneController::Messages::HorizontalTrajectoryLocal* HorizontalReference::mutable_trajectory_local() {
  if (!has_trajectory_local()) {
    clear_ref();
    set_has_trajectory_local();
    ref_.trajectory_local_ = CreateMaybeMessage< ::DroneController::Messages::HorizontalTrajectoryLocal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalReference.trajectory_local)
  return ref_.trajectory_local_;
}

// .DroneController.Messages.HorizontalTrajectoryGlobal trajectory_global = 3;
inline bool HorizontalReference::has_trajectory_global() const {
  return ref_case() == kTrajectoryGlobal;
}
inline void HorizontalReference::set_has_trajectory_global() {
  _oneof_case_[0] = kTrajectoryGlobal;
}
inline void HorizontalReference::clear_trajectory_global() {
  if (has_trajectory_global()) {
    delete ref_.trajectory_global_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::HorizontalTrajectoryGlobal* HorizontalReference::release_trajectory_global() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalReference.trajectory_global)
  if (has_trajectory_global()) {
    clear_has_ref();
      ::DroneController::Messages::HorizontalTrajectoryGlobal* temp = ref_.trajectory_global_;
    ref_.trajectory_global_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::HorizontalTrajectoryGlobal& HorizontalReference::trajectory_global() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalReference.trajectory_global)
  return has_trajectory_global()
      ? *ref_.trajectory_global_
      : *reinterpret_cast< ::DroneController::Messages::HorizontalTrajectoryGlobal*>(&::DroneController::Messages::_HorizontalTrajectoryGlobal_default_instance_);
}
inline ::DroneController::Messages::HorizontalTrajectoryGlobal* HorizontalReference::mutable_trajectory_global() {
  if (!has_trajectory_global()) {
    clear_ref();
    set_has_trajectory_global();
    ref_.trajectory_global_ = CreateMaybeMessage< ::DroneController::Messages::HorizontalTrajectoryGlobal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalReference.trajectory_global)
  return ref_.trajectory_global_;
}

// .DroneController.Messages.HorizontalGoToFix go_to_fix = 4;
inline bool HorizontalReference::has_go_to_fix() const {
  return ref_case() == kGoToFix;
}
inline void HorizontalReference::set_has_go_to_fix() {
  _oneof_case_[0] = kGoToFix;
}
inline void HorizontalReference::clear_go_to_fix() {
  if (has_go_to_fix()) {
    delete ref_.go_to_fix_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::HorizontalGoToFix* HorizontalReference::release_go_to_fix() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalReference.go_to_fix)
  if (has_go_to_fix()) {
    clear_has_ref();
      ::DroneController::Messages::HorizontalGoToFix* temp = ref_.go_to_fix_;
    ref_.go_to_fix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::HorizontalGoToFix& HorizontalReference::go_to_fix() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalReference.go_to_fix)
  return has_go_to_fix()
      ? *ref_.go_to_fix_
      : *reinterpret_cast< ::DroneController::Messages::HorizontalGoToFix*>(&::DroneController::Messages::_HorizontalGoToFix_default_instance_);
}
inline ::DroneController::Messages::HorizontalGoToFix* HorizontalReference::mutable_go_to_fix() {
  if (!has_go_to_fix()) {
    clear_ref();
    set_has_go_to_fix();
    ref_.go_to_fix_ = CreateMaybeMessage< ::DroneController::Messages::HorizontalGoToFix >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalReference.go_to_fix)
  return ref_.go_to_fix_;
}

// .DroneController.Messages.HorizontalVelocityTrajectory velocity_trajectory = 5;
inline bool HorizontalReference::has_velocity_trajectory() const {
  return ref_case() == kVelocityTrajectory;
}
inline void HorizontalReference::set_has_velocity_trajectory() {
  _oneof_case_[0] = kVelocityTrajectory;
}
inline void HorizontalReference::clear_velocity_trajectory() {
  if (has_velocity_trajectory()) {
    delete ref_.velocity_trajectory_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::HorizontalVelocityTrajectory* HorizontalReference::release_velocity_trajectory() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.HorizontalReference.velocity_trajectory)
  if (has_velocity_trajectory()) {
    clear_has_ref();
      ::DroneController::Messages::HorizontalVelocityTrajectory* temp = ref_.velocity_trajectory_;
    ref_.velocity_trajectory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::HorizontalVelocityTrajectory& HorizontalReference::velocity_trajectory() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.HorizontalReference.velocity_trajectory)
  return has_velocity_trajectory()
      ? *ref_.velocity_trajectory_
      : *reinterpret_cast< ::DroneController::Messages::HorizontalVelocityTrajectory*>(&::DroneController::Messages::_HorizontalVelocityTrajectory_default_instance_);
}
inline ::DroneController::Messages::HorizontalVelocityTrajectory* HorizontalReference::mutable_velocity_trajectory() {
  if (!has_velocity_trajectory()) {
    clear_ref();
    set_has_velocity_trajectory();
    ref_.velocity_trajectory_ = CreateMaybeMessage< ::DroneController::Messages::HorizontalVelocityTrajectory >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.HorizontalReference.velocity_trajectory)
  return ref_.velocity_trajectory_;
}

inline bool HorizontalReference::has_ref() const {
  return ref_case() != REF_NOT_SET;
}
inline void HorizontalReference::clear_has_ref() {
  _oneof_case_[0] = REF_NOT_SET;
}
inline HorizontalReference::RefCase HorizontalReference::ref_case() const {
  return HorizontalReference::RefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VerticalVelocity

// float ref = 1;
inline void VerticalVelocity::clear_ref() {
  ref_ = 0;
}
inline float VerticalVelocity::ref() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocity.ref)
  return ref_;
}
inline void VerticalVelocity::set_ref(float value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocity.ref)
}

// .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
inline void VerticalVelocity::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::VerticalControlConfig::Enum VerticalVelocity::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocity.config)
  return static_cast< ::ColibryLite::Messages::VerticalControlConfig::Enum >(config_);
}
inline void VerticalVelocity::set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocity.config)
}

// .ColibryLite.Messages.VerticalControllerSetting.Enum controller_setting = 3;
inline void VerticalVelocity::clear_controller_setting() {
  controller_setting_ = 0;
}
inline ::ColibryLite::Messages::VerticalControllerSetting::Enum VerticalVelocity::controller_setting() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocity.controller_setting)
  return static_cast< ::ColibryLite::Messages::VerticalControllerSetting::Enum >(controller_setting_);
}
inline void VerticalVelocity::set_controller_setting(::ColibryLite::Messages::VerticalControllerSetting::Enum value) {
  
  controller_setting_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocity.controller_setting)
}

// bool ground_constrained = 4;
inline void VerticalVelocity::clear_ground_constrained() {
  ground_constrained_ = false;
}
inline bool VerticalVelocity::ground_constrained() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocity.ground_constrained)
  return ground_constrained_;
}
inline void VerticalVelocity::set_ground_constrained(bool value) {
  
  ground_constrained_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocity.ground_constrained)
}

// -------------------------------------------------------------------

// VerticalVelocityTrajectory

// .ColibryLite.Messages.VelocityTrajectory ref = 1;
inline bool VerticalVelocityTrajectory::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::VelocityTrajectory& VerticalVelocityTrajectory::ref() const {
  const ::ColibryLite::Messages::VelocityTrajectory* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocityTrajectory.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::VelocityTrajectory*>(
      &::ColibryLite::Messages::_VelocityTrajectory_default_instance_);
}
inline ::ColibryLite::Messages::VelocityTrajectory* VerticalVelocityTrajectory::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalVelocityTrajectory.ref)
  
  ::ColibryLite::Messages::VelocityTrajectory* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::VelocityTrajectory* VerticalVelocityTrajectory::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::VelocityTrajectory>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalVelocityTrajectory.ref)
  return ref_;
}
inline void VerticalVelocityTrajectory::set_allocated_ref(::ColibryLite::Messages::VelocityTrajectory* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.VerticalVelocityTrajectory.ref)
}

// .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
inline void VerticalVelocityTrajectory::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::VerticalControlConfig::Enum VerticalVelocityTrajectory::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocityTrajectory.config)
  return static_cast< ::ColibryLite::Messages::VerticalControlConfig::Enum >(config_);
}
inline void VerticalVelocityTrajectory::set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocityTrajectory.config)
}

// .ColibryLite.Messages.VerticalControllerSetting.Enum controller_setting = 3;
inline void VerticalVelocityTrajectory::clear_controller_setting() {
  controller_setting_ = 0;
}
inline ::ColibryLite::Messages::VerticalControllerSetting::Enum VerticalVelocityTrajectory::controller_setting() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocityTrajectory.controller_setting)
  return static_cast< ::ColibryLite::Messages::VerticalControllerSetting::Enum >(controller_setting_);
}
inline void VerticalVelocityTrajectory::set_controller_setting(::ColibryLite::Messages::VerticalControllerSetting::Enum value) {
  
  controller_setting_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocityTrajectory.controller_setting)
}

// bool ground_constrained = 4;
inline void VerticalVelocityTrajectory::clear_ground_constrained() {
  ground_constrained_ = false;
}
inline bool VerticalVelocityTrajectory::ground_constrained() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalVelocityTrajectory.ground_constrained)
  return ground_constrained_;
}
inline void VerticalVelocityTrajectory::set_ground_constrained(bool value) {
  
  ground_constrained_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalVelocityTrajectory.ground_constrained)
}

// -------------------------------------------------------------------

// VerticalTrajectory

// .ColibryLite.Messages.TrajectoryPoint ref = 1;
inline bool VerticalTrajectory::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::TrajectoryPoint& VerticalTrajectory::ref() const {
  const ::ColibryLite::Messages::TrajectoryPoint* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalTrajectory.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::TrajectoryPoint*>(
      &::ColibryLite::Messages::_TrajectoryPoint_default_instance_);
}
inline ::ColibryLite::Messages::TrajectoryPoint* VerticalTrajectory::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalTrajectory.ref)
  
  ::ColibryLite::Messages::TrajectoryPoint* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::TrajectoryPoint* VerticalTrajectory::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::TrajectoryPoint>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalTrajectory.ref)
  return ref_;
}
inline void VerticalTrajectory::set_allocated_ref(::ColibryLite::Messages::TrajectoryPoint* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.VerticalTrajectory.ref)
}

// .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
inline void VerticalTrajectory::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::VerticalControlConfig::Enum VerticalTrajectory::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalTrajectory.config)
  return static_cast< ::ColibryLite::Messages::VerticalControlConfig::Enum >(config_);
}
inline void VerticalTrajectory::set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalTrajectory.config)
}

// .ColibryLite.Messages.VerticalControllerSetting.Enum controller_setting = 3;
inline void VerticalTrajectory::clear_controller_setting() {
  controller_setting_ = 0;
}
inline ::ColibryLite::Messages::VerticalControllerSetting::Enum VerticalTrajectory::controller_setting() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalTrajectory.controller_setting)
  return static_cast< ::ColibryLite::Messages::VerticalControllerSetting::Enum >(controller_setting_);
}
inline void VerticalTrajectory::set_controller_setting(::ColibryLite::Messages::VerticalControllerSetting::Enum value) {
  
  controller_setting_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalTrajectory.controller_setting)
}

// .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 4;
inline void VerticalTrajectory::clear_reference_propagation_model() {
  reference_propagation_model_ = 0;
}
inline ::ColibryLite::Messages::ReferencePropagationModel::Enum VerticalTrajectory::reference_propagation_model() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalTrajectory.reference_propagation_model)
  return static_cast< ::ColibryLite::Messages::ReferencePropagationModel::Enum >(reference_propagation_model_);
}
inline void VerticalTrajectory::set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value) {
  
  reference_propagation_model_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalTrajectory.reference_propagation_model)
}

// bool ground_constrained = 5;
inline void VerticalTrajectory::clear_ground_constrained() {
  ground_constrained_ = false;
}
inline bool VerticalTrajectory::ground_constrained() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalTrajectory.ground_constrained)
  return ground_constrained_;
}
inline void VerticalTrajectory::set_ground_constrained(bool value) {
  
  ground_constrained_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalTrajectory.ground_constrained)
}

// float maximum_vertical_speed = 6;
inline void VerticalTrajectory::clear_maximum_vertical_speed() {
  maximum_vertical_speed_ = 0;
}
inline float VerticalTrajectory::maximum_vertical_speed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalTrajectory.maximum_vertical_speed)
  return maximum_vertical_speed_;
}
inline void VerticalTrajectory::set_maximum_vertical_speed(float value) {
  
  maximum_vertical_speed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalTrajectory.maximum_vertical_speed)
}

// -------------------------------------------------------------------

// VerticalThrust

// float ref = 1;
inline void VerticalThrust::clear_ref() {
  ref_ = 0;
}
inline float VerticalThrust::ref() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalThrust.ref)
  return ref_;
}
inline void VerticalThrust::set_ref(float value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalThrust.ref)
}

// .ColibryLite.Messages.VerticalControlConfig.Enum config = 2;
inline void VerticalThrust::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::VerticalControlConfig::Enum VerticalThrust::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalThrust.config)
  return static_cast< ::ColibryLite::Messages::VerticalControlConfig::Enum >(config_);
}
inline void VerticalThrust::set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalThrust.config)
}

// -------------------------------------------------------------------

// VerticalThrustRamp

// float ref = 1;
inline void VerticalThrustRamp::clear_ref() {
  ref_ = 0;
}
inline float VerticalThrustRamp::ref() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalThrustRamp.ref)
  return ref_;
}
inline void VerticalThrustRamp::set_ref(float value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalThrustRamp.ref)
}

// float rate = 2;
inline void VerticalThrustRamp::clear_rate() {
  rate_ = 0;
}
inline float VerticalThrustRamp::rate() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalThrustRamp.rate)
  return rate_;
}
inline void VerticalThrustRamp::set_rate(float value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalThrustRamp.rate)
}

// .ColibryLite.Messages.VerticalControlConfig.Enum config = 3;
inline void VerticalThrustRamp::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::VerticalControlConfig::Enum VerticalThrustRamp::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalThrustRamp.config)
  return static_cast< ::ColibryLite::Messages::VerticalControlConfig::Enum >(config_);
}
inline void VerticalThrustRamp::set_config(::ColibryLite::Messages::VerticalControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.VerticalThrustRamp.config)
}

// -------------------------------------------------------------------

// VerticalReference

// .DroneController.Messages.VerticalVelocity velocity = 1;
inline bool VerticalReference::has_velocity() const {
  return ref_case() == kVelocity;
}
inline void VerticalReference::set_has_velocity() {
  _oneof_case_[0] = kVelocity;
}
inline void VerticalReference::clear_velocity() {
  if (has_velocity()) {
    delete ref_.velocity_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::VerticalVelocity* VerticalReference::release_velocity() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalReference.velocity)
  if (has_velocity()) {
    clear_has_ref();
      ::DroneController::Messages::VerticalVelocity* temp = ref_.velocity_;
    ref_.velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::VerticalVelocity& VerticalReference::velocity() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalReference.velocity)
  return has_velocity()
      ? *ref_.velocity_
      : *reinterpret_cast< ::DroneController::Messages::VerticalVelocity*>(&::DroneController::Messages::_VerticalVelocity_default_instance_);
}
inline ::DroneController::Messages::VerticalVelocity* VerticalReference::mutable_velocity() {
  if (!has_velocity()) {
    clear_ref();
    set_has_velocity();
    ref_.velocity_ = CreateMaybeMessage< ::DroneController::Messages::VerticalVelocity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalReference.velocity)
  return ref_.velocity_;
}

// .DroneController.Messages.VerticalVelocityTrajectory velocity_trajectory = 2;
inline bool VerticalReference::has_velocity_trajectory() const {
  return ref_case() == kVelocityTrajectory;
}
inline void VerticalReference::set_has_velocity_trajectory() {
  _oneof_case_[0] = kVelocityTrajectory;
}
inline void VerticalReference::clear_velocity_trajectory() {
  if (has_velocity_trajectory()) {
    delete ref_.velocity_trajectory_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::VerticalVelocityTrajectory* VerticalReference::release_velocity_trajectory() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalReference.velocity_trajectory)
  if (has_velocity_trajectory()) {
    clear_has_ref();
      ::DroneController::Messages::VerticalVelocityTrajectory* temp = ref_.velocity_trajectory_;
    ref_.velocity_trajectory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::VerticalVelocityTrajectory& VerticalReference::velocity_trajectory() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalReference.velocity_trajectory)
  return has_velocity_trajectory()
      ? *ref_.velocity_trajectory_
      : *reinterpret_cast< ::DroneController::Messages::VerticalVelocityTrajectory*>(&::DroneController::Messages::_VerticalVelocityTrajectory_default_instance_);
}
inline ::DroneController::Messages::VerticalVelocityTrajectory* VerticalReference::mutable_velocity_trajectory() {
  if (!has_velocity_trajectory()) {
    clear_ref();
    set_has_velocity_trajectory();
    ref_.velocity_trajectory_ = CreateMaybeMessage< ::DroneController::Messages::VerticalVelocityTrajectory >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalReference.velocity_trajectory)
  return ref_.velocity_trajectory_;
}

// .DroneController.Messages.VerticalTrajectory trajectory = 3;
inline bool VerticalReference::has_trajectory() const {
  return ref_case() == kTrajectory;
}
inline void VerticalReference::set_has_trajectory() {
  _oneof_case_[0] = kTrajectory;
}
inline void VerticalReference::clear_trajectory() {
  if (has_trajectory()) {
    delete ref_.trajectory_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::VerticalTrajectory* VerticalReference::release_trajectory() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalReference.trajectory)
  if (has_trajectory()) {
    clear_has_ref();
      ::DroneController::Messages::VerticalTrajectory* temp = ref_.trajectory_;
    ref_.trajectory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::VerticalTrajectory& VerticalReference::trajectory() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalReference.trajectory)
  return has_trajectory()
      ? *ref_.trajectory_
      : *reinterpret_cast< ::DroneController::Messages::VerticalTrajectory*>(&::DroneController::Messages::_VerticalTrajectory_default_instance_);
}
inline ::DroneController::Messages::VerticalTrajectory* VerticalReference::mutable_trajectory() {
  if (!has_trajectory()) {
    clear_ref();
    set_has_trajectory();
    ref_.trajectory_ = CreateMaybeMessage< ::DroneController::Messages::VerticalTrajectory >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalReference.trajectory)
  return ref_.trajectory_;
}

// .DroneController.Messages.VerticalThrust thrust = 4;
inline bool VerticalReference::has_thrust() const {
  return ref_case() == kThrust;
}
inline void VerticalReference::set_has_thrust() {
  _oneof_case_[0] = kThrust;
}
inline void VerticalReference::clear_thrust() {
  if (has_thrust()) {
    delete ref_.thrust_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::VerticalThrust* VerticalReference::release_thrust() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalReference.thrust)
  if (has_thrust()) {
    clear_has_ref();
      ::DroneController::Messages::VerticalThrust* temp = ref_.thrust_;
    ref_.thrust_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::VerticalThrust& VerticalReference::thrust() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalReference.thrust)
  return has_thrust()
      ? *ref_.thrust_
      : *reinterpret_cast< ::DroneController::Messages::VerticalThrust*>(&::DroneController::Messages::_VerticalThrust_default_instance_);
}
inline ::DroneController::Messages::VerticalThrust* VerticalReference::mutable_thrust() {
  if (!has_thrust()) {
    clear_ref();
    set_has_thrust();
    ref_.thrust_ = CreateMaybeMessage< ::DroneController::Messages::VerticalThrust >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalReference.thrust)
  return ref_.thrust_;
}

// .DroneController.Messages.VerticalThrustRamp thrust_ramp = 5;
inline bool VerticalReference::has_thrust_ramp() const {
  return ref_case() == kThrustRamp;
}
inline void VerticalReference::set_has_thrust_ramp() {
  _oneof_case_[0] = kThrustRamp;
}
inline void VerticalReference::clear_thrust_ramp() {
  if (has_thrust_ramp()) {
    delete ref_.thrust_ramp_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::VerticalThrustRamp* VerticalReference::release_thrust_ramp() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.VerticalReference.thrust_ramp)
  if (has_thrust_ramp()) {
    clear_has_ref();
      ::DroneController::Messages::VerticalThrustRamp* temp = ref_.thrust_ramp_;
    ref_.thrust_ramp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::VerticalThrustRamp& VerticalReference::thrust_ramp() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.VerticalReference.thrust_ramp)
  return has_thrust_ramp()
      ? *ref_.thrust_ramp_
      : *reinterpret_cast< ::DroneController::Messages::VerticalThrustRamp*>(&::DroneController::Messages::_VerticalThrustRamp_default_instance_);
}
inline ::DroneController::Messages::VerticalThrustRamp* VerticalReference::mutable_thrust_ramp() {
  if (!has_thrust_ramp()) {
    clear_ref();
    set_has_thrust_ramp();
    ref_.thrust_ramp_ = CreateMaybeMessage< ::DroneController::Messages::VerticalThrustRamp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.VerticalReference.thrust_ramp)
  return ref_.thrust_ramp_;
}

inline bool VerticalReference::has_ref() const {
  return ref_case() != REF_NOT_SET;
}
inline void VerticalReference::clear_has_ref() {
  _oneof_case_[0] = REF_NOT_SET;
}
inline VerticalReference::RefCase VerticalReference::ref_case() const {
  return VerticalReference::RefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// YawRate

// float ref = 1;
inline void YawRate::clear_ref() {
  ref_ = 0;
}
inline float YawRate::ref() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawRate.ref)
  return ref_;
}
inline void YawRate::set_ref(float value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawRate.ref)
}

// .ColibryLite.Messages.YawControlConfig.Enum config = 2;
inline void YawRate::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::YawControlConfig::Enum YawRate::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawRate.config)
  return static_cast< ::ColibryLite::Messages::YawControlConfig::Enum >(config_);
}
inline void YawRate::set_config(::ColibryLite::Messages::YawControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawRate.config)
}

// -------------------------------------------------------------------

// YawTrajectoryNedStart

// .ColibryLite.Messages.TrajectoryPoint ref = 1;
inline bool YawTrajectoryNedStart::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::TrajectoryPoint& YawTrajectoryNedStart::ref() const {
  const ::ColibryLite::Messages::TrajectoryPoint* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNedStart.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::TrajectoryPoint*>(
      &::ColibryLite::Messages::_TrajectoryPoint_default_instance_);
}
inline ::ColibryLite::Messages::TrajectoryPoint* YawTrajectoryNedStart::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.YawTrajectoryNedStart.ref)
  
  ::ColibryLite::Messages::TrajectoryPoint* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::TrajectoryPoint* YawTrajectoryNedStart::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::TrajectoryPoint>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.YawTrajectoryNedStart.ref)
  return ref_;
}
inline void YawTrajectoryNedStart::set_allocated_ref(::ColibryLite::Messages::TrajectoryPoint* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.YawTrajectoryNedStart.ref)
}

// .ColibryLite.Messages.YawControlConfig.Enum config = 2;
inline void YawTrajectoryNedStart::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::YawControlConfig::Enum YawTrajectoryNedStart::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNedStart.config)
  return static_cast< ::ColibryLite::Messages::YawControlConfig::Enum >(config_);
}
inline void YawTrajectoryNedStart::set_config(::ColibryLite::Messages::YawControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNedStart.config)
}

// .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
inline void YawTrajectoryNedStart::clear_reference_propagation_model() {
  reference_propagation_model_ = 0;
}
inline ::ColibryLite::Messages::ReferencePropagationModel::Enum YawTrajectoryNedStart::reference_propagation_model() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNedStart.reference_propagation_model)
  return static_cast< ::ColibryLite::Messages::ReferencePropagationModel::Enum >(reference_propagation_model_);
}
inline void YawTrajectoryNedStart::set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value) {
  
  reference_propagation_model_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNedStart.reference_propagation_model)
}

// bool use_shortest_path = 4;
inline void YawTrajectoryNedStart::clear_use_shortest_path() {
  use_shortest_path_ = false;
}
inline bool YawTrajectoryNedStart::use_shortest_path() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNedStart.use_shortest_path)
  return use_shortest_path_;
}
inline void YawTrajectoryNedStart::set_use_shortest_path(bool value) {
  
  use_shortest_path_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNedStart.use_shortest_path)
}

// float maximum_yaw_angular_rate = 5;
inline void YawTrajectoryNedStart::clear_maximum_yaw_angular_rate() {
  maximum_yaw_angular_rate_ = 0;
}
inline float YawTrajectoryNedStart::maximum_yaw_angular_rate() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNedStart.maximum_yaw_angular_rate)
  return maximum_yaw_angular_rate_;
}
inline void YawTrajectoryNedStart::set_maximum_yaw_angular_rate(float value) {
  
  maximum_yaw_angular_rate_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNedStart.maximum_yaw_angular_rate)
}

// -------------------------------------------------------------------

// YawTrajectoryNed

// .ColibryLite.Messages.TrajectoryPoint ref = 1;
inline bool YawTrajectoryNed::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline const ::ColibryLite::Messages::TrajectoryPoint& YawTrajectoryNed::ref() const {
  const ::ColibryLite::Messages::TrajectoryPoint* p = ref_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNed.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::TrajectoryPoint*>(
      &::ColibryLite::Messages::_TrajectoryPoint_default_instance_);
}
inline ::ColibryLite::Messages::TrajectoryPoint* YawTrajectoryNed::release_ref() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.YawTrajectoryNed.ref)
  
  ::ColibryLite::Messages::TrajectoryPoint* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::TrajectoryPoint* YawTrajectoryNed::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::TrajectoryPoint>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.YawTrajectoryNed.ref)
  return ref_;
}
inline void YawTrajectoryNed::set_allocated_ref(::ColibryLite::Messages::TrajectoryPoint* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ref_);
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.YawTrajectoryNed.ref)
}

// .ColibryLite.Messages.YawControlConfig.Enum config = 2;
inline void YawTrajectoryNed::clear_config() {
  config_ = 0;
}
inline ::ColibryLite::Messages::YawControlConfig::Enum YawTrajectoryNed::config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNed.config)
  return static_cast< ::ColibryLite::Messages::YawControlConfig::Enum >(config_);
}
inline void YawTrajectoryNed::set_config(::ColibryLite::Messages::YawControlConfig::Enum value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNed.config)
}

// .ColibryLite.Messages.ReferencePropagationModel.Enum reference_propagation_model = 3;
inline void YawTrajectoryNed::clear_reference_propagation_model() {
  reference_propagation_model_ = 0;
}
inline ::ColibryLite::Messages::ReferencePropagationModel::Enum YawTrajectoryNed::reference_propagation_model() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNed.reference_propagation_model)
  return static_cast< ::ColibryLite::Messages::ReferencePropagationModel::Enum >(reference_propagation_model_);
}
inline void YawTrajectoryNed::set_reference_propagation_model(::ColibryLite::Messages::ReferencePropagationModel::Enum value) {
  
  reference_propagation_model_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNed.reference_propagation_model)
}

// bool use_shortest_path = 4;
inline void YawTrajectoryNed::clear_use_shortest_path() {
  use_shortest_path_ = false;
}
inline bool YawTrajectoryNed::use_shortest_path() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNed.use_shortest_path)
  return use_shortest_path_;
}
inline void YawTrajectoryNed::set_use_shortest_path(bool value) {
  
  use_shortest_path_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNed.use_shortest_path)
}

// float maximum_yaw_angular_rate = 5;
inline void YawTrajectoryNed::clear_maximum_yaw_angular_rate() {
  maximum_yaw_angular_rate_ = 0;
}
inline float YawTrajectoryNed::maximum_yaw_angular_rate() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawTrajectoryNed.maximum_yaw_angular_rate)
  return maximum_yaw_angular_rate_;
}
inline void YawTrajectoryNed::set_maximum_yaw_angular_rate(float value) {
  
  maximum_yaw_angular_rate_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.YawTrajectoryNed.maximum_yaw_angular_rate)
}

// -------------------------------------------------------------------

// YawReference

// .DroneController.Messages.YawRate rate = 1;
inline bool YawReference::has_rate() const {
  return ref_case() == kRate;
}
inline void YawReference::set_has_rate() {
  _oneof_case_[0] = kRate;
}
inline void YawReference::clear_rate() {
  if (has_rate()) {
    delete ref_.rate_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::YawRate* YawReference::release_rate() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.YawReference.rate)
  if (has_rate()) {
    clear_has_ref();
      ::DroneController::Messages::YawRate* temp = ref_.rate_;
    ref_.rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::YawRate& YawReference::rate() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawReference.rate)
  return has_rate()
      ? *ref_.rate_
      : *reinterpret_cast< ::DroneController::Messages::YawRate*>(&::DroneController::Messages::_YawRate_default_instance_);
}
inline ::DroneController::Messages::YawRate* YawReference::mutable_rate() {
  if (!has_rate()) {
    clear_ref();
    set_has_rate();
    ref_.rate_ = CreateMaybeMessage< ::DroneController::Messages::YawRate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.YawReference.rate)
  return ref_.rate_;
}

// .DroneController.Messages.YawTrajectoryNedStart trajectory_ned_start = 2;
inline bool YawReference::has_trajectory_ned_start() const {
  return ref_case() == kTrajectoryNedStart;
}
inline void YawReference::set_has_trajectory_ned_start() {
  _oneof_case_[0] = kTrajectoryNedStart;
}
inline void YawReference::clear_trajectory_ned_start() {
  if (has_trajectory_ned_start()) {
    delete ref_.trajectory_ned_start_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::YawTrajectoryNedStart* YawReference::release_trajectory_ned_start() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.YawReference.trajectory_ned_start)
  if (has_trajectory_ned_start()) {
    clear_has_ref();
      ::DroneController::Messages::YawTrajectoryNedStart* temp = ref_.trajectory_ned_start_;
    ref_.trajectory_ned_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::YawTrajectoryNedStart& YawReference::trajectory_ned_start() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawReference.trajectory_ned_start)
  return has_trajectory_ned_start()
      ? *ref_.trajectory_ned_start_
      : *reinterpret_cast< ::DroneController::Messages::YawTrajectoryNedStart*>(&::DroneController::Messages::_YawTrajectoryNedStart_default_instance_);
}
inline ::DroneController::Messages::YawTrajectoryNedStart* YawReference::mutable_trajectory_ned_start() {
  if (!has_trajectory_ned_start()) {
    clear_ref();
    set_has_trajectory_ned_start();
    ref_.trajectory_ned_start_ = CreateMaybeMessage< ::DroneController::Messages::YawTrajectoryNedStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.YawReference.trajectory_ned_start)
  return ref_.trajectory_ned_start_;
}

// .DroneController.Messages.YawTrajectoryNed trajectory_ned = 3;
inline bool YawReference::has_trajectory_ned() const {
  return ref_case() == kTrajectoryNed;
}
inline void YawReference::set_has_trajectory_ned() {
  _oneof_case_[0] = kTrajectoryNed;
}
inline void YawReference::clear_trajectory_ned() {
  if (has_trajectory_ned()) {
    delete ref_.trajectory_ned_;
    clear_has_ref();
  }
}
inline ::DroneController::Messages::YawTrajectoryNed* YawReference::release_trajectory_ned() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.YawReference.trajectory_ned)
  if (has_trajectory_ned()) {
    clear_has_ref();
      ::DroneController::Messages::YawTrajectoryNed* temp = ref_.trajectory_ned_;
    ref_.trajectory_ned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::YawTrajectoryNed& YawReference::trajectory_ned() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.YawReference.trajectory_ned)
  return has_trajectory_ned()
      ? *ref_.trajectory_ned_
      : *reinterpret_cast< ::DroneController::Messages::YawTrajectoryNed*>(&::DroneController::Messages::_YawTrajectoryNed_default_instance_);
}
inline ::DroneController::Messages::YawTrajectoryNed* YawReference::mutable_trajectory_ned() {
  if (!has_trajectory_ned()) {
    clear_ref();
    set_has_trajectory_ned();
    ref_.trajectory_ned_ = CreateMaybeMessage< ::DroneController::Messages::YawTrajectoryNed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.YawReference.trajectory_ned)
  return ref_.trajectory_ned_;
}

inline bool YawReference::has_ref() const {
  return ref_case() != REF_NOT_SET;
}
inline void YawReference::clear_has_ref() {
  _oneof_case_[0] = REF_NOT_SET;
}
inline YawReference::RefCase YawReference::ref_case() const {
  return YawReference::RefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TargetReached

// .ColibryLite.Messages.EventDetectionState.Enum horizontal_position = 1;
inline void TargetReached::clear_horizontal_position() {
  horizontal_position_ = 0;
}
inline ::ColibryLite::Messages::EventDetectionState::Enum TargetReached::horizontal_position() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.horizontal_position)
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(horizontal_position_);
}
inline void TargetReached::set_horizontal_position(::ColibryLite::Messages::EventDetectionState::Enum value) {
  
  horizontal_position_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.horizontal_position)
}

// .ColibryLite.Messages.EventDetectionState.Enum horizontal_velocity = 2;
inline void TargetReached::clear_horizontal_velocity() {
  horizontal_velocity_ = 0;
}
inline ::ColibryLite::Messages::EventDetectionState::Enum TargetReached::horizontal_velocity() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.horizontal_velocity)
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(horizontal_velocity_);
}
inline void TargetReached::set_horizontal_velocity(::ColibryLite::Messages::EventDetectionState::Enum value) {
  
  horizontal_velocity_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.horizontal_velocity)
}

// .ColibryLite.Messages.EventDetectionState.Enum vertical_position = 3;
inline void TargetReached::clear_vertical_position() {
  vertical_position_ = 0;
}
inline ::ColibryLite::Messages::EventDetectionState::Enum TargetReached::vertical_position() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.vertical_position)
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(vertical_position_);
}
inline void TargetReached::set_vertical_position(::ColibryLite::Messages::EventDetectionState::Enum value) {
  
  vertical_position_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.vertical_position)
}

// .ColibryLite.Messages.EventDetectionState.Enum vertical_velocity = 4;
inline void TargetReached::clear_vertical_velocity() {
  vertical_velocity_ = 0;
}
inline ::ColibryLite::Messages::EventDetectionState::Enum TargetReached::vertical_velocity() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.vertical_velocity)
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(vertical_velocity_);
}
inline void TargetReached::set_vertical_velocity(::ColibryLite::Messages::EventDetectionState::Enum value) {
  
  vertical_velocity_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.vertical_velocity)
}

// .ColibryLite.Messages.EventDetectionState.Enum yaw_position = 5;
inline void TargetReached::clear_yaw_position() {
  yaw_position_ = 0;
}
inline ::ColibryLite::Messages::EventDetectionState::Enum TargetReached::yaw_position() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.yaw_position)
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(yaw_position_);
}
inline void TargetReached::set_yaw_position(::ColibryLite::Messages::EventDetectionState::Enum value) {
  
  yaw_position_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.yaw_position)
}

// .ColibryLite.Messages.EventDetectionState.Enum yaw_velocity = 6;
inline void TargetReached::clear_yaw_velocity() {
  yaw_velocity_ = 0;
}
inline ::ColibryLite::Messages::EventDetectionState::Enum TargetReached::yaw_velocity() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.yaw_velocity)
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(yaw_velocity_);
}
inline void TargetReached::set_yaw_velocity(::ColibryLite::Messages::EventDetectionState::Enum value) {
  
  yaw_velocity_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.yaw_velocity)
}

// bool all_reached = 7;
inline void TargetReached::clear_all_reached() {
  all_reached_ = false;
}
inline bool TargetReached::all_reached() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.all_reached)
  return all_reached_;
}
inline void TargetReached::set_all_reached(bool value) {
  
  all_reached_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.all_reached)
}

// uint32 id = 8;
inline void TargetReached::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TargetReached::id() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TargetReached.id)
  return id_;
}
inline void TargetReached::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TargetReached.id)
}

// -------------------------------------------------------------------

// NavDebug

// uint32 num = 1;
inline void NavDebug::clear_num() {
  num_ = 0u;
}
inline ::google::protobuf::uint32 NavDebug::num() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.NavDebug.num)
  return num_;
}
inline void NavDebug::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.NavDebug.num)
}

// float value = 2;
inline void NavDebug::clear_value() {
  value_ = 0;
}
inline float NavDebug::value() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.NavDebug.value)
  return value_;
}
inline void NavDebug::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.NavDebug.value)
}

// -------------------------------------------------------------------

// BatteryState

// float voltage = 1;
inline void BatteryState::clear_voltage() {
  voltage_ = 0;
}
inline float BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryState.voltage)
  return voltage_;
}
inline void BatteryState::set_voltage(float value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryState.voltage)
}

// int32 level = 2;
inline void BatteryState::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 BatteryState::level() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryState.level)
  return level_;
}
inline void BatteryState::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryState.level)
}

// uint32 remaining_cap = 3;
inline void BatteryState::clear_remaining_cap() {
  remaining_cap_ = 0u;
}
inline ::google::protobuf::uint32 BatteryState::remaining_cap() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryState.remaining_cap)
  return remaining_cap_;
}
inline void BatteryState::set_remaining_cap(::google::protobuf::uint32 value) {
  
  remaining_cap_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryState.remaining_cap)
}

// uint32 full_charge_cap = 4;
inline void BatteryState::clear_full_charge_cap() {
  full_charge_cap_ = 0u;
}
inline ::google::protobuf::uint32 BatteryState::full_charge_cap() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryState.full_charge_cap)
  return full_charge_cap_;
}
inline void BatteryState::set_full_charge_cap(::google::protobuf::uint32 value) {
  
  full_charge_cap_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryState.full_charge_cap)
}

// bool is_smartbattery = 5;
inline void BatteryState::clear_is_smartbattery() {
  is_smartbattery_ = false;
}
inline bool BatteryState::is_smartbattery() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryState.is_smartbattery)
  return is_smartbattery_;
}
inline void BatteryState::set_is_smartbattery(bool value) {
  
  is_smartbattery_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryState.is_smartbattery)
}

// -------------------------------------------------------------------

// BatteryRole

// .DroneController.Messages.BatteryDataRole.Enum data_role = 1;
inline void BatteryRole::clear_data_role() {
  data_role_ = 0;
}
inline ::DroneController::Messages::BatteryDataRole::Enum BatteryRole::data_role() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryRole.data_role)
  return static_cast< ::DroneController::Messages::BatteryDataRole::Enum >(data_role_);
}
inline void BatteryRole::set_data_role(::DroneController::Messages::BatteryDataRole::Enum value) {
  
  data_role_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryRole.data_role)
}

// .DroneController.Messages.BatteryPowerRole.Enum power_role = 2;
inline void BatteryRole::clear_power_role() {
  power_role_ = 0;
}
inline ::DroneController::Messages::BatteryPowerRole::Enum BatteryRole::power_role() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryRole.power_role)
  return static_cast< ::DroneController::Messages::BatteryPowerRole::Enum >(power_role_);
}
inline void BatteryRole::set_power_role(::DroneController::Messages::BatteryPowerRole::Enum value) {
  
  power_role_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryRole.power_role)
}

// -------------------------------------------------------------------

// BatteryHealth

// uint32 state_of_health = 1;
inline void BatteryHealth::clear_state_of_health() {
  state_of_health_ = 0u;
}
inline ::google::protobuf::uint32 BatteryHealth::state_of_health() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryHealth.state_of_health)
  return state_of_health_;
}
inline void BatteryHealth::set_state_of_health(::google::protobuf::uint32 value) {
  
  state_of_health_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryHealth.state_of_health)
}

// uint32 cycle_count = 2;
inline void BatteryHealth::clear_cycle_count() {
  cycle_count_ = 0u;
}
inline ::google::protobuf::uint32 BatteryHealth::cycle_count() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.BatteryHealth.cycle_count)
  return cycle_count_;
}
inline void BatteryHealth::set_cycle_count(::google::protobuf::uint32 value) {
  
  cycle_count_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.BatteryHealth.cycle_count)
}

// -------------------------------------------------------------------

// TickNotificationConfig

// uint32 period = 1;
inline void TickNotificationConfig::clear_period() {
  period_ = 0u;
}
inline ::google::protobuf::uint32 TickNotificationConfig::period() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.TickNotificationConfig.period)
  return period_;
}
inline void TickNotificationConfig::set_period(::google::protobuf::uint32 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.TickNotificationConfig.period)
}

// -------------------------------------------------------------------

// Tick

// uint32 num = 1;
inline void Tick::clear_num() {
  num_ = 0u;
}
inline ::google::protobuf::uint32 Tick::num() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Tick.num)
  return num_;
}
inline void Tick::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Tick.num)
}

// uint64 timestamp_us = 2;
inline void Tick::clear_timestamp_us() {
  timestamp_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Tick::timestamp_us() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Tick.timestamp_us)
  return timestamp_us_;
}
inline void Tick::set_timestamp_us(::google::protobuf::uint64 value) {
  
  timestamp_us_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Tick.timestamp_us)
}

// -------------------------------------------------------------------

// InitStatus

// bool flying = 1;
inline void InitStatus::clear_flying() {
  flying_ = false;
}
inline bool InitStatus::flying() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.InitStatus.flying)
  return flying_;
}
inline void InitStatus::set_flying(bool value) {
  
  flying_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.InitStatus.flying)
}

// -------------------------------------------------------------------

// MotorErrorChange

// uint32 index = 1;
inline void MotorErrorChange::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 MotorErrorChange::index() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorErrorChange.index)
  return index_;
}
inline void MotorErrorChange::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorErrorChange.index)
}

// .DroneController.Messages.MotorError.Enum value = 2;
inline void MotorErrorChange::clear_value() {
  value_ = 0;
}
inline ::DroneController::Messages::MotorError::Enum MotorErrorChange::value() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorErrorChange.value)
  return static_cast< ::DroneController::Messages::MotorError::Enum >(value_);
}
inline void MotorErrorChange::set_value(::DroneController::Messages::MotorError::Enum value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorErrorChange.value)
}

// -------------------------------------------------------------------

// MotorsErrorsChanged

// repeated .DroneController.Messages.MotorErrorChange errors = 1;
inline int MotorsErrorsChanged::errors_size() const {
  return errors_.size();
}
inline void MotorsErrorsChanged::clear_errors() {
  errors_.Clear();
}
inline ::DroneController::Messages::MotorErrorChange* MotorsErrorsChanged::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.MotorsErrorsChanged.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DroneController::Messages::MotorErrorChange >*
MotorsErrorsChanged::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:DroneController.Messages.MotorsErrorsChanged.errors)
  return &errors_;
}
inline const ::DroneController::Messages::MotorErrorChange& MotorsErrorsChanged::errors(int index) const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsErrorsChanged.errors)
  return errors_.Get(index);
}
inline ::DroneController::Messages::MotorErrorChange* MotorsErrorsChanged::add_errors() {
  // @@protoc_insertion_point(field_add:DroneController.Messages.MotorsErrorsChanged.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DroneController::Messages::MotorErrorChange >&
MotorsErrorsChanged::errors() const {
  // @@protoc_insertion_point(field_list:DroneController.Messages.MotorsErrorsChanged.errors)
  return errors_;
}

// -------------------------------------------------------------------

// MotorsVersion

// uint32 hard_version = 1;
inline void MotorsVersion::clear_hard_version() {
  hard_version_ = 0u;
}
inline ::google::protobuf::uint32 MotorsVersion::hard_version() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsVersion.hard_version)
  return hard_version_;
}
inline void MotorsVersion::set_hard_version(::google::protobuf::uint32 value) {
  
  hard_version_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsVersion.hard_version)
}

// uint32 major_version = 2;
inline void MotorsVersion::clear_major_version() {
  major_version_ = 0u;
}
inline ::google::protobuf::uint32 MotorsVersion::major_version() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsVersion.major_version)
  return major_version_;
}
inline void MotorsVersion::set_major_version(::google::protobuf::uint32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsVersion.major_version)
}

// uint32 minor_version = 3;
inline void MotorsVersion::clear_minor_version() {
  minor_version_ = 0u;
}
inline ::google::protobuf::uint32 MotorsVersion::minor_version() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsVersion.minor_version)
  return minor_version_;
}
inline void MotorsVersion::set_minor_version(::google::protobuf::uint32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsVersion.minor_version)
}

// uint32 type_version = 4;
inline void MotorsVersion::clear_type_version() {
  type_version_ = 0u;
}
inline ::google::protobuf::uint32 MotorsVersion::type_version() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsVersion.type_version)
  return type_version_;
}
inline void MotorsVersion::set_type_version(::google::protobuf::uint32 value) {
  
  type_version_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsVersion.type_version)
}

// uint32 motors_count = 5;
inline void MotorsVersion::clear_motors_count() {
  motors_count_ = 0u;
}
inline ::google::protobuf::uint32 MotorsVersion::motors_count() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsVersion.motors_count)
  return motors_count_;
}
inline void MotorsVersion::set_motors_count(::google::protobuf::uint32 value) {
  
  motors_count_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsVersion.motors_count)
}

// -------------------------------------------------------------------

// MotorsFlightInfo

// uint32 nb_flights = 1;
inline void MotorsFlightInfo::clear_nb_flights() {
  nb_flights_ = 0u;
}
inline ::google::protobuf::uint32 MotorsFlightInfo::nb_flights() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsFlightInfo.nb_flights)
  return nb_flights_;
}
inline void MotorsFlightInfo::set_nb_flights(::google::protobuf::uint32 value) {
  
  nb_flights_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsFlightInfo.nb_flights)
}

// uint32 previous_time = 2;
inline void MotorsFlightInfo::clear_previous_time() {
  previous_time_ = 0u;
}
inline ::google::protobuf::uint32 MotorsFlightInfo::previous_time() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsFlightInfo.previous_time)
  return previous_time_;
}
inline void MotorsFlightInfo::set_previous_time(::google::protobuf::uint32 value) {
  
  previous_time_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsFlightInfo.previous_time)
}

// uint32 total_time = 3;
inline void MotorsFlightInfo::clear_total_time() {
  total_time_ = 0u;
}
inline ::google::protobuf::uint32 MotorsFlightInfo::total_time() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsFlightInfo.total_time)
  return total_time_;
}
inline void MotorsFlightInfo::set_total_time(::google::protobuf::uint32 value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsFlightInfo.total_time)
}

// .DroneController.Messages.MotorError.Enum last_error = 4;
inline void MotorsFlightInfo::clear_last_error() {
  last_error_ = 0;
}
inline ::DroneController::Messages::MotorError::Enum MotorsFlightInfo::last_error() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.MotorsFlightInfo.last_error)
  return static_cast< ::DroneController::Messages::MotorError::Enum >(last_error_);
}
inline void MotorsFlightInfo::set_last_error(::DroneController::Messages::MotorError::Enum value) {
  
  last_error_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.MotorsFlightInfo.last_error)
}

// -------------------------------------------------------------------

// PositionVelocityTargets

// .ColibryLite.Messages.HorizontalPositionTarget horizontal_position_target = 1;
inline bool PositionVelocityTargets::has_horizontal_position_target() const {
  return this != internal_default_instance() && horizontal_position_target_ != nullptr;
}
inline const ::ColibryLite::Messages::HorizontalPositionTarget& PositionVelocityTargets::horizontal_position_target() const {
  const ::ColibryLite::Messages::HorizontalPositionTarget* p = horizontal_position_target_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.horizontal_position_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::HorizontalPositionTarget*>(
      &::ColibryLite::Messages::_HorizontalPositionTarget_default_instance_);
}
inline ::ColibryLite::Messages::HorizontalPositionTarget* PositionVelocityTargets::release_horizontal_position_target() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.PositionVelocityTargets.horizontal_position_target)
  
  ::ColibryLite::Messages::HorizontalPositionTarget* temp = horizontal_position_target_;
  horizontal_position_target_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::HorizontalPositionTarget* PositionVelocityTargets::mutable_horizontal_position_target() {
  
  if (horizontal_position_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::HorizontalPositionTarget>(GetArenaNoVirtual());
    horizontal_position_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.PositionVelocityTargets.horizontal_position_target)
  return horizontal_position_target_;
}
inline void PositionVelocityTargets::set_allocated_horizontal_position_target(::ColibryLite::Messages::HorizontalPositionTarget* horizontal_position_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(horizontal_position_target_);
  }
  if (horizontal_position_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horizontal_position_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, horizontal_position_target, submessage_arena);
    }
    
  } else {
    
  }
  horizontal_position_target_ = horizontal_position_target;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.PositionVelocityTargets.horizontal_position_target)
}

// .ColibryLite.Messages.HorizontalVelocityTarget horizontal_velocity_target = 2;
inline bool PositionVelocityTargets::has_horizontal_velocity_target() const {
  return this != internal_default_instance() && horizontal_velocity_target_ != nullptr;
}
inline const ::ColibryLite::Messages::HorizontalVelocityTarget& PositionVelocityTargets::horizontal_velocity_target() const {
  const ::ColibryLite::Messages::HorizontalVelocityTarget* p = horizontal_velocity_target_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.horizontal_velocity_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::HorizontalVelocityTarget*>(
      &::ColibryLite::Messages::_HorizontalVelocityTarget_default_instance_);
}
inline ::ColibryLite::Messages::HorizontalVelocityTarget* PositionVelocityTargets::release_horizontal_velocity_target() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.PositionVelocityTargets.horizontal_velocity_target)
  
  ::ColibryLite::Messages::HorizontalVelocityTarget* temp = horizontal_velocity_target_;
  horizontal_velocity_target_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::HorizontalVelocityTarget* PositionVelocityTargets::mutable_horizontal_velocity_target() {
  
  if (horizontal_velocity_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::HorizontalVelocityTarget>(GetArenaNoVirtual());
    horizontal_velocity_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.PositionVelocityTargets.horizontal_velocity_target)
  return horizontal_velocity_target_;
}
inline void PositionVelocityTargets::set_allocated_horizontal_velocity_target(::ColibryLite::Messages::HorizontalVelocityTarget* horizontal_velocity_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(horizontal_velocity_target_);
  }
  if (horizontal_velocity_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horizontal_velocity_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, horizontal_velocity_target, submessage_arena);
    }
    
  } else {
    
  }
  horizontal_velocity_target_ = horizontal_velocity_target;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.PositionVelocityTargets.horizontal_velocity_target)
}

// .ColibryLite.Messages.VerticalPositionTarget vertical_position_target = 3;
inline bool PositionVelocityTargets::has_vertical_position_target() const {
  return this != internal_default_instance() && vertical_position_target_ != nullptr;
}
inline const ::ColibryLite::Messages::VerticalPositionTarget& PositionVelocityTargets::vertical_position_target() const {
  const ::ColibryLite::Messages::VerticalPositionTarget* p = vertical_position_target_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.vertical_position_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::VerticalPositionTarget*>(
      &::ColibryLite::Messages::_VerticalPositionTarget_default_instance_);
}
inline ::ColibryLite::Messages::VerticalPositionTarget* PositionVelocityTargets::release_vertical_position_target() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.PositionVelocityTargets.vertical_position_target)
  
  ::ColibryLite::Messages::VerticalPositionTarget* temp = vertical_position_target_;
  vertical_position_target_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::VerticalPositionTarget* PositionVelocityTargets::mutable_vertical_position_target() {
  
  if (vertical_position_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::VerticalPositionTarget>(GetArenaNoVirtual());
    vertical_position_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.PositionVelocityTargets.vertical_position_target)
  return vertical_position_target_;
}
inline void PositionVelocityTargets::set_allocated_vertical_position_target(::ColibryLite::Messages::VerticalPositionTarget* vertical_position_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vertical_position_target_);
  }
  if (vertical_position_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertical_position_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vertical_position_target, submessage_arena);
    }
    
  } else {
    
  }
  vertical_position_target_ = vertical_position_target;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.PositionVelocityTargets.vertical_position_target)
}

// .ColibryLite.Messages.VerticalVelocityTarget vertical_velocity_target = 4;
inline bool PositionVelocityTargets::has_vertical_velocity_target() const {
  return this != internal_default_instance() && vertical_velocity_target_ != nullptr;
}
inline const ::ColibryLite::Messages::VerticalVelocityTarget& PositionVelocityTargets::vertical_velocity_target() const {
  const ::ColibryLite::Messages::VerticalVelocityTarget* p = vertical_velocity_target_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.vertical_velocity_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::VerticalVelocityTarget*>(
      &::ColibryLite::Messages::_VerticalVelocityTarget_default_instance_);
}
inline ::ColibryLite::Messages::VerticalVelocityTarget* PositionVelocityTargets::release_vertical_velocity_target() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.PositionVelocityTargets.vertical_velocity_target)
  
  ::ColibryLite::Messages::VerticalVelocityTarget* temp = vertical_velocity_target_;
  vertical_velocity_target_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::VerticalVelocityTarget* PositionVelocityTargets::mutable_vertical_velocity_target() {
  
  if (vertical_velocity_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::VerticalVelocityTarget>(GetArenaNoVirtual());
    vertical_velocity_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.PositionVelocityTargets.vertical_velocity_target)
  return vertical_velocity_target_;
}
inline void PositionVelocityTargets::set_allocated_vertical_velocity_target(::ColibryLite::Messages::VerticalVelocityTarget* vertical_velocity_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vertical_velocity_target_);
  }
  if (vertical_velocity_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertical_velocity_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vertical_velocity_target, submessage_arena);
    }
    
  } else {
    
  }
  vertical_velocity_target_ = vertical_velocity_target;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.PositionVelocityTargets.vertical_velocity_target)
}

// .ColibryLite.Messages.YawPositionTarget yaw_position_target = 5;
inline bool PositionVelocityTargets::has_yaw_position_target() const {
  return this != internal_default_instance() && yaw_position_target_ != nullptr;
}
inline const ::ColibryLite::Messages::YawPositionTarget& PositionVelocityTargets::yaw_position_target() const {
  const ::ColibryLite::Messages::YawPositionTarget* p = yaw_position_target_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.yaw_position_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::YawPositionTarget*>(
      &::ColibryLite::Messages::_YawPositionTarget_default_instance_);
}
inline ::ColibryLite::Messages::YawPositionTarget* PositionVelocityTargets::release_yaw_position_target() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.PositionVelocityTargets.yaw_position_target)
  
  ::ColibryLite::Messages::YawPositionTarget* temp = yaw_position_target_;
  yaw_position_target_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::YawPositionTarget* PositionVelocityTargets::mutable_yaw_position_target() {
  
  if (yaw_position_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::YawPositionTarget>(GetArenaNoVirtual());
    yaw_position_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.PositionVelocityTargets.yaw_position_target)
  return yaw_position_target_;
}
inline void PositionVelocityTargets::set_allocated_yaw_position_target(::ColibryLite::Messages::YawPositionTarget* yaw_position_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(yaw_position_target_);
  }
  if (yaw_position_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yaw_position_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yaw_position_target, submessage_arena);
    }
    
  } else {
    
  }
  yaw_position_target_ = yaw_position_target;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.PositionVelocityTargets.yaw_position_target)
}

// .ColibryLite.Messages.YawVelocityTarget yaw_velocity_target = 6;
inline bool PositionVelocityTargets::has_yaw_velocity_target() const {
  return this != internal_default_instance() && yaw_velocity_target_ != nullptr;
}
inline const ::ColibryLite::Messages::YawVelocityTarget& PositionVelocityTargets::yaw_velocity_target() const {
  const ::ColibryLite::Messages::YawVelocityTarget* p = yaw_velocity_target_;
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.yaw_velocity_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColibryLite::Messages::YawVelocityTarget*>(
      &::ColibryLite::Messages::_YawVelocityTarget_default_instance_);
}
inline ::ColibryLite::Messages::YawVelocityTarget* PositionVelocityTargets::release_yaw_velocity_target() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.PositionVelocityTargets.yaw_velocity_target)
  
  ::ColibryLite::Messages::YawVelocityTarget* temp = yaw_velocity_target_;
  yaw_velocity_target_ = nullptr;
  return temp;
}
inline ::ColibryLite::Messages::YawVelocityTarget* PositionVelocityTargets::mutable_yaw_velocity_target() {
  
  if (yaw_velocity_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColibryLite::Messages::YawVelocityTarget>(GetArenaNoVirtual());
    yaw_velocity_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.PositionVelocityTargets.yaw_velocity_target)
  return yaw_velocity_target_;
}
inline void PositionVelocityTargets::set_allocated_yaw_velocity_target(::ColibryLite::Messages::YawVelocityTarget* yaw_velocity_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(yaw_velocity_target_);
  }
  if (yaw_velocity_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yaw_velocity_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yaw_velocity_target, submessage_arena);
    }
    
  } else {
    
  }
  yaw_velocity_target_ = yaw_velocity_target;
  // @@protoc_insertion_point(field_set_allocated:DroneController.Messages.PositionVelocityTargets.yaw_velocity_target)
}

// uint32 id = 7;
inline void PositionVelocityTargets::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 PositionVelocityTargets::id() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.PositionVelocityTargets.id)
  return id_;
}
inline void PositionVelocityTargets::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.PositionVelocityTargets.id)
}

// -------------------------------------------------------------------

// Command

// .google.protobuf.Empty request_all_events = 1;
inline bool Command::has_request_all_events() const {
  return id_case() == kRequestAllEvents;
}
inline void Command::set_has_request_all_events() {
  _oneof_case_[0] = kRequestAllEvents;
}
inline ::google::protobuf::Empty* Command::release_request_all_events() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.request_all_events)
  if (has_request_all_events()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.request_all_events_;
    id_.request_all_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::request_all_events() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.request_all_events)
  return has_request_all_events()
      ? *id_.request_all_events_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_request_all_events() {
  if (!has_request_all_events()) {
    clear_id();
    set_has_request_all_events();
    id_.request_all_events_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.request_all_events)
  return id_.request_all_events_;
}

// .google.protobuf.Empty request_full_steady_state = 2;
inline bool Command::has_request_full_steady_state() const {
  return id_case() == kRequestFullSteadyState;
}
inline void Command::set_has_request_full_steady_state() {
  _oneof_case_[0] = kRequestFullSteadyState;
}
inline ::google::protobuf::Empty* Command::release_request_full_steady_state() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.request_full_steady_state)
  if (has_request_full_steady_state()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.request_full_steady_state_;
    id_.request_full_steady_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::request_full_steady_state() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.request_full_steady_state)
  return has_request_full_steady_state()
      ? *id_.request_full_steady_state_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_request_full_steady_state() {
  if (!has_request_full_steady_state()) {
    clear_id();
    set_has_request_full_steady_state();
    id_.request_full_steady_state_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.request_full_steady_state)
  return id_.request_full_steady_state_;
}

// .ColibryLite.Messages.EstimationMode.Enum set_estimation_mode = 10;
inline bool Command::has_set_estimation_mode() const {
  return id_case() == kSetEstimationMode;
}
inline void Command::set_has_set_estimation_mode() {
  _oneof_case_[0] = kSetEstimationMode;
}
inline void Command::clear_set_estimation_mode() {
  if (has_set_estimation_mode()) {
    id_.set_estimation_mode_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EstimationMode::Enum Command::set_estimation_mode() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_estimation_mode)
  if (has_set_estimation_mode()) {
    return static_cast< ::ColibryLite::Messages::EstimationMode::Enum >(id_.set_estimation_mode_);
  }
  return static_cast< ::ColibryLite::Messages::EstimationMode::Enum >(0);
}
inline void Command::set_set_estimation_mode(::ColibryLite::Messages::EstimationMode::Enum value) {
  if (!has_set_estimation_mode()) {
    clear_id();
    set_has_set_estimation_mode();
  }
  id_.set_estimation_mode_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.set_estimation_mode)
}

// .google.protobuf.Empty disable_horizontal_control = 20;
inline bool Command::has_disable_horizontal_control() const {
  return id_case() == kDisableHorizontalControl;
}
inline void Command::set_has_disable_horizontal_control() {
  _oneof_case_[0] = kDisableHorizontalControl;
}
inline ::google::protobuf::Empty* Command::release_disable_horizontal_control() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.disable_horizontal_control)
  if (has_disable_horizontal_control()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.disable_horizontal_control_;
    id_.disable_horizontal_control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::disable_horizontal_control() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.disable_horizontal_control)
  return has_disable_horizontal_control()
      ? *id_.disable_horizontal_control_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_disable_horizontal_control() {
  if (!has_disable_horizontal_control()) {
    clear_id();
    set_has_disable_horizontal_control();
    id_.disable_horizontal_control_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.disable_horizontal_control)
  return id_.disable_horizontal_control_;
}

// .DroneController.Messages.HorizontalReference set_horizontal_reference = 21;
inline bool Command::has_set_horizontal_reference() const {
  return id_case() == kSetHorizontalReference;
}
inline void Command::set_has_set_horizontal_reference() {
  _oneof_case_[0] = kSetHorizontalReference;
}
inline void Command::clear_set_horizontal_reference() {
  if (has_set_horizontal_reference()) {
    delete id_.set_horizontal_reference_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::HorizontalReference* Command::release_set_horizontal_reference() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_horizontal_reference)
  if (has_set_horizontal_reference()) {
    clear_has_id();
      ::DroneController::Messages::HorizontalReference* temp = id_.set_horizontal_reference_;
    id_.set_horizontal_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::HorizontalReference& Command::set_horizontal_reference() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_horizontal_reference)
  return has_set_horizontal_reference()
      ? *id_.set_horizontal_reference_
      : *reinterpret_cast< ::DroneController::Messages::HorizontalReference*>(&::DroneController::Messages::_HorizontalReference_default_instance_);
}
inline ::DroneController::Messages::HorizontalReference* Command::mutable_set_horizontal_reference() {
  if (!has_set_horizontal_reference()) {
    clear_id();
    set_has_set_horizontal_reference();
    id_.set_horizontal_reference_ = CreateMaybeMessage< ::DroneController::Messages::HorizontalReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_horizontal_reference)
  return id_.set_horizontal_reference_;
}

// .google.protobuf.Empty disable_vertical_control = 30;
inline bool Command::has_disable_vertical_control() const {
  return id_case() == kDisableVerticalControl;
}
inline void Command::set_has_disable_vertical_control() {
  _oneof_case_[0] = kDisableVerticalControl;
}
inline ::google::protobuf::Empty* Command::release_disable_vertical_control() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.disable_vertical_control)
  if (has_disable_vertical_control()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.disable_vertical_control_;
    id_.disable_vertical_control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::disable_vertical_control() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.disable_vertical_control)
  return has_disable_vertical_control()
      ? *id_.disable_vertical_control_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_disable_vertical_control() {
  if (!has_disable_vertical_control()) {
    clear_id();
    set_has_disable_vertical_control();
    id_.disable_vertical_control_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.disable_vertical_control)
  return id_.disable_vertical_control_;
}

// .DroneController.Messages.VerticalReference set_vertical_reference = 31;
inline bool Command::has_set_vertical_reference() const {
  return id_case() == kSetVerticalReference;
}
inline void Command::set_has_set_vertical_reference() {
  _oneof_case_[0] = kSetVerticalReference;
}
inline void Command::clear_set_vertical_reference() {
  if (has_set_vertical_reference()) {
    delete id_.set_vertical_reference_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::VerticalReference* Command::release_set_vertical_reference() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_vertical_reference)
  if (has_set_vertical_reference()) {
    clear_has_id();
      ::DroneController::Messages::VerticalReference* temp = id_.set_vertical_reference_;
    id_.set_vertical_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::VerticalReference& Command::set_vertical_reference() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_vertical_reference)
  return has_set_vertical_reference()
      ? *id_.set_vertical_reference_
      : *reinterpret_cast< ::DroneController::Messages::VerticalReference*>(&::DroneController::Messages::_VerticalReference_default_instance_);
}
inline ::DroneController::Messages::VerticalReference* Command::mutable_set_vertical_reference() {
  if (!has_set_vertical_reference()) {
    clear_id();
    set_has_set_vertical_reference();
    id_.set_vertical_reference_ = CreateMaybeMessage< ::DroneController::Messages::VerticalReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_vertical_reference)
  return id_.set_vertical_reference_;
}

// .google.protobuf.Empty disable_yaw_control = 40;
inline bool Command::has_disable_yaw_control() const {
  return id_case() == kDisableYawControl;
}
inline void Command::set_has_disable_yaw_control() {
  _oneof_case_[0] = kDisableYawControl;
}
inline ::google::protobuf::Empty* Command::release_disable_yaw_control() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.disable_yaw_control)
  if (has_disable_yaw_control()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.disable_yaw_control_;
    id_.disable_yaw_control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::disable_yaw_control() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.disable_yaw_control)
  return has_disable_yaw_control()
      ? *id_.disable_yaw_control_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_disable_yaw_control() {
  if (!has_disable_yaw_control()) {
    clear_id();
    set_has_disable_yaw_control();
    id_.disable_yaw_control_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.disable_yaw_control)
  return id_.disable_yaw_control_;
}

// .DroneController.Messages.YawReference set_yaw_reference = 41;
inline bool Command::has_set_yaw_reference() const {
  return id_case() == kSetYawReference;
}
inline void Command::set_has_set_yaw_reference() {
  _oneof_case_[0] = kSetYawReference;
}
inline void Command::clear_set_yaw_reference() {
  if (has_set_yaw_reference()) {
    delete id_.set_yaw_reference_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::YawReference* Command::release_set_yaw_reference() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_yaw_reference)
  if (has_set_yaw_reference()) {
    clear_has_id();
      ::DroneController::Messages::YawReference* temp = id_.set_yaw_reference_;
    id_.set_yaw_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::YawReference& Command::set_yaw_reference() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_yaw_reference)
  return has_set_yaw_reference()
      ? *id_.set_yaw_reference_
      : *reinterpret_cast< ::DroneController::Messages::YawReference*>(&::DroneController::Messages::_YawReference_default_instance_);
}
inline ::DroneController::Messages::YawReference* Command::mutable_set_yaw_reference() {
  if (!has_set_yaw_reference()) {
    clear_id();
    set_has_set_yaw_reference();
    id_.set_yaw_reference_ = CreateMaybeMessage< ::DroneController::Messages::YawReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_yaw_reference)
  return id_.set_yaw_reference_;
}

// bool reset_quaternion_loop_integral = 53;
inline bool Command::has_reset_quaternion_loop_integral() const {
  return id_case() == kResetQuaternionLoopIntegral;
}
inline void Command::set_has_reset_quaternion_loop_integral() {
  _oneof_case_[0] = kResetQuaternionLoopIntegral;
}
inline void Command::clear_reset_quaternion_loop_integral() {
  if (has_reset_quaternion_loop_integral()) {
    id_.reset_quaternion_loop_integral_ = false;
    clear_has_id();
  }
}
inline bool Command::reset_quaternion_loop_integral() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.reset_quaternion_loop_integral)
  if (has_reset_quaternion_loop_integral()) {
    return id_.reset_quaternion_loop_integral_;
  }
  return false;
}
inline void Command::set_reset_quaternion_loop_integral(bool value) {
  if (!has_reset_quaternion_loop_integral()) {
    clear_id();
    set_has_reset_quaternion_loop_integral();
  }
  id_.reset_quaternion_loop_integral_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.reset_quaternion_loop_integral)
}

// .google.protobuf.Empty activate_motor_down_control = 54;
inline bool Command::has_activate_motor_down_control() const {
  return id_case() == kActivateMotorDownControl;
}
inline void Command::set_has_activate_motor_down_control() {
  _oneof_case_[0] = kActivateMotorDownControl;
}
inline ::google::protobuf::Empty* Command::release_activate_motor_down_control() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.activate_motor_down_control)
  if (has_activate_motor_down_control()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.activate_motor_down_control_;
    id_.activate_motor_down_control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::activate_motor_down_control() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.activate_motor_down_control)
  return has_activate_motor_down_control()
      ? *id_.activate_motor_down_control_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_activate_motor_down_control() {
  if (!has_activate_motor_down_control()) {
    clear_id();
    set_has_activate_motor_down_control();
    id_.activate_motor_down_control_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.activate_motor_down_control)
  return id_.activate_motor_down_control_;
}

// .google.protobuf.Empty start_motors = 60;
inline bool Command::has_start_motors() const {
  return id_case() == kStartMotors;
}
inline void Command::set_has_start_motors() {
  _oneof_case_[0] = kStartMotors;
}
inline ::google::protobuf::Empty* Command::release_start_motors() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.start_motors)
  if (has_start_motors()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.start_motors_;
    id_.start_motors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::start_motors() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.start_motors)
  return has_start_motors()
      ? *id_.start_motors_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_start_motors() {
  if (!has_start_motors()) {
    clear_id();
    set_has_start_motors();
    id_.start_motors_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.start_motors)
  return id_.start_motors_;
}

// .google.protobuf.Empty stop_all_motors = 61;
inline bool Command::has_stop_all_motors() const {
  return id_case() == kStopAllMotors;
}
inline void Command::set_has_stop_all_motors() {
  _oneof_case_[0] = kStopAllMotors;
}
inline ::google::protobuf::Empty* Command::release_stop_all_motors() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.stop_all_motors)
  if (has_stop_all_motors()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.stop_all_motors_;
    id_.stop_all_motors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::stop_all_motors() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.stop_all_motors)
  return has_stop_all_motors()
      ? *id_.stop_all_motors_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_stop_all_motors() {
  if (!has_stop_all_motors()) {
    clear_id();
    set_has_stop_all_motors();
    id_.stop_all_motors_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.stop_all_motors)
  return id_.stop_all_motors_;
}

// .ColibryLite.Messages.DefectiveMotorId.Enum stop_motor = 62;
inline bool Command::has_stop_motor() const {
  return id_case() == kStopMotor;
}
inline void Command::set_has_stop_motor() {
  _oneof_case_[0] = kStopMotor;
}
inline void Command::clear_stop_motor() {
  if (has_stop_motor()) {
    id_.stop_motor_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::DefectiveMotorId::Enum Command::stop_motor() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.stop_motor)
  if (has_stop_motor()) {
    return static_cast< ::ColibryLite::Messages::DefectiveMotorId::Enum >(id_.stop_motor_);
  }
  return static_cast< ::ColibryLite::Messages::DefectiveMotorId::Enum >(0);
}
inline void Command::set_stop_motor(::ColibryLite::Messages::DefectiveMotorId::Enum value) {
  if (!has_stop_motor()) {
    clear_id();
    set_has_stop_motor();
  }
  id_.stop_motor_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.stop_motor)
}

// .DroneController.Messages.TickNotificationConfig set_tick_notification_config = 70;
inline bool Command::has_set_tick_notification_config() const {
  return id_case() == kSetTickNotificationConfig;
}
inline void Command::set_has_set_tick_notification_config() {
  _oneof_case_[0] = kSetTickNotificationConfig;
}
inline void Command::clear_set_tick_notification_config() {
  if (has_set_tick_notification_config()) {
    delete id_.set_tick_notification_config_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::TickNotificationConfig* Command::release_set_tick_notification_config() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_tick_notification_config)
  if (has_set_tick_notification_config()) {
    clear_has_id();
      ::DroneController::Messages::TickNotificationConfig* temp = id_.set_tick_notification_config_;
    id_.set_tick_notification_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::TickNotificationConfig& Command::set_tick_notification_config() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_tick_notification_config)
  return has_set_tick_notification_config()
      ? *id_.set_tick_notification_config_
      : *reinterpret_cast< ::DroneController::Messages::TickNotificationConfig*>(&::DroneController::Messages::_TickNotificationConfig_default_instance_);
}
inline ::DroneController::Messages::TickNotificationConfig* Command::mutable_set_tick_notification_config() {
  if (!has_set_tick_notification_config()) {
    clear_id();
    set_has_set_tick_notification_config();
    id_.set_tick_notification_config_ = CreateMaybeMessage< ::DroneController::Messages::TickNotificationConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_tick_notification_config)
  return id_.set_tick_notification_config_;
}

// .google.protobuf.Empty keep_alive = 71;
inline bool Command::has_keep_alive() const {
  return id_case() == kKeepAlive;
}
inline void Command::set_has_keep_alive() {
  _oneof_case_[0] = kKeepAlive;
}
inline ::google::protobuf::Empty* Command::release_keep_alive() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.keep_alive)
  if (has_keep_alive()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.keep_alive_;
    id_.keep_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::keep_alive() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.keep_alive)
  return has_keep_alive()
      ? *id_.keep_alive_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_keep_alive() {
  if (!has_keep_alive()) {
    clear_id();
    set_has_keep_alive();
    id_.keep_alive_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.keep_alive)
  return id_.keep_alive_;
}

// bool set_vision_carpet = 80;
inline bool Command::has_set_vision_carpet() const {
  return id_case() == kSetVisionCarpet;
}
inline void Command::set_has_set_vision_carpet() {
  _oneof_case_[0] = kSetVisionCarpet;
}
inline void Command::clear_set_vision_carpet() {
  if (has_set_vision_carpet()) {
    id_.set_vision_carpet_ = false;
    clear_has_id();
  }
}
inline bool Command::set_vision_carpet() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_vision_carpet)
  if (has_set_vision_carpet()) {
    return id_.set_vision_carpet_;
  }
  return false;
}
inline void Command::set_set_vision_carpet(bool value) {
  if (!has_set_vision_carpet()) {
    clear_id();
    set_has_set_vision_carpet();
  }
  id_.set_vision_carpet_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.set_vision_carpet)
}

// .DroneController.Messages.NavDebug set_nav_debug = 81;
inline bool Command::has_set_nav_debug() const {
  return id_case() == kSetNavDebug;
}
inline void Command::set_has_set_nav_debug() {
  _oneof_case_[0] = kSetNavDebug;
}
inline void Command::clear_set_nav_debug() {
  if (has_set_nav_debug()) {
    delete id_.set_nav_debug_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::NavDebug* Command::release_set_nav_debug() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_nav_debug)
  if (has_set_nav_debug()) {
    clear_has_id();
      ::DroneController::Messages::NavDebug* temp = id_.set_nav_debug_;
    id_.set_nav_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::NavDebug& Command::set_nav_debug() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_nav_debug)
  return has_set_nav_debug()
      ? *id_.set_nav_debug_
      : *reinterpret_cast< ::DroneController::Messages::NavDebug*>(&::DroneController::Messages::_NavDebug_default_instance_);
}
inline ::DroneController::Messages::NavDebug* Command::mutable_set_nav_debug() {
  if (!has_set_nav_debug()) {
    clear_id();
    set_has_set_nav_debug();
    id_.set_nav_debug_ = CreateMaybeMessage< ::DroneController::Messages::NavDebug >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_nav_debug)
  return id_.set_nav_debug_;
}

// .DroneController.Messages.EmergencyBehavior.Enum set_emergency_behavior = 90;
inline bool Command::has_set_emergency_behavior() const {
  return id_case() == kSetEmergencyBehavior;
}
inline void Command::set_has_set_emergency_behavior() {
  _oneof_case_[0] = kSetEmergencyBehavior;
}
inline void Command::clear_set_emergency_behavior() {
  if (has_set_emergency_behavior()) {
    id_.set_emergency_behavior_ = 0;
    clear_has_id();
  }
}
inline ::DroneController::Messages::EmergencyBehavior::Enum Command::set_emergency_behavior() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_emergency_behavior)
  if (has_set_emergency_behavior()) {
    return static_cast< ::DroneController::Messages::EmergencyBehavior::Enum >(id_.set_emergency_behavior_);
  }
  return static_cast< ::DroneController::Messages::EmergencyBehavior::Enum >(0);
}
inline void Command::set_set_emergency_behavior(::DroneController::Messages::EmergencyBehavior::Enum value) {
  if (!has_set_emergency_behavior()) {
    clear_id();
    set_has_set_emergency_behavior();
  }
  id_.set_emergency_behavior_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.set_emergency_behavior)
}

// .DroneController.Messages.PositionVelocityTargets set_position_velocity_targets = 100;
inline bool Command::has_set_position_velocity_targets() const {
  return id_case() == kSetPositionVelocityTargets;
}
inline void Command::set_has_set_position_velocity_targets() {
  _oneof_case_[0] = kSetPositionVelocityTargets;
}
inline void Command::clear_set_position_velocity_targets() {
  if (has_set_position_velocity_targets()) {
    delete id_.set_position_velocity_targets_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::PositionVelocityTargets* Command::release_set_position_velocity_targets() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_position_velocity_targets)
  if (has_set_position_velocity_targets()) {
    clear_has_id();
      ::DroneController::Messages::PositionVelocityTargets* temp = id_.set_position_velocity_targets_;
    id_.set_position_velocity_targets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::PositionVelocityTargets& Command::set_position_velocity_targets() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_position_velocity_targets)
  return has_set_position_velocity_targets()
      ? *id_.set_position_velocity_targets_
      : *reinterpret_cast< ::DroneController::Messages::PositionVelocityTargets*>(&::DroneController::Messages::_PositionVelocityTargets_default_instance_);
}
inline ::DroneController::Messages::PositionVelocityTargets* Command::mutable_set_position_velocity_targets() {
  if (!has_set_position_velocity_targets()) {
    clear_id();
    set_has_set_position_velocity_targets();
    id_.set_position_velocity_targets_ = CreateMaybeMessage< ::DroneController::Messages::PositionVelocityTargets >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_position_velocity_targets)
  return id_.set_position_velocity_targets_;
}

// .google.protobuf.Empty reset_all_targets = 120;
inline bool Command::has_reset_all_targets() const {
  return id_case() == kResetAllTargets;
}
inline void Command::set_has_reset_all_targets() {
  _oneof_case_[0] = kResetAllTargets;
}
inline ::google::protobuf::Empty* Command::release_reset_all_targets() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.reset_all_targets)
  if (has_reset_all_targets()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.reset_all_targets_;
    id_.reset_all_targets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::reset_all_targets() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.reset_all_targets)
  return has_reset_all_targets()
      ? *id_.reset_all_targets_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_reset_all_targets() {
  if (!has_reset_all_targets()) {
    clear_id();
    set_has_reset_all_targets();
    id_.reset_all_targets_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.reset_all_targets)
  return id_.reset_all_targets_;
}

// .google.protobuf.Empty clear_command_queue = 130;
inline bool Command::has_clear_command_queue() const {
  return id_case() == kClearCommandQueue;
}
inline void Command::set_has_clear_command_queue() {
  _oneof_case_[0] = kClearCommandQueue;
}
inline ::google::protobuf::Empty* Command::release_clear_command_queue() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.clear_command_queue)
  if (has_clear_command_queue()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.clear_command_queue_;
    id_.clear_command_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::clear_command_queue() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.clear_command_queue)
  return has_clear_command_queue()
      ? *id_.clear_command_queue_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_clear_command_queue() {
  if (!has_clear_command_queue()) {
    clear_id();
    set_has_clear_command_queue();
    id_.clear_command_queue_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.clear_command_queue)
  return id_.clear_command_queue_;
}

// .google.protobuf.Empty set_magneto_rejection_nominal = 140;
inline bool Command::has_set_magneto_rejection_nominal() const {
  return id_case() == kSetMagnetoRejectionNominal;
}
inline void Command::set_has_set_magneto_rejection_nominal() {
  _oneof_case_[0] = kSetMagnetoRejectionNominal;
}
inline ::google::protobuf::Empty* Command::release_set_magneto_rejection_nominal() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_magneto_rejection_nominal)
  if (has_set_magneto_rejection_nominal()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.set_magneto_rejection_nominal_;
    id_.set_magneto_rejection_nominal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::set_magneto_rejection_nominal() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_magneto_rejection_nominal)
  return has_set_magneto_rejection_nominal()
      ? *id_.set_magneto_rejection_nominal_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_set_magneto_rejection_nominal() {
  if (!has_set_magneto_rejection_nominal()) {
    clear_id();
    set_has_set_magneto_rejection_nominal();
    id_.set_magneto_rejection_nominal_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_magneto_rejection_nominal)
  return id_.set_magneto_rejection_nominal_;
}

// .google.protobuf.Empty set_magneto_rejection_unlimited = 141;
inline bool Command::has_set_magneto_rejection_unlimited() const {
  return id_case() == kSetMagnetoRejectionUnlimited;
}
inline void Command::set_has_set_magneto_rejection_unlimited() {
  _oneof_case_[0] = kSetMagnetoRejectionUnlimited;
}
inline ::google::protobuf::Empty* Command::release_set_magneto_rejection_unlimited() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.set_magneto_rejection_unlimited)
  if (has_set_magneto_rejection_unlimited()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.set_magneto_rejection_unlimited_;
    id_.set_magneto_rejection_unlimited_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::set_magneto_rejection_unlimited() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_magneto_rejection_unlimited)
  return has_set_magneto_rejection_unlimited()
      ? *id_.set_magneto_rejection_unlimited_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_set_magneto_rejection_unlimited() {
  if (!has_set_magneto_rejection_unlimited()) {
    clear_id();
    set_has_set_magneto_rejection_unlimited();
    id_.set_magneto_rejection_unlimited_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.set_magneto_rejection_unlimited)
  return id_.set_magneto_rejection_unlimited_;
}

// float set_external_heading = 150;
inline bool Command::has_set_external_heading() const {
  return id_case() == kSetExternalHeading;
}
inline void Command::set_has_set_external_heading() {
  _oneof_case_[0] = kSetExternalHeading;
}
inline void Command::clear_set_external_heading() {
  if (has_set_external_heading()) {
    id_.set_external_heading_ = 0;
    clear_has_id();
  }
}
inline float Command::set_external_heading() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.set_external_heading)
  if (has_set_external_heading()) {
    return id_.set_external_heading_;
  }
  return 0;
}
inline void Command::set_set_external_heading(float value) {
  if (!has_set_external_heading()) {
    clear_id();
    set_has_set_external_heading();
  }
  id_.set_external_heading_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.set_external_heading)
}

// .google.protobuf.Empty stop_external_heading_mode = 151;
inline bool Command::has_stop_external_heading_mode() const {
  return id_case() == kStopExternalHeadingMode;
}
inline void Command::set_has_stop_external_heading_mode() {
  _oneof_case_[0] = kStopExternalHeadingMode;
}
inline ::google::protobuf::Empty* Command::release_stop_external_heading_mode() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.stop_external_heading_mode)
  if (has_stop_external_heading_mode()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.stop_external_heading_mode_;
    id_.stop_external_heading_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::stop_external_heading_mode() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.stop_external_heading_mode)
  return has_stop_external_heading_mode()
      ? *id_.stop_external_heading_mode_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_stop_external_heading_mode() {
  if (!has_stop_external_heading_mode()) {
    clear_id();
    set_has_stop_external_heading_mode();
    id_.stop_external_heading_mode_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.stop_external_heading_mode)
  return id_.stop_external_heading_mode_;
}

// .google.protobuf.Empty unlock_heading = 152;
inline bool Command::has_unlock_heading() const {
  return id_case() == kUnlockHeading;
}
inline void Command::set_has_unlock_heading() {
  _oneof_case_[0] = kUnlockHeading;
}
inline ::google::protobuf::Empty* Command::release_unlock_heading() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Command.unlock_heading)
  if (has_unlock_heading()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.unlock_heading_;
    id_.unlock_heading_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::unlock_heading() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.unlock_heading)
  return has_unlock_heading()
      ? *id_.unlock_heading_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_unlock_heading() {
  if (!has_unlock_heading()) {
    clear_id();
    set_has_unlock_heading();
    id_.unlock_heading_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Command.unlock_heading)
  return id_.unlock_heading_;
}

// uint32 tick_num = 1000;
inline void Command::clear_tick_num() {
  tick_num_ = 0u;
}
inline ::google::protobuf::uint32 Command::tick_num() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Command.tick_num)
  return tick_num_;
}
inline void Command::set_tick_num(::google::protobuf::uint32 value) {
  
  tick_num_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Command.tick_num)
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .ColibryLite.Messages.MotionState.Enum motion_state_changed = 10;
inline bool Event::has_motion_state_changed() const {
  return id_case() == kMotionStateChanged;
}
inline void Event::set_has_motion_state_changed() {
  _oneof_case_[0] = kMotionStateChanged;
}
inline void Event::clear_motion_state_changed() {
  if (has_motion_state_changed()) {
    id_.motion_state_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::MotionState::Enum Event::motion_state_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motion_state_changed)
  if (has_motion_state_changed()) {
    return static_cast< ::ColibryLite::Messages::MotionState::Enum >(id_.motion_state_changed_);
  }
  return static_cast< ::ColibryLite::Messages::MotionState::Enum >(0);
}
inline void Event::set_motion_state_changed(::ColibryLite::Messages::MotionState::Enum value) {
  if (!has_motion_state_changed()) {
    clear_id();
    set_has_motion_state_changed();
  }
  id_.motion_state_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.motion_state_changed)
}

// .ColibryLite.Messages.EventDetectionState.Enum moving_ground_state_changed = 11;
inline bool Event::has_moving_ground_state_changed() const {
  return id_case() == kMovingGroundStateChanged;
}
inline void Event::set_has_moving_ground_state_changed() {
  _oneof_case_[0] = kMovingGroundStateChanged;
}
inline void Event::clear_moving_ground_state_changed() {
  if (has_moving_ground_state_changed()) {
    id_.moving_ground_state_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::moving_ground_state_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.moving_ground_state_changed)
  if (has_moving_ground_state_changed()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.moving_ground_state_changed_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_moving_ground_state_changed(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_moving_ground_state_changed()) {
    clear_id();
    set_has_moving_ground_state_changed();
  }
  id_.moving_ground_state_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.moving_ground_state_changed)
}

// .google.protobuf.Empty freefall_detected = 12;
inline bool Event::has_freefall_detected() const {
  return id_case() == kFreefallDetected;
}
inline void Event::set_has_freefall_detected() {
  _oneof_case_[0] = kFreefallDetected;
}
inline ::google::protobuf::Empty* Event::release_freefall_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.freefall_detected)
  if (has_freefall_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.freefall_detected_;
    id_.freefall_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::freefall_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.freefall_detected)
  return has_freefall_detected()
      ? *id_.freefall_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_freefall_detected() {
  if (!has_freefall_detected()) {
    clear_id();
    set_has_freefall_detected();
    id_.freefall_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.freefall_detected)
  return id_.freefall_detected_;
}

// .google.protobuf.Empty landed_detected = 13;
inline bool Event::has_landed_detected() const {
  return id_case() == kLandedDetected;
}
inline void Event::set_has_landed_detected() {
  _oneof_case_[0] = kLandedDetected;
}
inline ::google::protobuf::Empty* Event::release_landed_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.landed_detected)
  if (has_landed_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.landed_detected_;
    id_.landed_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::landed_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.landed_detected)
  return has_landed_detected()
      ? *id_.landed_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_landed_detected() {
  if (!has_landed_detected()) {
    clear_id();
    set_has_landed_detected();
    id_.landed_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.landed_detected)
  return id_.landed_detected_;
}

// .google.protobuf.Empty thrust_ramp_done = 14;
inline bool Event::has_thrust_ramp_done() const {
  return id_case() == kThrustRampDone;
}
inline void Event::set_has_thrust_ramp_done() {
  _oneof_case_[0] = kThrustRampDone;
}
inline ::google::protobuf::Empty* Event::release_thrust_ramp_done() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.thrust_ramp_done)
  if (has_thrust_ramp_done()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.thrust_ramp_done_;
    id_.thrust_ramp_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::thrust_ramp_done() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.thrust_ramp_done)
  return has_thrust_ramp_done()
      ? *id_.thrust_ramp_done_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_thrust_ramp_done() {
  if (!has_thrust_ramp_done()) {
    clear_id();
    set_has_thrust_ramp_done();
    id_.thrust_ramp_done_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.thrust_ramp_done)
  return id_.thrust_ramp_done_;
}

// .ColibryLite.Messages.EventDetectionState.Enum horizontal_steady = 15;
inline bool Event::has_horizontal_steady() const {
  return id_case() == kHorizontalSteady;
}
inline void Event::set_has_horizontal_steady() {
  _oneof_case_[0] = kHorizontalSteady;
}
inline void Event::clear_horizontal_steady() {
  if (has_horizontal_steady()) {
    id_.horizontal_steady_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::horizontal_steady() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.horizontal_steady)
  if (has_horizontal_steady()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.horizontal_steady_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_horizontal_steady(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_horizontal_steady()) {
    clear_id();
    set_has_horizontal_steady();
  }
  id_.horizontal_steady_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.horizontal_steady)
}

// .ColibryLite.Messages.EventDetectionState.Enum vertical_steady = 16;
inline bool Event::has_vertical_steady() const {
  return id_case() == kVerticalSteady;
}
inline void Event::set_has_vertical_steady() {
  _oneof_case_[0] = kVerticalSteady;
}
inline void Event::clear_vertical_steady() {
  if (has_vertical_steady()) {
    id_.vertical_steady_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::vertical_steady() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.vertical_steady)
  if (has_vertical_steady()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.vertical_steady_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_vertical_steady(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_vertical_steady()) {
    clear_id();
    set_has_vertical_steady();
  }
  id_.vertical_steady_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.vertical_steady)
}

// .ColibryLite.Messages.EventDetectionState.Enum yaw_steady = 17;
inline bool Event::has_yaw_steady() const {
  return id_case() == kYawSteady;
}
inline void Event::set_has_yaw_steady() {
  _oneof_case_[0] = kYawSteady;
}
inline void Event::clear_yaw_steady() {
  if (has_yaw_steady()) {
    id_.yaw_steady_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::yaw_steady() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.yaw_steady)
  if (has_yaw_steady()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.yaw_steady_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_yaw_steady(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_yaw_steady()) {
    clear_id();
    set_has_yaw_steady();
  }
  id_.yaw_steady_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.yaw_steady)
}

// .google.protobuf.Empty full_steady_ok = 18;
inline bool Event::has_full_steady_ok() const {
  return id_case() == kFullSteadyOk;
}
inline void Event::set_has_full_steady_ok() {
  _oneof_case_[0] = kFullSteadyOk;
}
inline ::google::protobuf::Empty* Event::release_full_steady_ok() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.full_steady_ok)
  if (has_full_steady_ok()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.full_steady_ok_;
    id_.full_steady_ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::full_steady_ok() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.full_steady_ok)
  return has_full_steady_ok()
      ? *id_.full_steady_ok_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_full_steady_ok() {
  if (!has_full_steady_ok()) {
    clear_id();
    set_has_full_steady_ok();
    id_.full_steady_ok_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.full_steady_ok)
  return id_.full_steady_ok_;
}

// .google.protobuf.Empty full_steady_ko = 19;
inline bool Event::has_full_steady_ko() const {
  return id_case() == kFullSteadyKo;
}
inline void Event::set_has_full_steady_ko() {
  _oneof_case_[0] = kFullSteadyKo;
}
inline ::google::protobuf::Empty* Event::release_full_steady_ko() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.full_steady_ko)
  if (has_full_steady_ko()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.full_steady_ko_;
    id_.full_steady_ko_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::full_steady_ko() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.full_steady_ko)
  return has_full_steady_ko()
      ? *id_.full_steady_ko_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_full_steady_ko() {
  if (!has_full_steady_ko()) {
    clear_id();
    set_has_full_steady_ko();
    id_.full_steady_ko_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.full_steady_ko)
  return id_.full_steady_ko_;
}

// .google.protobuf.Empty too_much_angle_detected = 20;
inline bool Event::has_too_much_angle_detected() const {
  return id_case() == kTooMuchAngleDetected;
}
inline void Event::set_has_too_much_angle_detected() {
  _oneof_case_[0] = kTooMuchAngleDetected;
}
inline ::google::protobuf::Empty* Event::release_too_much_angle_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.too_much_angle_detected)
  if (has_too_much_angle_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.too_much_angle_detected_;
    id_.too_much_angle_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::too_much_angle_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.too_much_angle_detected)
  return has_too_much_angle_detected()
      ? *id_.too_much_angle_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_too_much_angle_detected() {
  if (!has_too_much_angle_detected()) {
    clear_id();
    set_has_too_much_angle_detected();
    id_.too_much_angle_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.too_much_angle_detected)
  return id_.too_much_angle_detected_;
}

// .google.protobuf.Empty too_much_angle_detected_at_low_altitude = 21;
inline bool Event::has_too_much_angle_detected_at_low_altitude() const {
  return id_case() == kTooMuchAngleDetectedAtLowAltitude;
}
inline void Event::set_has_too_much_angle_detected_at_low_altitude() {
  _oneof_case_[0] = kTooMuchAngleDetectedAtLowAltitude;
}
inline ::google::protobuf::Empty* Event::release_too_much_angle_detected_at_low_altitude() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.too_much_angle_detected_at_low_altitude)
  if (has_too_much_angle_detected_at_low_altitude()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.too_much_angle_detected_at_low_altitude_;
    id_.too_much_angle_detected_at_low_altitude_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::too_much_angle_detected_at_low_altitude() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.too_much_angle_detected_at_low_altitude)
  return has_too_much_angle_detected_at_low_altitude()
      ? *id_.too_much_angle_detected_at_low_altitude_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_too_much_angle_detected_at_low_altitude() {
  if (!has_too_much_angle_detected_at_low_altitude()) {
    clear_id();
    set_has_too_much_angle_detected_at_low_altitude();
    id_.too_much_angle_detected_at_low_altitude_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.too_much_angle_detected_at_low_altitude)
  return id_.too_much_angle_detected_at_low_altitude_;
}

// .google.protobuf.Empty nominal_angle_detected = 22;
inline bool Event::has_nominal_angle_detected() const {
  return id_case() == kNominalAngleDetected;
}
inline void Event::set_has_nominal_angle_detected() {
  _oneof_case_[0] = kNominalAngleDetected;
}
inline ::google::protobuf::Empty* Event::release_nominal_angle_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.nominal_angle_detected)
  if (has_nominal_angle_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.nominal_angle_detected_;
    id_.nominal_angle_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::nominal_angle_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.nominal_angle_detected)
  return has_nominal_angle_detected()
      ? *id_.nominal_angle_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_nominal_angle_detected() {
  if (!has_nominal_angle_detected()) {
    clear_id();
    set_has_nominal_angle_detected();
    id_.nominal_angle_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.nominal_angle_detected)
  return id_.nominal_angle_detected_;
}

// .google.protobuf.Empty nominal_angle_detected_at_low_altitude = 23;
inline bool Event::has_nominal_angle_detected_at_low_altitude() const {
  return id_case() == kNominalAngleDetectedAtLowAltitude;
}
inline void Event::set_has_nominal_angle_detected_at_low_altitude() {
  _oneof_case_[0] = kNominalAngleDetectedAtLowAltitude;
}
inline ::google::protobuf::Empty* Event::release_nominal_angle_detected_at_low_altitude() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.nominal_angle_detected_at_low_altitude)
  if (has_nominal_angle_detected_at_low_altitude()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.nominal_angle_detected_at_low_altitude_;
    id_.nominal_angle_detected_at_low_altitude_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::nominal_angle_detected_at_low_altitude() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.nominal_angle_detected_at_low_altitude)
  return has_nominal_angle_detected_at_low_altitude()
      ? *id_.nominal_angle_detected_at_low_altitude_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_nominal_angle_detected_at_low_altitude() {
  if (!has_nominal_angle_detected_at_low_altitude()) {
    clear_id();
    set_has_nominal_angle_detected_at_low_altitude();
    id_.nominal_angle_detected_at_low_altitude_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.nominal_angle_detected_at_low_altitude)
  return id_.nominal_angle_detected_at_low_altitude_;
}

// .google.protobuf.Empty flyaway_detected = 24;
inline bool Event::has_flyaway_detected() const {
  return id_case() == kFlyawayDetected;
}
inline void Event::set_has_flyaway_detected() {
  _oneof_case_[0] = kFlyawayDetected;
}
inline ::google::protobuf::Empty* Event::release_flyaway_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.flyaway_detected)
  if (has_flyaway_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.flyaway_detected_;
    id_.flyaway_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::flyaway_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.flyaway_detected)
  return has_flyaway_detected()
      ? *id_.flyaway_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_flyaway_detected() {
  if (!has_flyaway_detected()) {
    clear_id();
    set_has_flyaway_detected();
    id_.flyaway_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.flyaway_detected)
  return id_.flyaway_detected_;
}

// .google.protobuf.Empty magneto_far_enough_from_earth_poles = 25;
inline bool Event::has_magneto_far_enough_from_earth_poles() const {
  return id_case() == kMagnetoFarEnoughFromEarthPoles;
}
inline void Event::set_has_magneto_far_enough_from_earth_poles() {
  _oneof_case_[0] = kMagnetoFarEnoughFromEarthPoles;
}
inline ::google::protobuf::Empty* Event::release_magneto_far_enough_from_earth_poles() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_far_enough_from_earth_poles)
  if (has_magneto_far_enough_from_earth_poles()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_far_enough_from_earth_poles_;
    id_.magneto_far_enough_from_earth_poles_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_far_enough_from_earth_poles() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_far_enough_from_earth_poles)
  return has_magneto_far_enough_from_earth_poles()
      ? *id_.magneto_far_enough_from_earth_poles_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_far_enough_from_earth_poles() {
  if (!has_magneto_far_enough_from_earth_poles()) {
    clear_id();
    set_has_magneto_far_enough_from_earth_poles();
    id_.magneto_far_enough_from_earth_poles_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_far_enough_from_earth_poles)
  return id_.magneto_far_enough_from_earth_poles_;
}

// .google.protobuf.Empty magneto_too_close_to_earth_poles = 26;
inline bool Event::has_magneto_too_close_to_earth_poles() const {
  return id_case() == kMagnetoTooCloseToEarthPoles;
}
inline void Event::set_has_magneto_too_close_to_earth_poles() {
  _oneof_case_[0] = kMagnetoTooCloseToEarthPoles;
}
inline ::google::protobuf::Empty* Event::release_magneto_too_close_to_earth_poles() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_too_close_to_earth_poles)
  if (has_magneto_too_close_to_earth_poles()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_too_close_to_earth_poles_;
    id_.magneto_too_close_to_earth_poles_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_too_close_to_earth_poles() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_too_close_to_earth_poles)
  return has_magneto_too_close_to_earth_poles()
      ? *id_.magneto_too_close_to_earth_poles_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_too_close_to_earth_poles() {
  if (!has_magneto_too_close_to_earth_poles()) {
    clear_id();
    set_has_magneto_too_close_to_earth_poles();
    id_.magneto_too_close_to_earth_poles_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_too_close_to_earth_poles)
  return id_.magneto_too_close_to_earth_poles_;
}

// .google.protobuf.Empty magnetic_interference_detected = 27;
inline bool Event::has_magnetic_interference_detected() const {
  return id_case() == kMagneticInterferenceDetected;
}
inline void Event::set_has_magnetic_interference_detected() {
  _oneof_case_[0] = kMagneticInterferenceDetected;
}
inline ::google::protobuf::Empty* Event::release_magnetic_interference_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magnetic_interference_detected)
  if (has_magnetic_interference_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magnetic_interference_detected_;
    id_.magnetic_interference_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magnetic_interference_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magnetic_interference_detected)
  return has_magnetic_interference_detected()
      ? *id_.magnetic_interference_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magnetic_interference_detected() {
  if (!has_magnetic_interference_detected()) {
    clear_id();
    set_has_magnetic_interference_detected();
    id_.magnetic_interference_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magnetic_interference_detected)
  return id_.magnetic_interference_detected_;
}

// .google.protobuf.Empty no_magnetic_interference = 28;
inline bool Event::has_no_magnetic_interference() const {
  return id_case() == kNoMagneticInterference;
}
inline void Event::set_has_no_magnetic_interference() {
  _oneof_case_[0] = kNoMagneticInterference;
}
inline ::google::protobuf::Empty* Event::release_no_magnetic_interference() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.no_magnetic_interference)
  if (has_no_magnetic_interference()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.no_magnetic_interference_;
    id_.no_magnetic_interference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::no_magnetic_interference() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.no_magnetic_interference)
  return has_no_magnetic_interference()
      ? *id_.no_magnetic_interference_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_no_magnetic_interference() {
  if (!has_no_magnetic_interference()) {
    clear_id();
    set_has_no_magnetic_interference();
    id_.no_magnetic_interference_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.no_magnetic_interference)
  return id_.no_magnetic_interference_;
}

// .google.protobuf.Empty freefall_not_detected = 29;
inline bool Event::has_freefall_not_detected() const {
  return id_case() == kFreefallNotDetected;
}
inline void Event::set_has_freefall_not_detected() {
  _oneof_case_[0] = kFreefallNotDetected;
}
inline ::google::protobuf::Empty* Event::release_freefall_not_detected() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.freefall_not_detected)
  if (has_freefall_not_detected()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.freefall_not_detected_;
    id_.freefall_not_detected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::freefall_not_detected() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.freefall_not_detected)
  return has_freefall_not_detected()
      ? *id_.freefall_not_detected_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_freefall_not_detected() {
  if (!has_freefall_not_detected()) {
    clear_id();
    set_has_freefall_not_detected();
    id_.freefall_not_detected_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.freefall_not_detected)
  return id_.freefall_not_detected_;
}

// .google.protobuf.Empty motors_started = 30;
inline bool Event::has_motors_started() const {
  return id_case() == kMotorsStarted;
}
inline void Event::set_has_motors_started() {
  _oneof_case_[0] = kMotorsStarted;
}
inline ::google::protobuf::Empty* Event::release_motors_started() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_started)
  if (has_motors_started()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motors_started_;
    id_.motors_started_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motors_started() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_started)
  return has_motors_started()
      ? *id_.motors_started_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motors_started() {
  if (!has_motors_started()) {
    clear_id();
    set_has_motors_started();
    id_.motors_started_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_started)
  return id_.motors_started_;
}

// .google.protobuf.Empty motors_start_failure = 31;
inline bool Event::has_motors_start_failure() const {
  return id_case() == kMotorsStartFailure;
}
inline void Event::set_has_motors_start_failure() {
  _oneof_case_[0] = kMotorsStartFailure;
}
inline ::google::protobuf::Empty* Event::release_motors_start_failure() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_start_failure)
  if (has_motors_start_failure()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motors_start_failure_;
    id_.motors_start_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motors_start_failure() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_start_failure)
  return has_motors_start_failure()
      ? *id_.motors_start_failure_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motors_start_failure() {
  if (!has_motors_start_failure()) {
    clear_id();
    set_has_motors_start_failure();
    id_.motors_start_failure_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_start_failure)
  return id_.motors_start_failure_;
}

// .google.protobuf.Empty motors_stopped = 32;
inline bool Event::has_motors_stopped() const {
  return id_case() == kMotorsStopped;
}
inline void Event::set_has_motors_stopped() {
  _oneof_case_[0] = kMotorsStopped;
}
inline ::google::protobuf::Empty* Event::release_motors_stopped() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_stopped)
  if (has_motors_stopped()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motors_stopped_;
    id_.motors_stopped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motors_stopped() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_stopped)
  return has_motors_stopped()
      ? *id_.motors_stopped_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motors_stopped() {
  if (!has_motors_stopped()) {
    clear_id();
    set_has_motors_stopped();
    id_.motors_stopped_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_stopped)
  return id_.motors_stopped_;
}

// .google.protobuf.Empty motors_cutout = 33;
inline bool Event::has_motors_cutout() const {
  return id_case() == kMotorsCutout;
}
inline void Event::set_has_motors_cutout() {
  _oneof_case_[0] = kMotorsCutout;
}
inline ::google::protobuf::Empty* Event::release_motors_cutout() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_cutout)
  if (has_motors_cutout()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motors_cutout_;
    id_.motors_cutout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motors_cutout() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_cutout)
  return has_motors_cutout()
      ? *id_.motors_cutout_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motors_cutout() {
  if (!has_motors_cutout()) {
    clear_id();
    set_has_motors_cutout();
    id_.motors_cutout_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_cutout)
  return id_.motors_cutout_;
}

// .google.protobuf.Empty motors_ramping_done = 34;
inline bool Event::has_motors_ramping_done() const {
  return id_case() == kMotorsRampingDone;
}
inline void Event::set_has_motors_ramping_done() {
  _oneof_case_[0] = kMotorsRampingDone;
}
inline ::google::protobuf::Empty* Event::release_motors_ramping_done() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_ramping_done)
  if (has_motors_ramping_done()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motors_ramping_done_;
    id_.motors_ramping_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motors_ramping_done() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_ramping_done)
  return has_motors_ramping_done()
      ? *id_.motors_ramping_done_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motors_ramping_done() {
  if (!has_motors_ramping_done()) {
    clear_id();
    set_has_motors_ramping_done();
    id_.motors_ramping_done_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_ramping_done)
  return id_.motors_ramping_done_;
}

// .DroneController.Messages.MotorsErrorsChanged motors_errors = 35;
inline bool Event::has_motors_errors() const {
  return id_case() == kMotorsErrors;
}
inline void Event::set_has_motors_errors() {
  _oneof_case_[0] = kMotorsErrors;
}
inline void Event::clear_motors_errors() {
  if (has_motors_errors()) {
    delete id_.motors_errors_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::MotorsErrorsChanged* Event::release_motors_errors() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_errors)
  if (has_motors_errors()) {
    clear_has_id();
      ::DroneController::Messages::MotorsErrorsChanged* temp = id_.motors_errors_;
    id_.motors_errors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::MotorsErrorsChanged& Event::motors_errors() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_errors)
  return has_motors_errors()
      ? *id_.motors_errors_
      : *reinterpret_cast< ::DroneController::Messages::MotorsErrorsChanged*>(&::DroneController::Messages::_MotorsErrorsChanged_default_instance_);
}
inline ::DroneController::Messages::MotorsErrorsChanged* Event::mutable_motors_errors() {
  if (!has_motors_errors()) {
    clear_id();
    set_has_motors_errors();
    id_.motors_errors_ = CreateMaybeMessage< ::DroneController::Messages::MotorsErrorsChanged >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_errors)
  return id_.motors_errors_;
}

// .DroneController.Messages.MotorsVersion motors_version = 36;
inline bool Event::has_motors_version() const {
  return id_case() == kMotorsVersion;
}
inline void Event::set_has_motors_version() {
  _oneof_case_[0] = kMotorsVersion;
}
inline void Event::clear_motors_version() {
  if (has_motors_version()) {
    delete id_.motors_version_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::MotorsVersion* Event::release_motors_version() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_version)
  if (has_motors_version()) {
    clear_has_id();
      ::DroneController::Messages::MotorsVersion* temp = id_.motors_version_;
    id_.motors_version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::MotorsVersion& Event::motors_version() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_version)
  return has_motors_version()
      ? *id_.motors_version_
      : *reinterpret_cast< ::DroneController::Messages::MotorsVersion*>(&::DroneController::Messages::_MotorsVersion_default_instance_);
}
inline ::DroneController::Messages::MotorsVersion* Event::mutable_motors_version() {
  if (!has_motors_version()) {
    clear_id();
    set_has_motors_version();
    id_.motors_version_ = CreateMaybeMessage< ::DroneController::Messages::MotorsVersion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_version)
  return id_.motors_version_;
}

// .DroneController.Messages.MotorsFlightInfo motors_flight_info = 37;
inline bool Event::has_motors_flight_info() const {
  return id_case() == kMotorsFlightInfo;
}
inline void Event::set_has_motors_flight_info() {
  _oneof_case_[0] = kMotorsFlightInfo;
}
inline void Event::clear_motors_flight_info() {
  if (has_motors_flight_info()) {
    delete id_.motors_flight_info_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::MotorsFlightInfo* Event::release_motors_flight_info() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motors_flight_info)
  if (has_motors_flight_info()) {
    clear_has_id();
      ::DroneController::Messages::MotorsFlightInfo* temp = id_.motors_flight_info_;
    id_.motors_flight_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::MotorsFlightInfo& Event::motors_flight_info() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motors_flight_info)
  return has_motors_flight_info()
      ? *id_.motors_flight_info_
      : *reinterpret_cast< ::DroneController::Messages::MotorsFlightInfo*>(&::DroneController::Messages::_MotorsFlightInfo_default_instance_);
}
inline ::DroneController::Messages::MotorsFlightInfo* Event::mutable_motors_flight_info() {
  if (!has_motors_flight_info()) {
    clear_id();
    set_has_motors_flight_info();
    id_.motors_flight_info_ = CreateMaybeMessage< ::DroneController::Messages::MotorsFlightInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motors_flight_info)
  return id_.motors_flight_info_;
}

// .DroneController.Messages.TargetReached target_reached = 40;
inline bool Event::has_target_reached() const {
  return id_case() == kTargetReached;
}
inline void Event::set_has_target_reached() {
  _oneof_case_[0] = kTargetReached;
}
inline void Event::clear_target_reached() {
  if (has_target_reached()) {
    delete id_.target_reached_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::TargetReached* Event::release_target_reached() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.target_reached)
  if (has_target_reached()) {
    clear_has_id();
      ::DroneController::Messages::TargetReached* temp = id_.target_reached_;
    id_.target_reached_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::TargetReached& Event::target_reached() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.target_reached)
  return has_target_reached()
      ? *id_.target_reached_
      : *reinterpret_cast< ::DroneController::Messages::TargetReached*>(&::DroneController::Messages::_TargetReached_default_instance_);
}
inline ::DroneController::Messages::TargetReached* Event::mutable_target_reached() {
  if (!has_target_reached()) {
    clear_id();
    set_has_target_reached();
    id_.target_reached_ = CreateMaybeMessage< ::DroneController::Messages::TargetReached >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.target_reached)
  return id_.target_reached_;
}

// .ColibryLite.Messages.EventDetectionState.Enum hand_takeoff_low_angle = 41;
inline bool Event::has_hand_takeoff_low_angle() const {
  return id_case() == kHandTakeoffLowAngle;
}
inline void Event::set_has_hand_takeoff_low_angle() {
  _oneof_case_[0] = kHandTakeoffLowAngle;
}
inline void Event::clear_hand_takeoff_low_angle() {
  if (has_hand_takeoff_low_angle()) {
    id_.hand_takeoff_low_angle_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::hand_takeoff_low_angle() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.hand_takeoff_low_angle)
  if (has_hand_takeoff_low_angle()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.hand_takeoff_low_angle_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_hand_takeoff_low_angle(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_hand_takeoff_low_angle()) {
    clear_id();
    set_has_hand_takeoff_low_angle();
  }
  id_.hand_takeoff_low_angle_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.hand_takeoff_low_angle)
}

// .ColibryLite.Messages.EventDetectionState.Enum hand_takeoff_low_vertical_speed_error = 42;
inline bool Event::has_hand_takeoff_low_vertical_speed_error() const {
  return id_case() == kHandTakeoffLowVerticalSpeedError;
}
inline void Event::set_has_hand_takeoff_low_vertical_speed_error() {
  _oneof_case_[0] = kHandTakeoffLowVerticalSpeedError;
}
inline void Event::clear_hand_takeoff_low_vertical_speed_error() {
  if (has_hand_takeoff_low_vertical_speed_error()) {
    id_.hand_takeoff_low_vertical_speed_error_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::hand_takeoff_low_vertical_speed_error() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.hand_takeoff_low_vertical_speed_error)
  if (has_hand_takeoff_low_vertical_speed_error()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.hand_takeoff_low_vertical_speed_error_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_hand_takeoff_low_vertical_speed_error(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_hand_takeoff_low_vertical_speed_error()) {
    clear_id();
    set_has_hand_takeoff_low_vertical_speed_error();
  }
  id_.hand_takeoff_low_vertical_speed_error_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.hand_takeoff_low_vertical_speed_error)
}

// .ColibryLite.Messages.EventDetectionState.Enum hand_takeoff_low_angular_velocity = 43;
inline bool Event::has_hand_takeoff_low_angular_velocity() const {
  return id_case() == kHandTakeoffLowAngularVelocity;
}
inline void Event::set_has_hand_takeoff_low_angular_velocity() {
  _oneof_case_[0] = kHandTakeoffLowAngularVelocity;
}
inline void Event::clear_hand_takeoff_low_angular_velocity() {
  if (has_hand_takeoff_low_angular_velocity()) {
    id_.hand_takeoff_low_angular_velocity_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::EventDetectionState::Enum Event::hand_takeoff_low_angular_velocity() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.hand_takeoff_low_angular_velocity)
  if (has_hand_takeoff_low_angular_velocity()) {
    return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(id_.hand_takeoff_low_angular_velocity_);
  }
  return static_cast< ::ColibryLite::Messages::EventDetectionState::Enum >(0);
}
inline void Event::set_hand_takeoff_low_angular_velocity(::ColibryLite::Messages::EventDetectionState::Enum value) {
  if (!has_hand_takeoff_low_angular_velocity()) {
    clear_id();
    set_has_hand_takeoff_low_angular_velocity();
  }
  id_.hand_takeoff_low_angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.hand_takeoff_low_angular_velocity)
}

// .google.protobuf.Empty linear_velocity_reliable = 44;
inline bool Event::has_linear_velocity_reliable() const {
  return id_case() == kLinearVelocityReliable;
}
inline void Event::set_has_linear_velocity_reliable() {
  _oneof_case_[0] = kLinearVelocityReliable;
}
inline ::google::protobuf::Empty* Event::release_linear_velocity_reliable() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.linear_velocity_reliable)
  if (has_linear_velocity_reliable()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.linear_velocity_reliable_;
    id_.linear_velocity_reliable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::linear_velocity_reliable() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.linear_velocity_reliable)
  return has_linear_velocity_reliable()
      ? *id_.linear_velocity_reliable_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_linear_velocity_reliable() {
  if (!has_linear_velocity_reliable()) {
    clear_id();
    set_has_linear_velocity_reliable();
    id_.linear_velocity_reliable_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.linear_velocity_reliable)
  return id_.linear_velocity_reliable_;
}

// .google.protobuf.Empty linear_velocity_unreliable = 45;
inline bool Event::has_linear_velocity_unreliable() const {
  return id_case() == kLinearVelocityUnreliable;
}
inline void Event::set_has_linear_velocity_unreliable() {
  _oneof_case_[0] = kLinearVelocityUnreliable;
}
inline ::google::protobuf::Empty* Event::release_linear_velocity_unreliable() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.linear_velocity_unreliable)
  if (has_linear_velocity_unreliable()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.linear_velocity_unreliable_;
    id_.linear_velocity_unreliable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::linear_velocity_unreliable() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.linear_velocity_unreliable)
  return has_linear_velocity_unreliable()
      ? *id_.linear_velocity_unreliable_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_linear_velocity_unreliable() {
  if (!has_linear_velocity_unreliable()) {
    clear_id();
    set_has_linear_velocity_unreliable();
    id_.linear_velocity_unreliable_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.linear_velocity_unreliable)
  return id_.linear_velocity_unreliable_;
}

// .google.protobuf.Empty ground_distance_defective = 46;
inline bool Event::has_ground_distance_defective() const {
  return id_case() == kGroundDistanceDefective;
}
inline void Event::set_has_ground_distance_defective() {
  _oneof_case_[0] = kGroundDistanceDefective;
}
inline ::google::protobuf::Empty* Event::release_ground_distance_defective() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.ground_distance_defective)
  if (has_ground_distance_defective()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.ground_distance_defective_;
    id_.ground_distance_defective_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::ground_distance_defective() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.ground_distance_defective)
  return has_ground_distance_defective()
      ? *id_.ground_distance_defective_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_ground_distance_defective() {
  if (!has_ground_distance_defective()) {
    clear_id();
    set_has_ground_distance_defective();
    id_.ground_distance_defective_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.ground_distance_defective)
  return id_.ground_distance_defective_;
}

// .google.protobuf.Empty ground_distance_functional = 47;
inline bool Event::has_ground_distance_functional() const {
  return id_case() == kGroundDistanceFunctional;
}
inline void Event::set_has_ground_distance_functional() {
  _oneof_case_[0] = kGroundDistanceFunctional;
}
inline ::google::protobuf::Empty* Event::release_ground_distance_functional() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.ground_distance_functional)
  if (has_ground_distance_functional()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.ground_distance_functional_;
    id_.ground_distance_functional_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::ground_distance_functional() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.ground_distance_functional)
  return has_ground_distance_functional()
      ? *id_.ground_distance_functional_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_ground_distance_functional() {
  if (!has_ground_distance_functional()) {
    clear_id();
    set_has_ground_distance_functional();
    id_.ground_distance_functional_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.ground_distance_functional)
  return id_.ground_distance_functional_;
}

// .google.protobuf.Empty thrust_for_angle_reached = 48;
inline bool Event::has_thrust_for_angle_reached() const {
  return id_case() == kThrustForAngleReached;
}
inline void Event::set_has_thrust_for_angle_reached() {
  _oneof_case_[0] = kThrustForAngleReached;
}
inline ::google::protobuf::Empty* Event::release_thrust_for_angle_reached() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.thrust_for_angle_reached)
  if (has_thrust_for_angle_reached()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.thrust_for_angle_reached_;
    id_.thrust_for_angle_reached_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::thrust_for_angle_reached() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.thrust_for_angle_reached)
  return has_thrust_for_angle_reached()
      ? *id_.thrust_for_angle_reached_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_thrust_for_angle_reached() {
  if (!has_thrust_for_angle_reached()) {
    clear_id();
    set_has_thrust_for_angle_reached();
    id_.thrust_for_angle_reached_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.thrust_for_angle_reached)
  return id_.thrust_for_angle_reached_;
}

// .google.protobuf.Empty gps_navigation_ready = 50;
inline bool Event::has_gps_navigation_ready() const {
  return id_case() == kGpsNavigationReady;
}
inline void Event::set_has_gps_navigation_ready() {
  _oneof_case_[0] = kGpsNavigationReady;
}
inline ::google::protobuf::Empty* Event::release_gps_navigation_ready() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.gps_navigation_ready)
  if (has_gps_navigation_ready()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.gps_navigation_ready_;
    id_.gps_navigation_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::gps_navigation_ready() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.gps_navigation_ready)
  return has_gps_navigation_ready()
      ? *id_.gps_navigation_ready_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_gps_navigation_ready() {
  if (!has_gps_navigation_ready()) {
    clear_id();
    set_has_gps_navigation_ready();
    id_.gps_navigation_ready_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.gps_navigation_ready)
  return id_.gps_navigation_ready_;
}

// .google.protobuf.Empty gps_navigation_unavailable = 51;
inline bool Event::has_gps_navigation_unavailable() const {
  return id_case() == kGpsNavigationUnavailable;
}
inline void Event::set_has_gps_navigation_unavailable() {
  _oneof_case_[0] = kGpsNavigationUnavailable;
}
inline ::google::protobuf::Empty* Event::release_gps_navigation_unavailable() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.gps_navigation_unavailable)
  if (has_gps_navigation_unavailable()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.gps_navigation_unavailable_;
    id_.gps_navigation_unavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::gps_navigation_unavailable() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.gps_navigation_unavailable)
  return has_gps_navigation_unavailable()
      ? *id_.gps_navigation_unavailable_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_gps_navigation_unavailable() {
  if (!has_gps_navigation_unavailable()) {
    clear_id();
    set_has_gps_navigation_unavailable();
    id_.gps_navigation_unavailable_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.gps_navigation_unavailable)
  return id_.gps_navigation_unavailable_;
}

// .google.protobuf.Empty gps_sensor_ok = 54;
inline bool Event::has_gps_sensor_ok() const {
  return id_case() == kGpsSensorOk;
}
inline void Event::set_has_gps_sensor_ok() {
  _oneof_case_[0] = kGpsSensorOk;
}
inline ::google::protobuf::Empty* Event::release_gps_sensor_ok() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.gps_sensor_ok)
  if (has_gps_sensor_ok()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.gps_sensor_ok_;
    id_.gps_sensor_ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::gps_sensor_ok() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.gps_sensor_ok)
  return has_gps_sensor_ok()
      ? *id_.gps_sensor_ok_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_gps_sensor_ok() {
  if (!has_gps_sensor_ok()) {
    clear_id();
    set_has_gps_sensor_ok();
    id_.gps_sensor_ok_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.gps_sensor_ok)
  return id_.gps_sensor_ok_;
}

// .google.protobuf.Empty gps_sensor_ko = 55;
inline bool Event::has_gps_sensor_ko() const {
  return id_case() == kGpsSensorKo;
}
inline void Event::set_has_gps_sensor_ko() {
  _oneof_case_[0] = kGpsSensorKo;
}
inline ::google::protobuf::Empty* Event::release_gps_sensor_ko() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.gps_sensor_ko)
  if (has_gps_sensor_ko()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.gps_sensor_ko_;
    id_.gps_sensor_ko_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::gps_sensor_ko() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.gps_sensor_ko)
  return has_gps_sensor_ko()
      ? *id_.gps_sensor_ko_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_gps_sensor_ko() {
  if (!has_gps_sensor_ko()) {
    clear_id();
    set_has_gps_sensor_ko();
    id_.gps_sensor_ko_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.gps_sensor_ko)
  return id_.gps_sensor_ko_;
}

// .google.protobuf.Empty heading_locked_ok = 56;
inline bool Event::has_heading_locked_ok() const {
  return id_case() == kHeadingLockedOk;
}
inline void Event::set_has_heading_locked_ok() {
  _oneof_case_[0] = kHeadingLockedOk;
}
inline ::google::protobuf::Empty* Event::release_heading_locked_ok() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.heading_locked_ok)
  if (has_heading_locked_ok()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.heading_locked_ok_;
    id_.heading_locked_ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::heading_locked_ok() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.heading_locked_ok)
  return has_heading_locked_ok()
      ? *id_.heading_locked_ok_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_heading_locked_ok() {
  if (!has_heading_locked_ok()) {
    clear_id();
    set_has_heading_locked_ok();
    id_.heading_locked_ok_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.heading_locked_ok)
  return id_.heading_locked_ok_;
}

// .google.protobuf.Empty heading_locked_ko = 57;
inline bool Event::has_heading_locked_ko() const {
  return id_case() == kHeadingLockedKo;
}
inline void Event::set_has_heading_locked_ko() {
  _oneof_case_[0] = kHeadingLockedKo;
}
inline ::google::protobuf::Empty* Event::release_heading_locked_ko() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.heading_locked_ko)
  if (has_heading_locked_ko()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.heading_locked_ko_;
    id_.heading_locked_ko_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::heading_locked_ko() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.heading_locked_ko)
  return has_heading_locked_ko()
      ? *id_.heading_locked_ko_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_heading_locked_ko() {
  if (!has_heading_locked_ko()) {
    clear_id();
    set_has_heading_locked_ko();
    id_.heading_locked_ko_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.heading_locked_ko)
  return id_.heading_locked_ko_;
}

// uint32 gps_satellites = 52;
inline bool Event::has_gps_satellites() const {
  return id_case() == kGpsSatellites;
}
inline void Event::set_has_gps_satellites() {
  _oneof_case_[0] = kGpsSatellites;
}
inline void Event::clear_gps_satellites() {
  if (has_gps_satellites()) {
    id_.gps_satellites_ = 0u;
    clear_has_id();
  }
}
inline ::google::protobuf::uint32 Event::gps_satellites() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.gps_satellites)
  if (has_gps_satellites()) {
    return id_.gps_satellites_;
  }
  return 0u;
}
inline void Event::set_gps_satellites(::google::protobuf::uint32 value) {
  if (!has_gps_satellites()) {
    clear_id();
    set_has_gps_satellites();
  }
  id_.gps_satellites_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.gps_satellites)
}

// .google.protobuf.Empty vision_navigation_ready = 58;
inline bool Event::has_vision_navigation_ready() const {
  return id_case() == kVisionNavigationReady;
}
inline void Event::set_has_vision_navigation_ready() {
  _oneof_case_[0] = kVisionNavigationReady;
}
inline ::google::protobuf::Empty* Event::release_vision_navigation_ready() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.vision_navigation_ready)
  if (has_vision_navigation_ready()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.vision_navigation_ready_;
    id_.vision_navigation_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::vision_navigation_ready() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.vision_navigation_ready)
  return has_vision_navigation_ready()
      ? *id_.vision_navigation_ready_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_vision_navigation_ready() {
  if (!has_vision_navigation_ready()) {
    clear_id();
    set_has_vision_navigation_ready();
    id_.vision_navigation_ready_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.vision_navigation_ready)
  return id_.vision_navigation_ready_;
}

// .google.protobuf.Empty vision_navigation_unavailable = 59;
inline bool Event::has_vision_navigation_unavailable() const {
  return id_case() == kVisionNavigationUnavailable;
}
inline void Event::set_has_vision_navigation_unavailable() {
  _oneof_case_[0] = kVisionNavigationUnavailable;
}
inline ::google::protobuf::Empty* Event::release_vision_navigation_unavailable() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.vision_navigation_unavailable)
  if (has_vision_navigation_unavailable()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.vision_navigation_unavailable_;
    id_.vision_navigation_unavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::vision_navigation_unavailable() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.vision_navigation_unavailable)
  return has_vision_navigation_unavailable()
      ? *id_.vision_navigation_unavailable_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_vision_navigation_unavailable() {
  if (!has_vision_navigation_unavailable()) {
    clear_id();
    set_has_vision_navigation_unavailable();
    id_.vision_navigation_unavailable_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.vision_navigation_unavailable)
  return id_.vision_navigation_unavailable_;
}

// .ColibryLite.Messages.WindStatus.Enum wind_status_changed = 70;
inline bool Event::has_wind_status_changed() const {
  return id_case() == kWindStatusChanged;
}
inline void Event::set_has_wind_status_changed() {
  _oneof_case_[0] = kWindStatusChanged;
}
inline void Event::clear_wind_status_changed() {
  if (has_wind_status_changed()) {
    id_.wind_status_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::WindStatus::Enum Event::wind_status_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.wind_status_changed)
  if (has_wind_status_changed()) {
    return static_cast< ::ColibryLite::Messages::WindStatus::Enum >(id_.wind_status_changed_);
  }
  return static_cast< ::ColibryLite::Messages::WindStatus::Enum >(0);
}
inline void Event::set_wind_status_changed(::ColibryLite::Messages::WindStatus::Enum value) {
  if (!has_wind_status_changed()) {
    clear_id();
    set_has_wind_status_changed();
  }
  id_.wind_status_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.wind_status_changed)
}

// .ColibryLite.Messages.DefectiveMotorId.Enum defective_motor_id_changed = 71;
inline bool Event::has_defective_motor_id_changed() const {
  return id_case() == kDefectiveMotorIdChanged;
}
inline void Event::set_has_defective_motor_id_changed() {
  _oneof_case_[0] = kDefectiveMotorIdChanged;
}
inline void Event::clear_defective_motor_id_changed() {
  if (has_defective_motor_id_changed()) {
    id_.defective_motor_id_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::DefectiveMotorId::Enum Event::defective_motor_id_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.defective_motor_id_changed)
  if (has_defective_motor_id_changed()) {
    return static_cast< ::ColibryLite::Messages::DefectiveMotorId::Enum >(id_.defective_motor_id_changed_);
  }
  return static_cast< ::ColibryLite::Messages::DefectiveMotorId::Enum >(0);
}
inline void Event::set_defective_motor_id_changed(::ColibryLite::Messages::DefectiveMotorId::Enum value) {
  if (!has_defective_motor_id_changed()) {
    clear_id();
    set_has_defective_motor_id_changed();
  }
  id_.defective_motor_id_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.defective_motor_id_changed)
}

// .ColibryLite.Messages.DefectiveMotorFailureType.Enum defective_motor_failure_type_changed = 72;
inline bool Event::has_defective_motor_failure_type_changed() const {
  return id_case() == kDefectiveMotorFailureTypeChanged;
}
inline void Event::set_has_defective_motor_failure_type_changed() {
  _oneof_case_[0] = kDefectiveMotorFailureTypeChanged;
}
inline void Event::clear_defective_motor_failure_type_changed() {
  if (has_defective_motor_failure_type_changed()) {
    id_.defective_motor_failure_type_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::DefectiveMotorFailureType::Enum Event::defective_motor_failure_type_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.defective_motor_failure_type_changed)
  if (has_defective_motor_failure_type_changed()) {
    return static_cast< ::ColibryLite::Messages::DefectiveMotorFailureType::Enum >(id_.defective_motor_failure_type_changed_);
  }
  return static_cast< ::ColibryLite::Messages::DefectiveMotorFailureType::Enum >(0);
}
inline void Event::set_defective_motor_failure_type_changed(::ColibryLite::Messages::DefectiveMotorFailureType::Enum value) {
  if (!has_defective_motor_failure_type_changed()) {
    clear_id();
    set_has_defective_motor_failure_type_changed();
  }
  id_.defective_motor_failure_type_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.defective_motor_failure_type_changed)
}

// .ColibryLite.Messages.ThreeLevelStatus.Enum vibration_level_changed = 73;
inline bool Event::has_vibration_level_changed() const {
  return id_case() == kVibrationLevelChanged;
}
inline void Event::set_has_vibration_level_changed() {
  _oneof_case_[0] = kVibrationLevelChanged;
}
inline void Event::clear_vibration_level_changed() {
  if (has_vibration_level_changed()) {
    id_.vibration_level_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::ThreeLevelStatus::Enum Event::vibration_level_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.vibration_level_changed)
  if (has_vibration_level_changed()) {
    return static_cast< ::ColibryLite::Messages::ThreeLevelStatus::Enum >(id_.vibration_level_changed_);
  }
  return static_cast< ::ColibryLite::Messages::ThreeLevelStatus::Enum >(0);
}
inline void Event::set_vibration_level_changed(::ColibryLite::Messages::ThreeLevelStatus::Enum value) {
  if (!has_vibration_level_changed()) {
    clear_id();
    set_has_vibration_level_changed();
  }
  id_.vibration_level_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.vibration_level_changed)
}

// .ColibryLite.Messages.ThreeLevelStatus.Enum propeller_icing_level_changed = 74;
inline bool Event::has_propeller_icing_level_changed() const {
  return id_case() == kPropellerIcingLevelChanged;
}
inline void Event::set_has_propeller_icing_level_changed() {
  _oneof_case_[0] = kPropellerIcingLevelChanged;
}
inline void Event::clear_propeller_icing_level_changed() {
  if (has_propeller_icing_level_changed()) {
    id_.propeller_icing_level_changed_ = 0;
    clear_has_id();
  }
}
inline ::ColibryLite::Messages::ThreeLevelStatus::Enum Event::propeller_icing_level_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.propeller_icing_level_changed)
  if (has_propeller_icing_level_changed()) {
    return static_cast< ::ColibryLite::Messages::ThreeLevelStatus::Enum >(id_.propeller_icing_level_changed_);
  }
  return static_cast< ::ColibryLite::Messages::ThreeLevelStatus::Enum >(0);
}
inline void Event::set_propeller_icing_level_changed(::ColibryLite::Messages::ThreeLevelStatus::Enum value) {
  if (!has_propeller_icing_level_changed()) {
    clear_id();
    set_has_propeller_icing_level_changed();
  }
  id_.propeller_icing_level_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.propeller_icing_level_changed)
}

// .google.protobuf.Empty magneto_not_calibrated = 80;
inline bool Event::has_magneto_not_calibrated() const {
  return id_case() == kMagnetoNotCalibrated;
}
inline void Event::set_has_magneto_not_calibrated() {
  _oneof_case_[0] = kMagnetoNotCalibrated;
}
inline ::google::protobuf::Empty* Event::release_magneto_not_calibrated() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_not_calibrated)
  if (has_magneto_not_calibrated()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_not_calibrated_;
    id_.magneto_not_calibrated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_not_calibrated() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_not_calibrated)
  return has_magneto_not_calibrated()
      ? *id_.magneto_not_calibrated_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_not_calibrated() {
  if (!has_magneto_not_calibrated()) {
    clear_id();
    set_has_magneto_not_calibrated();
    id_.magneto_not_calibrated_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_not_calibrated)
  return id_.magneto_not_calibrated_;
}

// .google.protobuf.Empty magneto_calibration_x_done = 81;
inline bool Event::has_magneto_calibration_x_done() const {
  return id_case() == kMagnetoCalibrationXDone;
}
inline void Event::set_has_magneto_calibration_x_done() {
  _oneof_case_[0] = kMagnetoCalibrationXDone;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_x_done() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_x_done)
  if (has_magneto_calibration_x_done()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_x_done_;
    id_.magneto_calibration_x_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_x_done() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_x_done)
  return has_magneto_calibration_x_done()
      ? *id_.magneto_calibration_x_done_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_x_done() {
  if (!has_magneto_calibration_x_done()) {
    clear_id();
    set_has_magneto_calibration_x_done();
    id_.magneto_calibration_x_done_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_x_done)
  return id_.magneto_calibration_x_done_;
}

// .google.protobuf.Empty magneto_calibration_y_done = 82;
inline bool Event::has_magneto_calibration_y_done() const {
  return id_case() == kMagnetoCalibrationYDone;
}
inline void Event::set_has_magneto_calibration_y_done() {
  _oneof_case_[0] = kMagnetoCalibrationYDone;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_y_done() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_y_done)
  if (has_magneto_calibration_y_done()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_y_done_;
    id_.magneto_calibration_y_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_y_done() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_y_done)
  return has_magneto_calibration_y_done()
      ? *id_.magneto_calibration_y_done_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_y_done() {
  if (!has_magneto_calibration_y_done()) {
    clear_id();
    set_has_magneto_calibration_y_done();
    id_.magneto_calibration_y_done_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_y_done)
  return id_.magneto_calibration_y_done_;
}

// .google.protobuf.Empty magneto_calibration_z_done = 83;
inline bool Event::has_magneto_calibration_z_done() const {
  return id_case() == kMagnetoCalibrationZDone;
}
inline void Event::set_has_magneto_calibration_z_done() {
  _oneof_case_[0] = kMagnetoCalibrationZDone;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_z_done() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_z_done)
  if (has_magneto_calibration_z_done()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_z_done_;
    id_.magneto_calibration_z_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_z_done() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_z_done)
  return has_magneto_calibration_z_done()
      ? *id_.magneto_calibration_z_done_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_z_done() {
  if (!has_magneto_calibration_z_done()) {
    clear_id();
    set_has_magneto_calibration_z_done();
    id_.magneto_calibration_z_done_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_z_done)
  return id_.magneto_calibration_z_done_;
}

// .google.protobuf.Empty magneto_calibration_aborted = 84;
inline bool Event::has_magneto_calibration_aborted() const {
  return id_case() == kMagnetoCalibrationAborted;
}
inline void Event::set_has_magneto_calibration_aborted() {
  _oneof_case_[0] = kMagnetoCalibrationAborted;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_aborted() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_aborted)
  if (has_magneto_calibration_aborted()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_aborted_;
    id_.magneto_calibration_aborted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_aborted() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_aborted)
  return has_magneto_calibration_aborted()
      ? *id_.magneto_calibration_aborted_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_aborted() {
  if (!has_magneto_calibration_aborted()) {
    clear_id();
    set_has_magneto_calibration_aborted();
    id_.magneto_calibration_aborted_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_aborted)
  return id_.magneto_calibration_aborted_;
}

// .google.protobuf.Empty magneto_calibration_failed = 85;
inline bool Event::has_magneto_calibration_failed() const {
  return id_case() == kMagnetoCalibrationFailed;
}
inline void Event::set_has_magneto_calibration_failed() {
  _oneof_case_[0] = kMagnetoCalibrationFailed;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_failed() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_failed)
  if (has_magneto_calibration_failed()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_failed_;
    id_.magneto_calibration_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_failed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_failed)
  return has_magneto_calibration_failed()
      ? *id_.magneto_calibration_failed_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_failed() {
  if (!has_magneto_calibration_failed()) {
    clear_id();
    set_has_magneto_calibration_failed();
    id_.magneto_calibration_failed_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_failed)
  return id_.magneto_calibration_failed_;
}

// .google.protobuf.Empty magneto_calibration_done = 86;
inline bool Event::has_magneto_calibration_done() const {
  return id_case() == kMagnetoCalibrationDone;
}
inline void Event::set_has_magneto_calibration_done() {
  _oneof_case_[0] = kMagnetoCalibrationDone;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_done() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_done)
  if (has_magneto_calibration_done()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_done_;
    id_.magneto_calibration_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_done() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_done)
  return has_magneto_calibration_done()
      ? *id_.magneto_calibration_done_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_done() {
  if (!has_magneto_calibration_done()) {
    clear_id();
    set_has_magneto_calibration_done();
    id_.magneto_calibration_done_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_done)
  return id_.magneto_calibration_done_;
}

// .google.protobuf.Empty magneto_calibration_required = 87;
inline bool Event::has_magneto_calibration_required() const {
  return id_case() == kMagnetoCalibrationRequired;
}
inline void Event::set_has_magneto_calibration_required() {
  _oneof_case_[0] = kMagnetoCalibrationRequired;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_required() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_required)
  if (has_magneto_calibration_required()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_required_;
    id_.magneto_calibration_required_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_required() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_required)
  return has_magneto_calibration_required()
      ? *id_.magneto_calibration_required_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_required() {
  if (!has_magneto_calibration_required()) {
    clear_id();
    set_has_magneto_calibration_required();
    id_.magneto_calibration_required_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_required)
  return id_.magneto_calibration_required_;
}

// .google.protobuf.Empty magneto_calibration_advised = 88;
inline bool Event::has_magneto_calibration_advised() const {
  return id_case() == kMagnetoCalibrationAdvised;
}
inline void Event::set_has_magneto_calibration_advised() {
  _oneof_case_[0] = kMagnetoCalibrationAdvised;
}
inline ::google::protobuf::Empty* Event::release_magneto_calibration_advised() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.magneto_calibration_advised)
  if (has_magneto_calibration_advised()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.magneto_calibration_advised_;
    id_.magneto_calibration_advised_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::magneto_calibration_advised() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.magneto_calibration_advised)
  return has_magneto_calibration_advised()
      ? *id_.magneto_calibration_advised_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_magneto_calibration_advised() {
  if (!has_magneto_calibration_advised()) {
    clear_id();
    set_has_magneto_calibration_advised();
    id_.magneto_calibration_advised_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.magneto_calibration_advised)
  return id_.magneto_calibration_advised_;
}

// .google.protobuf.Empty min_altitude_constrained = 90;
inline bool Event::has_min_altitude_constrained() const {
  return id_case() == kMinAltitudeConstrained;
}
inline void Event::set_has_min_altitude_constrained() {
  _oneof_case_[0] = kMinAltitudeConstrained;
}
inline ::google::protobuf::Empty* Event::release_min_altitude_constrained() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.min_altitude_constrained)
  if (has_min_altitude_constrained()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.min_altitude_constrained_;
    id_.min_altitude_constrained_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::min_altitude_constrained() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.min_altitude_constrained)
  return has_min_altitude_constrained()
      ? *id_.min_altitude_constrained_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_min_altitude_constrained() {
  if (!has_min_altitude_constrained()) {
    clear_id();
    set_has_min_altitude_constrained();
    id_.min_altitude_constrained_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.min_altitude_constrained)
  return id_.min_altitude_constrained_;
}

// .google.protobuf.Empty min_altitude_not_constrained = 91;
inline bool Event::has_min_altitude_not_constrained() const {
  return id_case() == kMinAltitudeNotConstrained;
}
inline void Event::set_has_min_altitude_not_constrained() {
  _oneof_case_[0] = kMinAltitudeNotConstrained;
}
inline ::google::protobuf::Empty* Event::release_min_altitude_not_constrained() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.min_altitude_not_constrained)
  if (has_min_altitude_not_constrained()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.min_altitude_not_constrained_;
    id_.min_altitude_not_constrained_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::min_altitude_not_constrained() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.min_altitude_not_constrained)
  return has_min_altitude_not_constrained()
      ? *id_.min_altitude_not_constrained_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_min_altitude_not_constrained() {
  if (!has_min_altitude_not_constrained()) {
    clear_id();
    set_has_min_altitude_not_constrained();
    id_.min_altitude_not_constrained_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.min_altitude_not_constrained)
  return id_.min_altitude_not_constrained_;
}

// uint32 defective_sensors_state_changed = 110;
inline bool Event::has_defective_sensors_state_changed() const {
  return id_case() == kDefectiveSensorsStateChanged;
}
inline void Event::set_has_defective_sensors_state_changed() {
  _oneof_case_[0] = kDefectiveSensorsStateChanged;
}
inline void Event::clear_defective_sensors_state_changed() {
  if (has_defective_sensors_state_changed()) {
    id_.defective_sensors_state_changed_ = 0u;
    clear_has_id();
  }
}
inline ::google::protobuf::uint32 Event::defective_sensors_state_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.defective_sensors_state_changed)
  if (has_defective_sensors_state_changed()) {
    return id_.defective_sensors_state_changed_;
  }
  return 0u;
}
inline void Event::set_defective_sensors_state_changed(::google::protobuf::uint32 value) {
  if (!has_defective_sensors_state_changed()) {
    clear_id();
    set_has_defective_sensors_state_changed();
  }
  id_.defective_sensors_state_changed_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.defective_sensors_state_changed)
}

// .DroneController.Messages.BatteryState battery_state_changed = 120;
inline bool Event::has_battery_state_changed() const {
  return id_case() == kBatteryStateChanged;
}
inline void Event::set_has_battery_state_changed() {
  _oneof_case_[0] = kBatteryStateChanged;
}
inline void Event::clear_battery_state_changed() {
  if (has_battery_state_changed()) {
    delete id_.battery_state_changed_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::BatteryState* Event::release_battery_state_changed() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.battery_state_changed)
  if (has_battery_state_changed()) {
    clear_has_id();
      ::DroneController::Messages::BatteryState* temp = id_.battery_state_changed_;
    id_.battery_state_changed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::BatteryState& Event::battery_state_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.battery_state_changed)
  return has_battery_state_changed()
      ? *id_.battery_state_changed_
      : *reinterpret_cast< ::DroneController::Messages::BatteryState*>(&::DroneController::Messages::_BatteryState_default_instance_);
}
inline ::DroneController::Messages::BatteryState* Event::mutable_battery_state_changed() {
  if (!has_battery_state_changed()) {
    clear_id();
    set_has_battery_state_changed();
    id_.battery_state_changed_ = CreateMaybeMessage< ::DroneController::Messages::BatteryState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.battery_state_changed)
  return id_.battery_state_changed_;
}

// .DroneController.Messages.BatteryRole battery_role_changed = 121;
inline bool Event::has_battery_role_changed() const {
  return id_case() == kBatteryRoleChanged;
}
inline void Event::set_has_battery_role_changed() {
  _oneof_case_[0] = kBatteryRoleChanged;
}
inline void Event::clear_battery_role_changed() {
  if (has_battery_role_changed()) {
    delete id_.battery_role_changed_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::BatteryRole* Event::release_battery_role_changed() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.battery_role_changed)
  if (has_battery_role_changed()) {
    clear_has_id();
      ::DroneController::Messages::BatteryRole* temp = id_.battery_role_changed_;
    id_.battery_role_changed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::BatteryRole& Event::battery_role_changed() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.battery_role_changed)
  return has_battery_role_changed()
      ? *id_.battery_role_changed_
      : *reinterpret_cast< ::DroneController::Messages::BatteryRole*>(&::DroneController::Messages::_BatteryRole_default_instance_);
}
inline ::DroneController::Messages::BatteryRole* Event::mutable_battery_role_changed() {
  if (!has_battery_role_changed()) {
    clear_id();
    set_has_battery_role_changed();
    id_.battery_role_changed_ = CreateMaybeMessage< ::DroneController::Messages::BatteryRole >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.battery_role_changed)
  return id_.battery_role_changed_;
}

// .DroneController.Messages.BatteryAlert.Enum battery_alert_too_hot = 122;
inline bool Event::has_battery_alert_too_hot() const {
  return id_case() == kBatteryAlertTooHot;
}
inline void Event::set_has_battery_alert_too_hot() {
  _oneof_case_[0] = kBatteryAlertTooHot;
}
inline void Event::clear_battery_alert_too_hot() {
  if (has_battery_alert_too_hot()) {
    id_.battery_alert_too_hot_ = 0;
    clear_has_id();
  }
}
inline ::DroneController::Messages::BatteryAlert::Enum Event::battery_alert_too_hot() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.battery_alert_too_hot)
  if (has_battery_alert_too_hot()) {
    return static_cast< ::DroneController::Messages::BatteryAlert::Enum >(id_.battery_alert_too_hot_);
  }
  return static_cast< ::DroneController::Messages::BatteryAlert::Enum >(0);
}
inline void Event::set_battery_alert_too_hot(::DroneController::Messages::BatteryAlert::Enum value) {
  if (!has_battery_alert_too_hot()) {
    clear_id();
    set_has_battery_alert_too_hot();
  }
  id_.battery_alert_too_hot_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.battery_alert_too_hot)
}

// .DroneController.Messages.BatteryAlert.Enum battery_alert_too_cold = 123;
inline bool Event::has_battery_alert_too_cold() const {
  return id_case() == kBatteryAlertTooCold;
}
inline void Event::set_has_battery_alert_too_cold() {
  _oneof_case_[0] = kBatteryAlertTooCold;
}
inline void Event::clear_battery_alert_too_cold() {
  if (has_battery_alert_too_cold()) {
    id_.battery_alert_too_cold_ = 0;
    clear_has_id();
  }
}
inline ::DroneController::Messages::BatteryAlert::Enum Event::battery_alert_too_cold() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.battery_alert_too_cold)
  if (has_battery_alert_too_cold()) {
    return static_cast< ::DroneController::Messages::BatteryAlert::Enum >(id_.battery_alert_too_cold_);
  }
  return static_cast< ::DroneController::Messages::BatteryAlert::Enum >(0);
}
inline void Event::set_battery_alert_too_cold(::DroneController::Messages::BatteryAlert::Enum value) {
  if (!has_battery_alert_too_cold()) {
    clear_id();
    set_has_battery_alert_too_cold();
  }
  id_.battery_alert_too_cold_ = value;
  // @@protoc_insertion_point(field_set:DroneController.Messages.Event.battery_alert_too_cold)
}

// .DroneController.Messages.BatteryHealth battery_health = 124;
inline bool Event::has_battery_health() const {
  return id_case() == kBatteryHealth;
}
inline void Event::set_has_battery_health() {
  _oneof_case_[0] = kBatteryHealth;
}
inline void Event::clear_battery_health() {
  if (has_battery_health()) {
    delete id_.battery_health_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::BatteryHealth* Event::release_battery_health() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.battery_health)
  if (has_battery_health()) {
    clear_has_id();
      ::DroneController::Messages::BatteryHealth* temp = id_.battery_health_;
    id_.battery_health_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::BatteryHealth& Event::battery_health() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.battery_health)
  return has_battery_health()
      ? *id_.battery_health_
      : *reinterpret_cast< ::DroneController::Messages::BatteryHealth*>(&::DroneController::Messages::_BatteryHealth_default_instance_);
}
inline ::DroneController::Messages::BatteryHealth* Event::mutable_battery_health() {
  if (!has_battery_health()) {
    clear_id();
    set_has_battery_health();
    id_.battery_health_ = CreateMaybeMessage< ::DroneController::Messages::BatteryHealth >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.battery_health)
  return id_.battery_health_;
}

// .DroneController.Messages.Tick tick = 130;
inline bool Event::has_tick() const {
  return id_case() == kTick;
}
inline void Event::set_has_tick() {
  _oneof_case_[0] = kTick;
}
inline void Event::clear_tick() {
  if (has_tick()) {
    delete id_.tick_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::Tick* Event::release_tick() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.tick)
  if (has_tick()) {
    clear_has_id();
      ::DroneController::Messages::Tick* temp = id_.tick_;
    id_.tick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::Tick& Event::tick() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.tick)
  return has_tick()
      ? *id_.tick_
      : *reinterpret_cast< ::DroneController::Messages::Tick*>(&::DroneController::Messages::_Tick_default_instance_);
}
inline ::DroneController::Messages::Tick* Event::mutable_tick() {
  if (!has_tick()) {
    clear_id();
    set_has_tick();
    id_.tick_ = CreateMaybeMessage< ::DroneController::Messages::Tick >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.tick)
  return id_.tick_;
}

// .google.protobuf.Empty motor_down_control_ready = 140;
inline bool Event::has_motor_down_control_ready() const {
  return id_case() == kMotorDownControlReady;
}
inline void Event::set_has_motor_down_control_ready() {
  _oneof_case_[0] = kMotorDownControlReady;
}
inline ::google::protobuf::Empty* Event::release_motor_down_control_ready() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motor_down_control_ready)
  if (has_motor_down_control_ready()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motor_down_control_ready_;
    id_.motor_down_control_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motor_down_control_ready() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motor_down_control_ready)
  return has_motor_down_control_ready()
      ? *id_.motor_down_control_ready_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motor_down_control_ready() {
  if (!has_motor_down_control_ready()) {
    clear_id();
    set_has_motor_down_control_ready();
    id_.motor_down_control_ready_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motor_down_control_ready)
  return id_.motor_down_control_ready_;
}

// .google.protobuf.Empty motor_down_control_unavailable = 141;
inline bool Event::has_motor_down_control_unavailable() const {
  return id_case() == kMotorDownControlUnavailable;
}
inline void Event::set_has_motor_down_control_unavailable() {
  _oneof_case_[0] = kMotorDownControlUnavailable;
}
inline ::google::protobuf::Empty* Event::release_motor_down_control_unavailable() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.motor_down_control_unavailable)
  if (has_motor_down_control_unavailable()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.motor_down_control_unavailable_;
    id_.motor_down_control_unavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::motor_down_control_unavailable() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.motor_down_control_unavailable)
  return has_motor_down_control_unavailable()
      ? *id_.motor_down_control_unavailable_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_motor_down_control_unavailable() {
  if (!has_motor_down_control_unavailable()) {
    clear_id();
    set_has_motor_down_control_unavailable();
    id_.motor_down_control_unavailable_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.motor_down_control_unavailable)
  return id_.motor_down_control_unavailable_;
}

// .google.protobuf.Empty single_stall_available = 142;
inline bool Event::has_single_stall_available() const {
  return id_case() == kSingleStallAvailable;
}
inline void Event::set_has_single_stall_available() {
  _oneof_case_[0] = kSingleStallAvailable;
}
inline ::google::protobuf::Empty* Event::release_single_stall_available() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.single_stall_available)
  if (has_single_stall_available()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.single_stall_available_;
    id_.single_stall_available_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::single_stall_available() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.single_stall_available)
  return has_single_stall_available()
      ? *id_.single_stall_available_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_single_stall_available() {
  if (!has_single_stall_available()) {
    clear_id();
    set_has_single_stall_available();
    id_.single_stall_available_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.single_stall_available)
  return id_.single_stall_available_;
}

// .google.protobuf.Empty single_stall_unavailable = 143;
inline bool Event::has_single_stall_unavailable() const {
  return id_case() == kSingleStallUnavailable;
}
inline void Event::set_has_single_stall_unavailable() {
  _oneof_case_[0] = kSingleStallUnavailable;
}
inline ::google::protobuf::Empty* Event::release_single_stall_unavailable() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.single_stall_unavailable)
  if (has_single_stall_unavailable()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.single_stall_unavailable_;
    id_.single_stall_unavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::single_stall_unavailable() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.single_stall_unavailable)
  return has_single_stall_unavailable()
      ? *id_.single_stall_unavailable_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_single_stall_unavailable() {
  if (!has_single_stall_unavailable()) {
    clear_id();
    set_has_single_stall_unavailable();
    id_.single_stall_unavailable_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.single_stall_unavailable)
  return id_.single_stall_unavailable_;
}

// .DroneController.Messages.InitStatus init_ok = 1000;
inline bool Event::has_init_ok() const {
  return id_case() == kInitOk;
}
inline void Event::set_has_init_ok() {
  _oneof_case_[0] = kInitOk;
}
inline void Event::clear_init_ok() {
  if (has_init_ok()) {
    delete id_.init_ok_;
    clear_has_id();
  }
}
inline ::DroneController::Messages::InitStatus* Event::release_init_ok() {
  // @@protoc_insertion_point(field_release:DroneController.Messages.Event.init_ok)
  if (has_init_ok()) {
    clear_has_id();
      ::DroneController::Messages::InitStatus* temp = id_.init_ok_;
    id_.init_ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DroneController::Messages::InitStatus& Event::init_ok() const {
  // @@protoc_insertion_point(field_get:DroneController.Messages.Event.init_ok)
  return has_init_ok()
      ? *id_.init_ok_
      : *reinterpret_cast< ::DroneController::Messages::InitStatus*>(&::DroneController::Messages::_InitStatus_default_instance_);
}
inline ::DroneController::Messages::InitStatus* Event::mutable_init_ok() {
  if (!has_init_ok()) {
    clear_id();
    set_has_init_ok();
    id_.init_ok_ = CreateMaybeMessage< ::DroneController::Messages::InitStatus >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DroneController.Messages.Event.init_ok)
  return id_.init_ok_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace DroneController

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_drone_5fcontroller_2fdrone_5fcontroller_2eproto
