// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/antiflicker.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fantiflicker_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fantiflicker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fantiflicker_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fantiflicker_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fantiflicker_2eproto();
namespace arsdk {
namespace antiflicker {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_GetState;
class Command_GetStateDefaultTypeInternal;
extern Command_GetStateDefaultTypeInternal _Command_GetState_default_instance_;
class Command_SetMode;
class Command_SetModeDefaultTypeInternal;
extern Command_SetModeDefaultTypeInternal _Command_SetMode_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_State;
class Event_StateDefaultTypeInternal;
extern Event_StateDefaultTypeInternal _Event_State_default_instance_;
}  // namespace antiflicker
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::antiflicker::Capabilities* Arena::CreateMaybeMessage<::arsdk::antiflicker::Capabilities>(Arena*);
template<> ::arsdk::antiflicker::Command* Arena::CreateMaybeMessage<::arsdk::antiflicker::Command>(Arena*);
template<> ::arsdk::antiflicker::Command_GetState* Arena::CreateMaybeMessage<::arsdk::antiflicker::Command_GetState>(Arena*);
template<> ::arsdk::antiflicker::Command_SetMode* Arena::CreateMaybeMessage<::arsdk::antiflicker::Command_SetMode>(Arena*);
template<> ::arsdk::antiflicker::Event* Arena::CreateMaybeMessage<::arsdk::antiflicker::Event>(Arena*);
template<> ::arsdk::antiflicker::Event_State* Arena::CreateMaybeMessage<::arsdk::antiflicker::Event_State>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace antiflicker {

enum Mode {
  MODE_DISABLED = 0,
  MODE_AUTOMATIC = 1,
  MODE_50_HZ = 2,
  MODE_60_HZ = 3,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Mode_IsValid(int value);
const Mode Mode_MIN = MODE_DISABLED;
const Mode Mode_MAX = MODE_60_HZ;
const int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mode_descriptor();
inline const ::std::string& Mode_Name(Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mode_descriptor(), value);
}
inline bool Mode_Parse(
    const ::std::string& name, Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
enum Frequency {
  FREQUENCY_50_HZ = 0,
  FREQUENCY_60_HZ = 1,
  Frequency_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Frequency_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Frequency_IsValid(int value);
const Frequency Frequency_MIN = FREQUENCY_50_HZ;
const Frequency Frequency_MAX = FREQUENCY_60_HZ;
const int Frequency_ARRAYSIZE = Frequency_MAX + 1;

const ::google::protobuf::EnumDescriptor* Frequency_descriptor();
inline const ::std::string& Frequency_Name(Frequency value) {
  return ::google::protobuf::internal::NameOfEnum(
    Frequency_descriptor(), value);
}
inline bool Frequency_Parse(
    const ::std::string& name, Frequency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Frequency>(
    Frequency_descriptor(), name, value);
}
// ===================================================================

class Command_GetState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antiflicker.Command.GetState) */ {
 public:
  Command_GetState();
  virtual ~Command_GetState();

  Command_GetState(const Command_GetState& from);

  inline Command_GetState& operator=(const Command_GetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_GetState(Command_GetState&& from) noexcept
    : Command_GetState() {
    *this = ::std::move(from);
  }

  inline Command_GetState& operator=(Command_GetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_GetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_GetState* internal_default_instance() {
    return reinterpret_cast<const Command_GetState*>(
               &_Command_GetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_GetState* other);
  friend void swap(Command_GetState& a, Command_GetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_GetState* New() const final {
    return CreateMaybeMessage<Command_GetState>(nullptr);
  }

  Command_GetState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_GetState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_GetState& from);
  void MergeFrom(const Command_GetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_GetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool include_default_capabilities = 1;
  void clear_include_default_capabilities();
  static const int kIncludeDefaultCapabilitiesFieldNumber = 1;
  bool include_default_capabilities() const;
  void set_include_default_capabilities(bool value);

  // @@protoc_insertion_point(class_scope:arsdk.antiflicker.Command.GetState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_default_capabilities_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fantiflicker_2eproto;
};
// -------------------------------------------------------------------

class Command_SetMode :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antiflicker.Command.SetMode) */ {
 public:
  Command_SetMode();
  virtual ~Command_SetMode();

  Command_SetMode(const Command_SetMode& from);

  inline Command_SetMode& operator=(const Command_SetMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetMode(Command_SetMode&& from) noexcept
    : Command_SetMode() {
    *this = ::std::move(from);
  }

  inline Command_SetMode& operator=(Command_SetMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetMode* internal_default_instance() {
    return reinterpret_cast<const Command_SetMode*>(
               &_Command_SetMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command_SetMode* other);
  friend void swap(Command_SetMode& a, Command_SetMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetMode* New() const final {
    return CreateMaybeMessage<Command_SetMode>(nullptr);
  }

  Command_SetMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetMode& from);
  void MergeFrom(const Command_SetMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.antiflicker.Mode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::arsdk::antiflicker::Mode mode() const;
  void set_mode(::arsdk::antiflicker::Mode value);

  // @@protoc_insertion_point(class_scope:arsdk.antiflicker.Command.SetMode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fantiflicker_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antiflicker.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kGetState = 16,
    kSetMode = 17,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_GetState GetState;
  typedef Command_SetMode SetMode;

  // accessors -------------------------------------------------------

  // .arsdk.antiflicker.Command.GetState get_state = 16;
  bool has_get_state() const;
  void clear_get_state();
  static const int kGetStateFieldNumber = 16;
  const ::arsdk::antiflicker::Command_GetState& get_state() const;
  ::arsdk::antiflicker::Command_GetState* release_get_state();
  ::arsdk::antiflicker::Command_GetState* mutable_get_state();
  void set_allocated_get_state(::arsdk::antiflicker::Command_GetState* get_state);

  // .arsdk.antiflicker.Command.SetMode set_mode = 17;
  bool has_set_mode() const;
  void clear_set_mode();
  static const int kSetModeFieldNumber = 17;
  const ::arsdk::antiflicker::Command_SetMode& set_mode() const;
  ::arsdk::antiflicker::Command_SetMode* release_set_mode();
  ::arsdk::antiflicker::Command_SetMode* mutable_set_mode();
  void set_allocated_set_mode(::arsdk::antiflicker::Command_SetMode* set_mode);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.antiflicker.Command)
 private:
  class HasBitSetters;
  void set_has_get_state();
  void set_has_set_mode();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::antiflicker::Command_GetState* get_state_;
    ::arsdk::antiflicker::Command_SetMode* set_mode_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fantiflicker_2eproto;
};
// -------------------------------------------------------------------

class Event_State :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antiflicker.Event.State) */ {
 public:
  Event_State();
  virtual ~Event_State();

  Event_State(const Event_State& from);

  inline Event_State& operator=(const Event_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State(Event_State&& from) noexcept
    : Event_State() {
    *this = ::std::move(from);
  }

  inline Event_State& operator=(Event_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State& default_instance();

  enum ModeCase {
    kDisabled = 2,
    kFixed = 3,
    kAutomatic = 4,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State* internal_default_instance() {
    return reinterpret_cast<const Event_State*>(
               &_Event_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Event_State* other);
  friend void swap(Event_State& a, Event_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State* New() const final {
    return CreateMaybeMessage<Event_State>(nullptr);
  }

  Event_State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State& from);
  void MergeFrom(const Event_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.antiflicker.Capabilities default_capabilities = 1;
  bool has_default_capabilities() const;
  void clear_default_capabilities();
  static const int kDefaultCapabilitiesFieldNumber = 1;
  const ::arsdk::antiflicker::Capabilities& default_capabilities() const;
  ::arsdk::antiflicker::Capabilities* release_default_capabilities();
  ::arsdk::antiflicker::Capabilities* mutable_default_capabilities();
  void set_allocated_default_capabilities(::arsdk::antiflicker::Capabilities* default_capabilities);

  // .google.protobuf.Empty disabled = 2;
  bool has_disabled() const;
  void clear_disabled();
  static const int kDisabledFieldNumber = 2;
  const ::google::protobuf::Empty& disabled() const;
  ::google::protobuf::Empty* release_disabled();
  ::google::protobuf::Empty* mutable_disabled();
  void set_allocated_disabled(::google::protobuf::Empty* disabled);

  // .arsdk.antiflicker.Frequency fixed = 3;
  private:
  bool has_fixed() const;
  public:
  void clear_fixed();
  static const int kFixedFieldNumber = 3;
  ::arsdk::antiflicker::Frequency fixed() const;
  void set_fixed(::arsdk::antiflicker::Frequency value);

  // .arsdk.antiflicker.Frequency automatic = 4;
  private:
  bool has_automatic() const;
  public:
  void clear_automatic();
  static const int kAutomaticFieldNumber = 4;
  ::arsdk::antiflicker::Frequency automatic() const;
  void set_automatic(::arsdk::antiflicker::Frequency value);

  void clear_mode();
  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.antiflicker.Event.State)
 private:
  class HasBitSetters;
  void set_has_disabled();
  void set_has_fixed();
  void set_has_automatic();

  inline bool has_mode() const;
  inline void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::antiflicker::Capabilities* default_capabilities_;
  union ModeUnion {
    ModeUnion() {}
    ::google::protobuf::Empty* disabled_;
    int fixed_;
    int automatic_;
  } mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fantiflicker_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antiflicker.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kState = 16,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_State State;

  // accessors -------------------------------------------------------

  // .arsdk.antiflicker.Event.State state = 16;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 16;
  const ::arsdk::antiflicker::Event_State& state() const;
  ::arsdk::antiflicker::Event_State* release_state();
  ::arsdk::antiflicker::Event_State* mutable_state();
  void set_allocated_state(::arsdk::antiflicker::Event_State* state);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.antiflicker.Event)
 private:
  class HasBitSetters;
  void set_has_state();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::antiflicker::Event_State* state_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fantiflicker_2eproto;
};
// -------------------------------------------------------------------

class Capabilities :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antiflicker.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Capabilities* other);
  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities* New() const final {
    return CreateMaybeMessage<Capabilities>(nullptr);
  }

  Capabilities* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .arsdk.antiflicker.Mode supported_modes = 1;
  int supported_modes_size() const;
  void clear_supported_modes();
  static const int kSupportedModesFieldNumber = 1;
  ::arsdk::antiflicker::Mode supported_modes(int index) const;
  void set_supported_modes(int index, ::arsdk::antiflicker::Mode value);
  void add_supported_modes(::arsdk::antiflicker::Mode value);
  const ::google::protobuf::RepeatedField<int>& supported_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_modes();

  // @@protoc_insertion_point(class_scope:arsdk.antiflicker.Capabilities)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supported_modes_;
  mutable std::atomic<int> _supported_modes_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fantiflicker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_GetState

// bool include_default_capabilities = 1;
inline void Command_GetState::clear_include_default_capabilities() {
  include_default_capabilities_ = false;
}
inline bool Command_GetState::include_default_capabilities() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Command.GetState.include_default_capabilities)
  return include_default_capabilities_;
}
inline void Command_GetState::set_include_default_capabilities(bool value) {
  
  include_default_capabilities_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antiflicker.Command.GetState.include_default_capabilities)
}

// -------------------------------------------------------------------

// Command_SetMode

// .arsdk.antiflicker.Mode mode = 1;
inline void Command_SetMode::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::antiflicker::Mode Command_SetMode::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Command.SetMode.mode)
  return static_cast< ::arsdk::antiflicker::Mode >(mode_);
}
inline void Command_SetMode::set_mode(::arsdk::antiflicker::Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antiflicker.Command.SetMode.mode)
}

// -------------------------------------------------------------------

// Command

// .arsdk.antiflicker.Command.GetState get_state = 16;
inline bool Command::has_get_state() const {
  return id_case() == kGetState;
}
inline void Command::set_has_get_state() {
  _oneof_case_[0] = kGetState;
}
inline void Command::clear_get_state() {
  if (has_get_state()) {
    delete id_.get_state_;
    clear_has_id();
  }
}
inline ::arsdk::antiflicker::Command_GetState* Command::release_get_state() {
  // @@protoc_insertion_point(field_release:arsdk.antiflicker.Command.get_state)
  if (has_get_state()) {
    clear_has_id();
      ::arsdk::antiflicker::Command_GetState* temp = id_.get_state_;
    id_.get_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::antiflicker::Command_GetState& Command::get_state() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Command.get_state)
  return has_get_state()
      ? *id_.get_state_
      : *reinterpret_cast< ::arsdk::antiflicker::Command_GetState*>(&::arsdk::antiflicker::_Command_GetState_default_instance_);
}
inline ::arsdk::antiflicker::Command_GetState* Command::mutable_get_state() {
  if (!has_get_state()) {
    clear_id();
    set_has_get_state();
    id_.get_state_ = CreateMaybeMessage< ::arsdk::antiflicker::Command_GetState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antiflicker.Command.get_state)
  return id_.get_state_;
}

// .arsdk.antiflicker.Command.SetMode set_mode = 17;
inline bool Command::has_set_mode() const {
  return id_case() == kSetMode;
}
inline void Command::set_has_set_mode() {
  _oneof_case_[0] = kSetMode;
}
inline void Command::clear_set_mode() {
  if (has_set_mode()) {
    delete id_.set_mode_;
    clear_has_id();
  }
}
inline ::arsdk::antiflicker::Command_SetMode* Command::release_set_mode() {
  // @@protoc_insertion_point(field_release:arsdk.antiflicker.Command.set_mode)
  if (has_set_mode()) {
    clear_has_id();
      ::arsdk::antiflicker::Command_SetMode* temp = id_.set_mode_;
    id_.set_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::antiflicker::Command_SetMode& Command::set_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Command.set_mode)
  return has_set_mode()
      ? *id_.set_mode_
      : *reinterpret_cast< ::arsdk::antiflicker::Command_SetMode*>(&::arsdk::antiflicker::_Command_SetMode_default_instance_);
}
inline ::arsdk::antiflicker::Command_SetMode* Command::mutable_set_mode() {
  if (!has_set_mode()) {
    clear_id();
    set_has_set_mode();
    id_.set_mode_ = CreateMaybeMessage< ::arsdk::antiflicker::Command_SetMode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antiflicker.Command.set_mode)
  return id_.set_mode_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_State

// .arsdk.antiflicker.Capabilities default_capabilities = 1;
inline bool Event_State::has_default_capabilities() const {
  return this != internal_default_instance() && default_capabilities_ != nullptr;
}
inline void Event_State::clear_default_capabilities() {
  if (GetArenaNoVirtual() == nullptr && default_capabilities_ != nullptr) {
    delete default_capabilities_;
  }
  default_capabilities_ = nullptr;
}
inline const ::arsdk::antiflicker::Capabilities& Event_State::default_capabilities() const {
  const ::arsdk::antiflicker::Capabilities* p = default_capabilities_;
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Event.State.default_capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::antiflicker::Capabilities*>(
      &::arsdk::antiflicker::_Capabilities_default_instance_);
}
inline ::arsdk::antiflicker::Capabilities* Event_State::release_default_capabilities() {
  // @@protoc_insertion_point(field_release:arsdk.antiflicker.Event.State.default_capabilities)
  
  ::arsdk::antiflicker::Capabilities* temp = default_capabilities_;
  default_capabilities_ = nullptr;
  return temp;
}
inline ::arsdk::antiflicker::Capabilities* Event_State::mutable_default_capabilities() {
  
  if (default_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::antiflicker::Capabilities>(GetArenaNoVirtual());
    default_capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antiflicker.Event.State.default_capabilities)
  return default_capabilities_;
}
inline void Event_State::set_allocated_default_capabilities(::arsdk::antiflicker::Capabilities* default_capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_capabilities_;
  }
  if (default_capabilities) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  default_capabilities_ = default_capabilities;
  // @@protoc_insertion_point(field_set_allocated:arsdk.antiflicker.Event.State.default_capabilities)
}

// .google.protobuf.Empty disabled = 2;
inline bool Event_State::has_disabled() const {
  return mode_case() == kDisabled;
}
inline void Event_State::set_has_disabled() {
  _oneof_case_[0] = kDisabled;
}
inline ::google::protobuf::Empty* Event_State::release_disabled() {
  // @@protoc_insertion_point(field_release:arsdk.antiflicker.Event.State.disabled)
  if (has_disabled()) {
    clear_has_mode();
      ::google::protobuf::Empty* temp = mode_.disabled_;
    mode_.disabled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event_State::disabled() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Event.State.disabled)
  return has_disabled()
      ? *mode_.disabled_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event_State::mutable_disabled() {
  if (!has_disabled()) {
    clear_mode();
    set_has_disabled();
    mode_.disabled_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antiflicker.Event.State.disabled)
  return mode_.disabled_;
}

// .arsdk.antiflicker.Frequency fixed = 3;
inline bool Event_State::has_fixed() const {
  return mode_case() == kFixed;
}
inline void Event_State::set_has_fixed() {
  _oneof_case_[0] = kFixed;
}
inline void Event_State::clear_fixed() {
  if (has_fixed()) {
    mode_.fixed_ = 0;
    clear_has_mode();
  }
}
inline ::arsdk::antiflicker::Frequency Event_State::fixed() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Event.State.fixed)
  if (has_fixed()) {
    return static_cast< ::arsdk::antiflicker::Frequency >(mode_.fixed_);
  }
  return static_cast< ::arsdk::antiflicker::Frequency >(0);
}
inline void Event_State::set_fixed(::arsdk::antiflicker::Frequency value) {
  if (!has_fixed()) {
    clear_mode();
    set_has_fixed();
  }
  mode_.fixed_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antiflicker.Event.State.fixed)
}

// .arsdk.antiflicker.Frequency automatic = 4;
inline bool Event_State::has_automatic() const {
  return mode_case() == kAutomatic;
}
inline void Event_State::set_has_automatic() {
  _oneof_case_[0] = kAutomatic;
}
inline void Event_State::clear_automatic() {
  if (has_automatic()) {
    mode_.automatic_ = 0;
    clear_has_mode();
  }
}
inline ::arsdk::antiflicker::Frequency Event_State::automatic() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Event.State.automatic)
  if (has_automatic()) {
    return static_cast< ::arsdk::antiflicker::Frequency >(mode_.automatic_);
  }
  return static_cast< ::arsdk::antiflicker::Frequency >(0);
}
inline void Event_State::set_automatic(::arsdk::antiflicker::Frequency value) {
  if (!has_automatic()) {
    clear_mode();
    set_has_automatic();
  }
  mode_.automatic_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antiflicker.Event.State.automatic)
}

inline bool Event_State::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void Event_State::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline Event_State::ModeCase Event_State::mode_case() const {
  return Event_State::ModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .arsdk.antiflicker.Event.State state = 16;
inline bool Event::has_state() const {
  return id_case() == kState;
}
inline void Event::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Event::clear_state() {
  if (has_state()) {
    delete id_.state_;
    clear_has_id();
  }
}
inline ::arsdk::antiflicker::Event_State* Event::release_state() {
  // @@protoc_insertion_point(field_release:arsdk.antiflicker.Event.state)
  if (has_state()) {
    clear_has_id();
      ::arsdk::antiflicker::Event_State* temp = id_.state_;
    id_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::antiflicker::Event_State& Event::state() const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Event.state)
  return has_state()
      ? *id_.state_
      : *reinterpret_cast< ::arsdk::antiflicker::Event_State*>(&::arsdk::antiflicker::_Event_State_default_instance_);
}
inline ::arsdk::antiflicker::Event_State* Event::mutable_state() {
  if (!has_state()) {
    clear_id();
    set_has_state();
    id_.state_ = CreateMaybeMessage< ::arsdk::antiflicker::Event_State >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antiflicker.Event.state)
  return id_.state_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Capabilities

// repeated .arsdk.antiflicker.Mode supported_modes = 1;
inline int Capabilities::supported_modes_size() const {
  return supported_modes_.size();
}
inline void Capabilities::clear_supported_modes() {
  supported_modes_.Clear();
}
inline ::arsdk::antiflicker::Mode Capabilities::supported_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.antiflicker.Capabilities.supported_modes)
  return static_cast< ::arsdk::antiflicker::Mode >(supported_modes_.Get(index));
}
inline void Capabilities::set_supported_modes(int index, ::arsdk::antiflicker::Mode value) {
  supported_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.antiflicker.Capabilities.supported_modes)
}
inline void Capabilities::add_supported_modes(::arsdk::antiflicker::Mode value) {
  supported_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.antiflicker.Capabilities.supported_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities::supported_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.antiflicker.Capabilities.supported_modes)
  return supported_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities::mutable_supported_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.antiflicker.Capabilities.supported_modes)
  return &supported_modes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace antiflicker
}  // namespace arsdk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::arsdk::antiflicker::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::antiflicker::Mode>() {
  return ::arsdk::antiflicker::Mode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::antiflicker::Frequency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::antiflicker::Frequency>() {
  return ::arsdk::antiflicker::Frequency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fantiflicker_2eproto
