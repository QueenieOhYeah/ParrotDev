// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/network.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fnetwork_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fnetwork_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fnetwork_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fnetwork_2eproto();
namespace arsdk {
namespace network {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class CellularMaxBitrate;
class CellularMaxBitrateDefaultTypeInternal;
extern CellularMaxBitrateDefaultTypeInternal _CellularMaxBitrate_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_GetState;
class Command_GetStateDefaultTypeInternal;
extern Command_GetStateDefaultTypeInternal _Command_GetState_default_instance_;
class Command_SetCellularMaxBitrate;
class Command_SetCellularMaxBitrateDefaultTypeInternal;
extern Command_SetCellularMaxBitrateDefaultTypeInternal _Command_SetCellularMaxBitrate_default_instance_;
class Command_SetDirectConnection;
class Command_SetDirectConnectionDefaultTypeInternal;
extern Command_SetDirectConnectionDefaultTypeInternal _Command_SetDirectConnection_default_instance_;
class Command_SetRoutingPolicy;
class Command_SetRoutingPolicyDefaultTypeInternal;
extern Command_SetRoutingPolicyDefaultTypeInternal _Command_SetRoutingPolicy_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_State;
class Event_StateDefaultTypeInternal;
extern Event_StateDefaultTypeInternal _Event_State_default_instance_;
class GlobalLinkQuality;
class GlobalLinkQualityDefaultTypeInternal;
extern GlobalLinkQualityDefaultTypeInternal _GlobalLinkQuality_default_instance_;
class LinksStatus;
class LinksStatusDefaultTypeInternal;
extern LinksStatusDefaultTypeInternal _LinksStatus_default_instance_;
class LinksStatus_LinkInfo;
class LinksStatus_LinkInfoDefaultTypeInternal;
extern LinksStatus_LinkInfoDefaultTypeInternal _LinksStatus_LinkInfo_default_instance_;
class RoutingInfo;
class RoutingInfoDefaultTypeInternal;
extern RoutingInfoDefaultTypeInternal _RoutingInfo_default_instance_;
}  // namespace network
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::network::Capabilities* Arena::CreateMaybeMessage<::arsdk::network::Capabilities>(Arena*);
template<> ::arsdk::network::CellularMaxBitrate* Arena::CreateMaybeMessage<::arsdk::network::CellularMaxBitrate>(Arena*);
template<> ::arsdk::network::Command* Arena::CreateMaybeMessage<::arsdk::network::Command>(Arena*);
template<> ::arsdk::network::Command_GetState* Arena::CreateMaybeMessage<::arsdk::network::Command_GetState>(Arena*);
template<> ::arsdk::network::Command_SetCellularMaxBitrate* Arena::CreateMaybeMessage<::arsdk::network::Command_SetCellularMaxBitrate>(Arena*);
template<> ::arsdk::network::Command_SetDirectConnection* Arena::CreateMaybeMessage<::arsdk::network::Command_SetDirectConnection>(Arena*);
template<> ::arsdk::network::Command_SetRoutingPolicy* Arena::CreateMaybeMessage<::arsdk::network::Command_SetRoutingPolicy>(Arena*);
template<> ::arsdk::network::Event* Arena::CreateMaybeMessage<::arsdk::network::Event>(Arena*);
template<> ::arsdk::network::Event_State* Arena::CreateMaybeMessage<::arsdk::network::Event_State>(Arena*);
template<> ::arsdk::network::GlobalLinkQuality* Arena::CreateMaybeMessage<::arsdk::network::GlobalLinkQuality>(Arena*);
template<> ::arsdk::network::LinksStatus* Arena::CreateMaybeMessage<::arsdk::network::LinksStatus>(Arena*);
template<> ::arsdk::network::LinksStatus_LinkInfo* Arena::CreateMaybeMessage<::arsdk::network::LinksStatus_LinkInfo>(Arena*);
template<> ::arsdk::network::RoutingInfo* Arena::CreateMaybeMessage<::arsdk::network::RoutingInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace network {

enum RoutingPolicy {
  ROUTING_POLICY_ALL = 0,
  ROUTING_POLICY_WLAN = 1,
  ROUTING_POLICY_CELLULAR = 2,
  ROUTING_POLICY_HYBRID = 3,
  RoutingPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RoutingPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RoutingPolicy_IsValid(int value);
const RoutingPolicy RoutingPolicy_MIN = ROUTING_POLICY_ALL;
const RoutingPolicy RoutingPolicy_MAX = ROUTING_POLICY_HYBRID;
const int RoutingPolicy_ARRAYSIZE = RoutingPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoutingPolicy_descriptor();
inline const ::std::string& RoutingPolicy_Name(RoutingPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoutingPolicy_descriptor(), value);
}
inline bool RoutingPolicy_Parse(
    const ::std::string& name, RoutingPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingPolicy>(
    RoutingPolicy_descriptor(), name, value);
}
enum RoutingLink {
  ROUTING_LINK_ANY = 0,
  ROUTING_LINK_WLAN = 1,
  ROUTING_LINK_CELLULAR = 2,
  RoutingLink_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RoutingLink_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RoutingLink_IsValid(int value);
const RoutingLink RoutingLink_MIN = ROUTING_LINK_ANY;
const RoutingLink RoutingLink_MAX = ROUTING_LINK_CELLULAR;
const int RoutingLink_ARRAYSIZE = RoutingLink_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoutingLink_descriptor();
inline const ::std::string& RoutingLink_Name(RoutingLink value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoutingLink_descriptor(), value);
}
inline bool RoutingLink_Parse(
    const ::std::string& name, RoutingLink* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingLink>(
    RoutingLink_descriptor(), name, value);
}
enum LinkStatus {
  LINK_STATUS_DOWN = 0,
  LINK_STATUS_UP = 1,
  LINK_STATUS_RUNNING = 2,
  LINK_STATUS_READY = 3,
  LINK_STATUS_CONNECTING = 4,
  LINK_STATUS_ERROR = 5,
  LinkStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LinkStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LinkStatus_IsValid(int value);
const LinkStatus LinkStatus_MIN = LINK_STATUS_DOWN;
const LinkStatus LinkStatus_MAX = LINK_STATUS_ERROR;
const int LinkStatus_ARRAYSIZE = LinkStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinkStatus_descriptor();
inline const ::std::string& LinkStatus_Name(LinkStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinkStatus_descriptor(), value);
}
inline bool LinkStatus_Parse(
    const ::std::string& name, LinkStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinkStatus>(
    LinkStatus_descriptor(), name, value);
}
enum LinkType {
  LINK_TYPE_UNKNOWN = 0,
  LINK_TYPE_LO = 1,
  LINK_TYPE_LAN = 2,
  LINK_TYPE_WLAN = 3,
  LINK_TYPE_CELLULAR = 4,
  LinkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LinkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LinkType_IsValid(int value);
const LinkType LinkType_MIN = LINK_TYPE_UNKNOWN;
const LinkType LinkType_MAX = LINK_TYPE_CELLULAR;
const int LinkType_ARRAYSIZE = LinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinkType_descriptor();
inline const ::std::string& LinkType_Name(LinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinkType_descriptor(), value);
}
inline bool LinkType_Parse(
    const ::std::string& name, LinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinkType>(
    LinkType_descriptor(), name, value);
}
enum LinkError {
  LINK_ERROR_NONE = 0,
  LINK_ERROR_DNS = 1,
  LINK_ERROR_CONNECT = 2,
  LINK_ERROR_AUTHENTICATION = 3,
  LINK_ERROR_PUBLISH = 4,
  LINK_ERROR_COMM_LINK = 5,
  LINK_ERROR_TIMEOUT = 6,
  LINK_ERROR_INVITE = 7,
  LinkError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LinkError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LinkError_IsValid(int value);
const LinkError LinkError_MIN = LINK_ERROR_NONE;
const LinkError LinkError_MAX = LINK_ERROR_INVITE;
const int LinkError_ARRAYSIZE = LinkError_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinkError_descriptor();
inline const ::std::string& LinkError_Name(LinkError value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinkError_descriptor(), value);
}
inline bool LinkError_Parse(
    const ::std::string& name, LinkError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinkError>(
    LinkError_descriptor(), name, value);
}
enum DirectConnectionMode {
  DIRECT_CONNECTION_MODE_LEGACY = 0,
  DIRECT_CONNECTION_MODE_SECURE = 1,
  DirectConnectionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DirectConnectionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DirectConnectionMode_IsValid(int value);
const DirectConnectionMode DirectConnectionMode_MIN = DIRECT_CONNECTION_MODE_LEGACY;
const DirectConnectionMode DirectConnectionMode_MAX = DIRECT_CONNECTION_MODE_SECURE;
const int DirectConnectionMode_ARRAYSIZE = DirectConnectionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DirectConnectionMode_descriptor();
inline const ::std::string& DirectConnectionMode_Name(DirectConnectionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DirectConnectionMode_descriptor(), value);
}
inline bool DirectConnectionMode_Parse(
    const ::std::string& name, DirectConnectionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DirectConnectionMode>(
    DirectConnectionMode_descriptor(), name, value);
}
// ===================================================================

class Command_GetState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Command.GetState) */ {
 public:
  Command_GetState();
  virtual ~Command_GetState();

  Command_GetState(const Command_GetState& from);

  inline Command_GetState& operator=(const Command_GetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_GetState(Command_GetState&& from) noexcept
    : Command_GetState() {
    *this = ::std::move(from);
  }

  inline Command_GetState& operator=(Command_GetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_GetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_GetState* internal_default_instance() {
    return reinterpret_cast<const Command_GetState*>(
               &_Command_GetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_GetState* other);
  friend void swap(Command_GetState& a, Command_GetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_GetState* New() const final {
    return CreateMaybeMessage<Command_GetState>(nullptr);
  }

  Command_GetState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_GetState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_GetState& from);
  void MergeFrom(const Command_GetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_GetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool include_default_capabilities = 1;
  void clear_include_default_capabilities();
  static const int kIncludeDefaultCapabilitiesFieldNumber = 1;
  bool include_default_capabilities() const;
  void set_include_default_capabilities(bool value);

  // @@protoc_insertion_point(class_scope:arsdk.network.Command.GetState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_default_capabilities_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Command_SetRoutingPolicy :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Command.SetRoutingPolicy) */ {
 public:
  Command_SetRoutingPolicy();
  virtual ~Command_SetRoutingPolicy();

  Command_SetRoutingPolicy(const Command_SetRoutingPolicy& from);

  inline Command_SetRoutingPolicy& operator=(const Command_SetRoutingPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetRoutingPolicy(Command_SetRoutingPolicy&& from) noexcept
    : Command_SetRoutingPolicy() {
    *this = ::std::move(from);
  }

  inline Command_SetRoutingPolicy& operator=(Command_SetRoutingPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetRoutingPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetRoutingPolicy* internal_default_instance() {
    return reinterpret_cast<const Command_SetRoutingPolicy*>(
               &_Command_SetRoutingPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command_SetRoutingPolicy* other);
  friend void swap(Command_SetRoutingPolicy& a, Command_SetRoutingPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetRoutingPolicy* New() const final {
    return CreateMaybeMessage<Command_SetRoutingPolicy>(nullptr);
  }

  Command_SetRoutingPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetRoutingPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetRoutingPolicy& from);
  void MergeFrom(const Command_SetRoutingPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetRoutingPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.network.RoutingPolicy policy = 1;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  ::arsdk::network::RoutingPolicy policy() const;
  void set_policy(::arsdk::network::RoutingPolicy value);

  // @@protoc_insertion_point(class_scope:arsdk.network.Command.SetRoutingPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Command_SetCellularMaxBitrate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Command.SetCellularMaxBitrate) */ {
 public:
  Command_SetCellularMaxBitrate();
  virtual ~Command_SetCellularMaxBitrate();

  Command_SetCellularMaxBitrate(const Command_SetCellularMaxBitrate& from);

  inline Command_SetCellularMaxBitrate& operator=(const Command_SetCellularMaxBitrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetCellularMaxBitrate(Command_SetCellularMaxBitrate&& from) noexcept
    : Command_SetCellularMaxBitrate() {
    *this = ::std::move(from);
  }

  inline Command_SetCellularMaxBitrate& operator=(Command_SetCellularMaxBitrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetCellularMaxBitrate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetCellularMaxBitrate* internal_default_instance() {
    return reinterpret_cast<const Command_SetCellularMaxBitrate*>(
               &_Command_SetCellularMaxBitrate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command_SetCellularMaxBitrate* other);
  friend void swap(Command_SetCellularMaxBitrate& a, Command_SetCellularMaxBitrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetCellularMaxBitrate* New() const final {
    return CreateMaybeMessage<Command_SetCellularMaxBitrate>(nullptr);
  }

  Command_SetCellularMaxBitrate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetCellularMaxBitrate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetCellularMaxBitrate& from);
  void MergeFrom(const Command_SetCellularMaxBitrate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetCellularMaxBitrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 max_bitrate = 1;
  void clear_max_bitrate();
  static const int kMaxBitrateFieldNumber = 1;
  ::google::protobuf::int32 max_bitrate() const;
  void set_max_bitrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:arsdk.network.Command.SetCellularMaxBitrate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 max_bitrate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Command_SetDirectConnection :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Command.SetDirectConnection) */ {
 public:
  Command_SetDirectConnection();
  virtual ~Command_SetDirectConnection();

  Command_SetDirectConnection(const Command_SetDirectConnection& from);

  inline Command_SetDirectConnection& operator=(const Command_SetDirectConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetDirectConnection(Command_SetDirectConnection&& from) noexcept
    : Command_SetDirectConnection() {
    *this = ::std::move(from);
  }

  inline Command_SetDirectConnection& operator=(Command_SetDirectConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetDirectConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetDirectConnection* internal_default_instance() {
    return reinterpret_cast<const Command_SetDirectConnection*>(
               &_Command_SetDirectConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Command_SetDirectConnection* other);
  friend void swap(Command_SetDirectConnection& a, Command_SetDirectConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetDirectConnection* New() const final {
    return CreateMaybeMessage<Command_SetDirectConnection>(nullptr);
  }

  Command_SetDirectConnection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetDirectConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetDirectConnection& from);
  void MergeFrom(const Command_SetDirectConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetDirectConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.network.DirectConnectionMode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::arsdk::network::DirectConnectionMode mode() const;
  void set_mode(::arsdk::network::DirectConnectionMode value);

  // @@protoc_insertion_point(class_scope:arsdk.network.Command.SetDirectConnection)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kGetState = 16,
    kSetRoutingPolicy = 17,
    kSetCellularMaxBitrate = 18,
    kSetDirectConnection = 19,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_GetState GetState;
  typedef Command_SetRoutingPolicy SetRoutingPolicy;
  typedef Command_SetCellularMaxBitrate SetCellularMaxBitrate;
  typedef Command_SetDirectConnection SetDirectConnection;

  // accessors -------------------------------------------------------

  // .arsdk.network.Command.GetState get_state = 16;
  bool has_get_state() const;
  void clear_get_state();
  static const int kGetStateFieldNumber = 16;
  const ::arsdk::network::Command_GetState& get_state() const;
  ::arsdk::network::Command_GetState* release_get_state();
  ::arsdk::network::Command_GetState* mutable_get_state();
  void set_allocated_get_state(::arsdk::network::Command_GetState* get_state);

  // .arsdk.network.Command.SetRoutingPolicy set_routing_policy = 17;
  bool has_set_routing_policy() const;
  void clear_set_routing_policy();
  static const int kSetRoutingPolicyFieldNumber = 17;
  const ::arsdk::network::Command_SetRoutingPolicy& set_routing_policy() const;
  ::arsdk::network::Command_SetRoutingPolicy* release_set_routing_policy();
  ::arsdk::network::Command_SetRoutingPolicy* mutable_set_routing_policy();
  void set_allocated_set_routing_policy(::arsdk::network::Command_SetRoutingPolicy* set_routing_policy);

  // .arsdk.network.Command.SetCellularMaxBitrate set_cellular_max_bitrate = 18;
  bool has_set_cellular_max_bitrate() const;
  void clear_set_cellular_max_bitrate();
  static const int kSetCellularMaxBitrateFieldNumber = 18;
  const ::arsdk::network::Command_SetCellularMaxBitrate& set_cellular_max_bitrate() const;
  ::arsdk::network::Command_SetCellularMaxBitrate* release_set_cellular_max_bitrate();
  ::arsdk::network::Command_SetCellularMaxBitrate* mutable_set_cellular_max_bitrate();
  void set_allocated_set_cellular_max_bitrate(::arsdk::network::Command_SetCellularMaxBitrate* set_cellular_max_bitrate);

  // .arsdk.network.Command.SetDirectConnection set_direct_connection = 19;
  bool has_set_direct_connection() const;
  void clear_set_direct_connection();
  static const int kSetDirectConnectionFieldNumber = 19;
  const ::arsdk::network::Command_SetDirectConnection& set_direct_connection() const;
  ::arsdk::network::Command_SetDirectConnection* release_set_direct_connection();
  ::arsdk::network::Command_SetDirectConnection* mutable_set_direct_connection();
  void set_allocated_set_direct_connection(::arsdk::network::Command_SetDirectConnection* set_direct_connection);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.network.Command)
 private:
  class HasBitSetters;
  void set_has_get_state();
  void set_has_set_routing_policy();
  void set_has_set_cellular_max_bitrate();
  void set_has_set_direct_connection();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::network::Command_GetState* get_state_;
    ::arsdk::network::Command_SetRoutingPolicy* set_routing_policy_;
    ::arsdk::network::Command_SetCellularMaxBitrate* set_cellular_max_bitrate_;
    ::arsdk::network::Command_SetDirectConnection* set_direct_connection_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Event_State :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Event.State) */ {
 public:
  Event_State();
  virtual ~Event_State();

  Event_State(const Event_State& from);

  inline Event_State& operator=(const Event_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State(Event_State&& from) noexcept
    : Event_State() {
    *this = ::std::move(from);
  }

  inline Event_State& operator=(Event_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State* internal_default_instance() {
    return reinterpret_cast<const Event_State*>(
               &_Event_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Event_State* other);
  friend void swap(Event_State& a, Event_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State* New() const final {
    return CreateMaybeMessage<Event_State>(nullptr);
  }

  Event_State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State& from);
  void MergeFrom(const Event_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.network.Capabilities default_capabilities = 1;
  bool has_default_capabilities() const;
  void clear_default_capabilities();
  static const int kDefaultCapabilitiesFieldNumber = 1;
  const ::arsdk::network::Capabilities& default_capabilities() const;
  ::arsdk::network::Capabilities* release_default_capabilities();
  ::arsdk::network::Capabilities* mutable_default_capabilities();
  void set_allocated_default_capabilities(::arsdk::network::Capabilities* default_capabilities);

  // .arsdk.network.RoutingInfo routing_info = 2;
  bool has_routing_info() const;
  void clear_routing_info();
  static const int kRoutingInfoFieldNumber = 2;
  const ::arsdk::network::RoutingInfo& routing_info() const;
  ::arsdk::network::RoutingInfo* release_routing_info();
  ::arsdk::network::RoutingInfo* mutable_routing_info();
  void set_allocated_routing_info(::arsdk::network::RoutingInfo* routing_info);

  // .arsdk.network.GlobalLinkQuality global_link_quality = 3;
  bool has_global_link_quality() const;
  void clear_global_link_quality();
  static const int kGlobalLinkQualityFieldNumber = 3;
  const ::arsdk::network::GlobalLinkQuality& global_link_quality() const;
  ::arsdk::network::GlobalLinkQuality* release_global_link_quality();
  ::arsdk::network::GlobalLinkQuality* mutable_global_link_quality();
  void set_allocated_global_link_quality(::arsdk::network::GlobalLinkQuality* global_link_quality);

  // .arsdk.network.LinksStatus links_status = 4;
  bool has_links_status() const;
  void clear_links_status();
  static const int kLinksStatusFieldNumber = 4;
  const ::arsdk::network::LinksStatus& links_status() const;
  ::arsdk::network::LinksStatus* release_links_status();
  ::arsdk::network::LinksStatus* mutable_links_status();
  void set_allocated_links_status(::arsdk::network::LinksStatus* links_status);

  // .arsdk.network.CellularMaxBitrate cellular_max_bitrate = 5;
  bool has_cellular_max_bitrate() const;
  void clear_cellular_max_bitrate();
  static const int kCellularMaxBitrateFieldNumber = 5;
  const ::arsdk::network::CellularMaxBitrate& cellular_max_bitrate() const;
  ::arsdk::network::CellularMaxBitrate* release_cellular_max_bitrate();
  ::arsdk::network::CellularMaxBitrate* mutable_cellular_max_bitrate();
  void set_allocated_cellular_max_bitrate(::arsdk::network::CellularMaxBitrate* cellular_max_bitrate);

  // .arsdk.network.DirectConnectionMode direct_connection_mode = 6;
  void clear_direct_connection_mode();
  static const int kDirectConnectionModeFieldNumber = 6;
  ::arsdk::network::DirectConnectionMode direct_connection_mode() const;
  void set_direct_connection_mode(::arsdk::network::DirectConnectionMode value);

  // @@protoc_insertion_point(class_scope:arsdk.network.Event.State)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::network::Capabilities* default_capabilities_;
  ::arsdk::network::RoutingInfo* routing_info_;
  ::arsdk::network::GlobalLinkQuality* global_link_quality_;
  ::arsdk::network::LinksStatus* links_status_;
  ::arsdk::network::CellularMaxBitrate* cellular_max_bitrate_;
  int direct_connection_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kState = 19,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_State State;

  // accessors -------------------------------------------------------

  // .arsdk.network.Event.State state = 19;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 19;
  const ::arsdk::network::Event_State& state() const;
  ::arsdk::network::Event_State* release_state();
  ::arsdk::network::Event_State* mutable_state();
  void set_allocated_state(::arsdk::network::Event_State* state);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.network.Event)
 private:
  class HasBitSetters;
  void set_has_state();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::network::Event_State* state_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Capabilities :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Capabilities* other);
  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities* New() const final {
    return CreateMaybeMessage<Capabilities>(nullptr);
  }

  Capabilities* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .arsdk.network.DirectConnectionMode supported_direct_connection_modes = 3;
  int supported_direct_connection_modes_size() const;
  void clear_supported_direct_connection_modes();
  static const int kSupportedDirectConnectionModesFieldNumber = 3;
  ::arsdk::network::DirectConnectionMode supported_direct_connection_modes(int index) const;
  void set_supported_direct_connection_modes(int index, ::arsdk::network::DirectConnectionMode value);
  void add_supported_direct_connection_modes(::arsdk::network::DirectConnectionMode value);
  const ::google::protobuf::RepeatedField<int>& supported_direct_connection_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_direct_connection_modes();

  // int32 cellular_min_bitrate = 1;
  void clear_cellular_min_bitrate();
  static const int kCellularMinBitrateFieldNumber = 1;
  ::google::protobuf::int32 cellular_min_bitrate() const;
  void set_cellular_min_bitrate(::google::protobuf::int32 value);

  // int32 cellular_max_bitrate = 2;
  void clear_cellular_max_bitrate();
  static const int kCellularMaxBitrateFieldNumber = 2;
  ::google::protobuf::int32 cellular_max_bitrate() const;
  void set_cellular_max_bitrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:arsdk.network.Capabilities)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supported_direct_connection_modes_;
  mutable std::atomic<int> _supported_direct_connection_modes_cached_byte_size_;
  ::google::protobuf::int32 cellular_min_bitrate_;
  ::google::protobuf::int32 cellular_max_bitrate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class RoutingInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.RoutingInfo) */ {
 public:
  RoutingInfo();
  virtual ~RoutingInfo();

  RoutingInfo(const RoutingInfo& from);

  inline RoutingInfo& operator=(const RoutingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingInfo(RoutingInfo&& from) noexcept
    : RoutingInfo() {
    *this = ::std::move(from);
  }

  inline RoutingInfo& operator=(RoutingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingInfo* internal_default_instance() {
    return reinterpret_cast<const RoutingInfo*>(
               &_RoutingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RoutingInfo* other);
  friend void swap(RoutingInfo& a, RoutingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingInfo* New() const final {
    return CreateMaybeMessage<RoutingInfo>(nullptr);
  }

  RoutingInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingInfo& from);
  void MergeFrom(const RoutingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.network.RoutingPolicy policy = 1;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  ::arsdk::network::RoutingPolicy policy() const;
  void set_policy(::arsdk::network::RoutingPolicy value);

  // .arsdk.network.RoutingLink current_link = 2;
  void clear_current_link();
  static const int kCurrentLinkFieldNumber = 2;
  ::arsdk::network::RoutingLink current_link() const;
  void set_current_link(::arsdk::network::RoutingLink value);

  // @@protoc_insertion_point(class_scope:arsdk.network.RoutingInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int policy_;
  int current_link_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GlobalLinkQuality :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.GlobalLinkQuality) */ {
 public:
  GlobalLinkQuality();
  virtual ~GlobalLinkQuality();

  GlobalLinkQuality(const GlobalLinkQuality& from);

  inline GlobalLinkQuality& operator=(const GlobalLinkQuality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalLinkQuality(GlobalLinkQuality&& from) noexcept
    : GlobalLinkQuality() {
    *this = ::std::move(from);
  }

  inline GlobalLinkQuality& operator=(GlobalLinkQuality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GlobalLinkQuality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalLinkQuality* internal_default_instance() {
    return reinterpret_cast<const GlobalLinkQuality*>(
               &_GlobalLinkQuality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GlobalLinkQuality* other);
  friend void swap(GlobalLinkQuality& a, GlobalLinkQuality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalLinkQuality* New() const final {
    return CreateMaybeMessage<GlobalLinkQuality>(nullptr);
  }

  GlobalLinkQuality* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalLinkQuality>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalLinkQuality& from);
  void MergeFrom(const GlobalLinkQuality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalLinkQuality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 quality = 1;
  void clear_quality();
  static const int kQualityFieldNumber = 1;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:arsdk.network.GlobalLinkQuality)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 quality_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class LinksStatus_LinkInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.LinksStatus.LinkInfo) */ {
 public:
  LinksStatus_LinkInfo();
  virtual ~LinksStatus_LinkInfo();

  LinksStatus_LinkInfo(const LinksStatus_LinkInfo& from);

  inline LinksStatus_LinkInfo& operator=(const LinksStatus_LinkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinksStatus_LinkInfo(LinksStatus_LinkInfo&& from) noexcept
    : LinksStatus_LinkInfo() {
    *this = ::std::move(from);
  }

  inline LinksStatus_LinkInfo& operator=(LinksStatus_LinkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinksStatus_LinkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinksStatus_LinkInfo* internal_default_instance() {
    return reinterpret_cast<const LinksStatus_LinkInfo*>(
               &_LinksStatus_LinkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LinksStatus_LinkInfo* other);
  friend void swap(LinksStatus_LinkInfo& a, LinksStatus_LinkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinksStatus_LinkInfo* New() const final {
    return CreateMaybeMessage<LinksStatus_LinkInfo>(nullptr);
  }

  LinksStatus_LinkInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinksStatus_LinkInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinksStatus_LinkInfo& from);
  void MergeFrom(const LinksStatus_LinkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinksStatus_LinkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.network.LinkType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::arsdk::network::LinkType type() const;
  void set_type(::arsdk::network::LinkType value);

  // .arsdk.network.LinkStatus status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::arsdk::network::LinkStatus status() const;
  void set_status(::arsdk::network::LinkStatus value);

  // int32 quality = 3;
  void clear_quality();
  static const int kQualityFieldNumber = 3;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // .arsdk.network.LinkError error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  ::arsdk::network::LinkError error() const;
  void set_error(::arsdk::network::LinkError value);

  // @@protoc_insertion_point(class_scope:arsdk.network.LinksStatus.LinkInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  int status_;
  ::google::protobuf::int32 quality_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class LinksStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.LinksStatus) */ {
 public:
  LinksStatus();
  virtual ~LinksStatus();

  LinksStatus(const LinksStatus& from);

  inline LinksStatus& operator=(const LinksStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinksStatus(LinksStatus&& from) noexcept
    : LinksStatus() {
    *this = ::std::move(from);
  }

  inline LinksStatus& operator=(LinksStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinksStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinksStatus* internal_default_instance() {
    return reinterpret_cast<const LinksStatus*>(
               &_LinksStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LinksStatus* other);
  friend void swap(LinksStatus& a, LinksStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinksStatus* New() const final {
    return CreateMaybeMessage<LinksStatus>(nullptr);
  }

  LinksStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinksStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinksStatus& from);
  void MergeFrom(const LinksStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinksStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinksStatus_LinkInfo LinkInfo;

  // accessors -------------------------------------------------------

  // repeated .arsdk.network.LinksStatus.LinkInfo links = 1;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 1;
  ::arsdk::network::LinksStatus_LinkInfo* mutable_links(int index);
  ::google::protobuf::RepeatedPtrField< ::arsdk::network::LinksStatus_LinkInfo >*
      mutable_links();
  const ::arsdk::network::LinksStatus_LinkInfo& links(int index) const;
  ::arsdk::network::LinksStatus_LinkInfo* add_links();
  const ::google::protobuf::RepeatedPtrField< ::arsdk::network::LinksStatus_LinkInfo >&
      links() const;

  // @@protoc_insertion_point(class_scope:arsdk.network.LinksStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::arsdk::network::LinksStatus_LinkInfo > links_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class CellularMaxBitrate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.network.CellularMaxBitrate) */ {
 public:
  CellularMaxBitrate();
  virtual ~CellularMaxBitrate();

  CellularMaxBitrate(const CellularMaxBitrate& from);

  inline CellularMaxBitrate& operator=(const CellularMaxBitrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CellularMaxBitrate(CellularMaxBitrate&& from) noexcept
    : CellularMaxBitrate() {
    *this = ::std::move(from);
  }

  inline CellularMaxBitrate& operator=(CellularMaxBitrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CellularMaxBitrate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellularMaxBitrate* internal_default_instance() {
    return reinterpret_cast<const CellularMaxBitrate*>(
               &_CellularMaxBitrate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CellularMaxBitrate* other);
  friend void swap(CellularMaxBitrate& a, CellularMaxBitrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CellularMaxBitrate* New() const final {
    return CreateMaybeMessage<CellularMaxBitrate>(nullptr);
  }

  CellularMaxBitrate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CellularMaxBitrate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CellularMaxBitrate& from);
  void MergeFrom(const CellularMaxBitrate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellularMaxBitrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 max_bitrate = 1;
  void clear_max_bitrate();
  static const int kMaxBitrateFieldNumber = 1;
  ::google::protobuf::int32 max_bitrate() const;
  void set_max_bitrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:arsdk.network.CellularMaxBitrate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 max_bitrate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_GetState

// bool include_default_capabilities = 1;
inline void Command_GetState::clear_include_default_capabilities() {
  include_default_capabilities_ = false;
}
inline bool Command_GetState::include_default_capabilities() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.GetState.include_default_capabilities)
  return include_default_capabilities_;
}
inline void Command_GetState::set_include_default_capabilities(bool value) {
  
  include_default_capabilities_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Command.GetState.include_default_capabilities)
}

// -------------------------------------------------------------------

// Command_SetRoutingPolicy

// .arsdk.network.RoutingPolicy policy = 1;
inline void Command_SetRoutingPolicy::clear_policy() {
  policy_ = 0;
}
inline ::arsdk::network::RoutingPolicy Command_SetRoutingPolicy::policy() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.SetRoutingPolicy.policy)
  return static_cast< ::arsdk::network::RoutingPolicy >(policy_);
}
inline void Command_SetRoutingPolicy::set_policy(::arsdk::network::RoutingPolicy value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Command.SetRoutingPolicy.policy)
}

// -------------------------------------------------------------------

// Command_SetCellularMaxBitrate

// int32 max_bitrate = 1;
inline void Command_SetCellularMaxBitrate::clear_max_bitrate() {
  max_bitrate_ = 0;
}
inline ::google::protobuf::int32 Command_SetCellularMaxBitrate::max_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.SetCellularMaxBitrate.max_bitrate)
  return max_bitrate_;
}
inline void Command_SetCellularMaxBitrate::set_max_bitrate(::google::protobuf::int32 value) {
  
  max_bitrate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Command.SetCellularMaxBitrate.max_bitrate)
}

// -------------------------------------------------------------------

// Command_SetDirectConnection

// .arsdk.network.DirectConnectionMode mode = 1;
inline void Command_SetDirectConnection::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::network::DirectConnectionMode Command_SetDirectConnection::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.SetDirectConnection.mode)
  return static_cast< ::arsdk::network::DirectConnectionMode >(mode_);
}
inline void Command_SetDirectConnection::set_mode(::arsdk::network::DirectConnectionMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Command.SetDirectConnection.mode)
}

// -------------------------------------------------------------------

// Command

// .arsdk.network.Command.GetState get_state = 16;
inline bool Command::has_get_state() const {
  return id_case() == kGetState;
}
inline void Command::set_has_get_state() {
  _oneof_case_[0] = kGetState;
}
inline void Command::clear_get_state() {
  if (has_get_state()) {
    delete id_.get_state_;
    clear_has_id();
  }
}
inline ::arsdk::network::Command_GetState* Command::release_get_state() {
  // @@protoc_insertion_point(field_release:arsdk.network.Command.get_state)
  if (has_get_state()) {
    clear_has_id();
      ::arsdk::network::Command_GetState* temp = id_.get_state_;
    id_.get_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::network::Command_GetState& Command::get_state() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.get_state)
  return has_get_state()
      ? *id_.get_state_
      : *reinterpret_cast< ::arsdk::network::Command_GetState*>(&::arsdk::network::_Command_GetState_default_instance_);
}
inline ::arsdk::network::Command_GetState* Command::mutable_get_state() {
  if (!has_get_state()) {
    clear_id();
    set_has_get_state();
    id_.get_state_ = CreateMaybeMessage< ::arsdk::network::Command_GetState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Command.get_state)
  return id_.get_state_;
}

// .arsdk.network.Command.SetRoutingPolicy set_routing_policy = 17;
inline bool Command::has_set_routing_policy() const {
  return id_case() == kSetRoutingPolicy;
}
inline void Command::set_has_set_routing_policy() {
  _oneof_case_[0] = kSetRoutingPolicy;
}
inline void Command::clear_set_routing_policy() {
  if (has_set_routing_policy()) {
    delete id_.set_routing_policy_;
    clear_has_id();
  }
}
inline ::arsdk::network::Command_SetRoutingPolicy* Command::release_set_routing_policy() {
  // @@protoc_insertion_point(field_release:arsdk.network.Command.set_routing_policy)
  if (has_set_routing_policy()) {
    clear_has_id();
      ::arsdk::network::Command_SetRoutingPolicy* temp = id_.set_routing_policy_;
    id_.set_routing_policy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::network::Command_SetRoutingPolicy& Command::set_routing_policy() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.set_routing_policy)
  return has_set_routing_policy()
      ? *id_.set_routing_policy_
      : *reinterpret_cast< ::arsdk::network::Command_SetRoutingPolicy*>(&::arsdk::network::_Command_SetRoutingPolicy_default_instance_);
}
inline ::arsdk::network::Command_SetRoutingPolicy* Command::mutable_set_routing_policy() {
  if (!has_set_routing_policy()) {
    clear_id();
    set_has_set_routing_policy();
    id_.set_routing_policy_ = CreateMaybeMessage< ::arsdk::network::Command_SetRoutingPolicy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Command.set_routing_policy)
  return id_.set_routing_policy_;
}

// .arsdk.network.Command.SetCellularMaxBitrate set_cellular_max_bitrate = 18;
inline bool Command::has_set_cellular_max_bitrate() const {
  return id_case() == kSetCellularMaxBitrate;
}
inline void Command::set_has_set_cellular_max_bitrate() {
  _oneof_case_[0] = kSetCellularMaxBitrate;
}
inline void Command::clear_set_cellular_max_bitrate() {
  if (has_set_cellular_max_bitrate()) {
    delete id_.set_cellular_max_bitrate_;
    clear_has_id();
  }
}
inline ::arsdk::network::Command_SetCellularMaxBitrate* Command::release_set_cellular_max_bitrate() {
  // @@protoc_insertion_point(field_release:arsdk.network.Command.set_cellular_max_bitrate)
  if (has_set_cellular_max_bitrate()) {
    clear_has_id();
      ::arsdk::network::Command_SetCellularMaxBitrate* temp = id_.set_cellular_max_bitrate_;
    id_.set_cellular_max_bitrate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::network::Command_SetCellularMaxBitrate& Command::set_cellular_max_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.set_cellular_max_bitrate)
  return has_set_cellular_max_bitrate()
      ? *id_.set_cellular_max_bitrate_
      : *reinterpret_cast< ::arsdk::network::Command_SetCellularMaxBitrate*>(&::arsdk::network::_Command_SetCellularMaxBitrate_default_instance_);
}
inline ::arsdk::network::Command_SetCellularMaxBitrate* Command::mutable_set_cellular_max_bitrate() {
  if (!has_set_cellular_max_bitrate()) {
    clear_id();
    set_has_set_cellular_max_bitrate();
    id_.set_cellular_max_bitrate_ = CreateMaybeMessage< ::arsdk::network::Command_SetCellularMaxBitrate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Command.set_cellular_max_bitrate)
  return id_.set_cellular_max_bitrate_;
}

// .arsdk.network.Command.SetDirectConnection set_direct_connection = 19;
inline bool Command::has_set_direct_connection() const {
  return id_case() == kSetDirectConnection;
}
inline void Command::set_has_set_direct_connection() {
  _oneof_case_[0] = kSetDirectConnection;
}
inline void Command::clear_set_direct_connection() {
  if (has_set_direct_connection()) {
    delete id_.set_direct_connection_;
    clear_has_id();
  }
}
inline ::arsdk::network::Command_SetDirectConnection* Command::release_set_direct_connection() {
  // @@protoc_insertion_point(field_release:arsdk.network.Command.set_direct_connection)
  if (has_set_direct_connection()) {
    clear_has_id();
      ::arsdk::network::Command_SetDirectConnection* temp = id_.set_direct_connection_;
    id_.set_direct_connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::network::Command_SetDirectConnection& Command::set_direct_connection() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Command.set_direct_connection)
  return has_set_direct_connection()
      ? *id_.set_direct_connection_
      : *reinterpret_cast< ::arsdk::network::Command_SetDirectConnection*>(&::arsdk::network::_Command_SetDirectConnection_default_instance_);
}
inline ::arsdk::network::Command_SetDirectConnection* Command::mutable_set_direct_connection() {
  if (!has_set_direct_connection()) {
    clear_id();
    set_has_set_direct_connection();
    id_.set_direct_connection_ = CreateMaybeMessage< ::arsdk::network::Command_SetDirectConnection >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Command.set_direct_connection)
  return id_.set_direct_connection_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_State

// .arsdk.network.Capabilities default_capabilities = 1;
inline bool Event_State::has_default_capabilities() const {
  return this != internal_default_instance() && default_capabilities_ != nullptr;
}
inline void Event_State::clear_default_capabilities() {
  if (GetArenaNoVirtual() == nullptr && default_capabilities_ != nullptr) {
    delete default_capabilities_;
  }
  default_capabilities_ = nullptr;
}
inline const ::arsdk::network::Capabilities& Event_State::default_capabilities() const {
  const ::arsdk::network::Capabilities* p = default_capabilities_;
  // @@protoc_insertion_point(field_get:arsdk.network.Event.State.default_capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::network::Capabilities*>(
      &::arsdk::network::_Capabilities_default_instance_);
}
inline ::arsdk::network::Capabilities* Event_State::release_default_capabilities() {
  // @@protoc_insertion_point(field_release:arsdk.network.Event.State.default_capabilities)
  
  ::arsdk::network::Capabilities* temp = default_capabilities_;
  default_capabilities_ = nullptr;
  return temp;
}
inline ::arsdk::network::Capabilities* Event_State::mutable_default_capabilities() {
  
  if (default_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::network::Capabilities>(GetArenaNoVirtual());
    default_capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Event.State.default_capabilities)
  return default_capabilities_;
}
inline void Event_State::set_allocated_default_capabilities(::arsdk::network::Capabilities* default_capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_capabilities_;
  }
  if (default_capabilities) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  default_capabilities_ = default_capabilities;
  // @@protoc_insertion_point(field_set_allocated:arsdk.network.Event.State.default_capabilities)
}

// .arsdk.network.RoutingInfo routing_info = 2;
inline bool Event_State::has_routing_info() const {
  return this != internal_default_instance() && routing_info_ != nullptr;
}
inline void Event_State::clear_routing_info() {
  if (GetArenaNoVirtual() == nullptr && routing_info_ != nullptr) {
    delete routing_info_;
  }
  routing_info_ = nullptr;
}
inline const ::arsdk::network::RoutingInfo& Event_State::routing_info() const {
  const ::arsdk::network::RoutingInfo* p = routing_info_;
  // @@protoc_insertion_point(field_get:arsdk.network.Event.State.routing_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::network::RoutingInfo*>(
      &::arsdk::network::_RoutingInfo_default_instance_);
}
inline ::arsdk::network::RoutingInfo* Event_State::release_routing_info() {
  // @@protoc_insertion_point(field_release:arsdk.network.Event.State.routing_info)
  
  ::arsdk::network::RoutingInfo* temp = routing_info_;
  routing_info_ = nullptr;
  return temp;
}
inline ::arsdk::network::RoutingInfo* Event_State::mutable_routing_info() {
  
  if (routing_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::network::RoutingInfo>(GetArenaNoVirtual());
    routing_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Event.State.routing_info)
  return routing_info_;
}
inline void Event_State::set_allocated_routing_info(::arsdk::network::RoutingInfo* routing_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete routing_info_;
  }
  if (routing_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, routing_info, submessage_arena);
    }
    
  } else {
    
  }
  routing_info_ = routing_info;
  // @@protoc_insertion_point(field_set_allocated:arsdk.network.Event.State.routing_info)
}

// .arsdk.network.GlobalLinkQuality global_link_quality = 3;
inline bool Event_State::has_global_link_quality() const {
  return this != internal_default_instance() && global_link_quality_ != nullptr;
}
inline void Event_State::clear_global_link_quality() {
  if (GetArenaNoVirtual() == nullptr && global_link_quality_ != nullptr) {
    delete global_link_quality_;
  }
  global_link_quality_ = nullptr;
}
inline const ::arsdk::network::GlobalLinkQuality& Event_State::global_link_quality() const {
  const ::arsdk::network::GlobalLinkQuality* p = global_link_quality_;
  // @@protoc_insertion_point(field_get:arsdk.network.Event.State.global_link_quality)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::network::GlobalLinkQuality*>(
      &::arsdk::network::_GlobalLinkQuality_default_instance_);
}
inline ::arsdk::network::GlobalLinkQuality* Event_State::release_global_link_quality() {
  // @@protoc_insertion_point(field_release:arsdk.network.Event.State.global_link_quality)
  
  ::arsdk::network::GlobalLinkQuality* temp = global_link_quality_;
  global_link_quality_ = nullptr;
  return temp;
}
inline ::arsdk::network::GlobalLinkQuality* Event_State::mutable_global_link_quality() {
  
  if (global_link_quality_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::network::GlobalLinkQuality>(GetArenaNoVirtual());
    global_link_quality_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Event.State.global_link_quality)
  return global_link_quality_;
}
inline void Event_State::set_allocated_global_link_quality(::arsdk::network::GlobalLinkQuality* global_link_quality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_link_quality_;
  }
  if (global_link_quality) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_link_quality = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_link_quality, submessage_arena);
    }
    
  } else {
    
  }
  global_link_quality_ = global_link_quality;
  // @@protoc_insertion_point(field_set_allocated:arsdk.network.Event.State.global_link_quality)
}

// .arsdk.network.LinksStatus links_status = 4;
inline bool Event_State::has_links_status() const {
  return this != internal_default_instance() && links_status_ != nullptr;
}
inline void Event_State::clear_links_status() {
  if (GetArenaNoVirtual() == nullptr && links_status_ != nullptr) {
    delete links_status_;
  }
  links_status_ = nullptr;
}
inline const ::arsdk::network::LinksStatus& Event_State::links_status() const {
  const ::arsdk::network::LinksStatus* p = links_status_;
  // @@protoc_insertion_point(field_get:arsdk.network.Event.State.links_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::network::LinksStatus*>(
      &::arsdk::network::_LinksStatus_default_instance_);
}
inline ::arsdk::network::LinksStatus* Event_State::release_links_status() {
  // @@protoc_insertion_point(field_release:arsdk.network.Event.State.links_status)
  
  ::arsdk::network::LinksStatus* temp = links_status_;
  links_status_ = nullptr;
  return temp;
}
inline ::arsdk::network::LinksStatus* Event_State::mutable_links_status() {
  
  if (links_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::network::LinksStatus>(GetArenaNoVirtual());
    links_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Event.State.links_status)
  return links_status_;
}
inline void Event_State::set_allocated_links_status(::arsdk::network::LinksStatus* links_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete links_status_;
  }
  if (links_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      links_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, links_status, submessage_arena);
    }
    
  } else {
    
  }
  links_status_ = links_status;
  // @@protoc_insertion_point(field_set_allocated:arsdk.network.Event.State.links_status)
}

// .arsdk.network.CellularMaxBitrate cellular_max_bitrate = 5;
inline bool Event_State::has_cellular_max_bitrate() const {
  return this != internal_default_instance() && cellular_max_bitrate_ != nullptr;
}
inline void Event_State::clear_cellular_max_bitrate() {
  if (GetArenaNoVirtual() == nullptr && cellular_max_bitrate_ != nullptr) {
    delete cellular_max_bitrate_;
  }
  cellular_max_bitrate_ = nullptr;
}
inline const ::arsdk::network::CellularMaxBitrate& Event_State::cellular_max_bitrate() const {
  const ::arsdk::network::CellularMaxBitrate* p = cellular_max_bitrate_;
  // @@protoc_insertion_point(field_get:arsdk.network.Event.State.cellular_max_bitrate)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::network::CellularMaxBitrate*>(
      &::arsdk::network::_CellularMaxBitrate_default_instance_);
}
inline ::arsdk::network::CellularMaxBitrate* Event_State::release_cellular_max_bitrate() {
  // @@protoc_insertion_point(field_release:arsdk.network.Event.State.cellular_max_bitrate)
  
  ::arsdk::network::CellularMaxBitrate* temp = cellular_max_bitrate_;
  cellular_max_bitrate_ = nullptr;
  return temp;
}
inline ::arsdk::network::CellularMaxBitrate* Event_State::mutable_cellular_max_bitrate() {
  
  if (cellular_max_bitrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::network::CellularMaxBitrate>(GetArenaNoVirtual());
    cellular_max_bitrate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Event.State.cellular_max_bitrate)
  return cellular_max_bitrate_;
}
inline void Event_State::set_allocated_cellular_max_bitrate(::arsdk::network::CellularMaxBitrate* cellular_max_bitrate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cellular_max_bitrate_;
  }
  if (cellular_max_bitrate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cellular_max_bitrate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cellular_max_bitrate, submessage_arena);
    }
    
  } else {
    
  }
  cellular_max_bitrate_ = cellular_max_bitrate;
  // @@protoc_insertion_point(field_set_allocated:arsdk.network.Event.State.cellular_max_bitrate)
}

// .arsdk.network.DirectConnectionMode direct_connection_mode = 6;
inline void Event_State::clear_direct_connection_mode() {
  direct_connection_mode_ = 0;
}
inline ::arsdk::network::DirectConnectionMode Event_State::direct_connection_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Event.State.direct_connection_mode)
  return static_cast< ::arsdk::network::DirectConnectionMode >(direct_connection_mode_);
}
inline void Event_State::set_direct_connection_mode(::arsdk::network::DirectConnectionMode value) {
  
  direct_connection_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Event.State.direct_connection_mode)
}

// -------------------------------------------------------------------

// Event

// .arsdk.network.Event.State state = 19;
inline bool Event::has_state() const {
  return id_case() == kState;
}
inline void Event::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Event::clear_state() {
  if (has_state()) {
    delete id_.state_;
    clear_has_id();
  }
}
inline ::arsdk::network::Event_State* Event::release_state() {
  // @@protoc_insertion_point(field_release:arsdk.network.Event.state)
  if (has_state()) {
    clear_has_id();
      ::arsdk::network::Event_State* temp = id_.state_;
    id_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::network::Event_State& Event::state() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Event.state)
  return has_state()
      ? *id_.state_
      : *reinterpret_cast< ::arsdk::network::Event_State*>(&::arsdk::network::_Event_State_default_instance_);
}
inline ::arsdk::network::Event_State* Event::mutable_state() {
  if (!has_state()) {
    clear_id();
    set_has_state();
    id_.state_ = CreateMaybeMessage< ::arsdk::network::Event_State >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.network.Event.state)
  return id_.state_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Capabilities

// int32 cellular_min_bitrate = 1;
inline void Capabilities::clear_cellular_min_bitrate() {
  cellular_min_bitrate_ = 0;
}
inline ::google::protobuf::int32 Capabilities::cellular_min_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Capabilities.cellular_min_bitrate)
  return cellular_min_bitrate_;
}
inline void Capabilities::set_cellular_min_bitrate(::google::protobuf::int32 value) {
  
  cellular_min_bitrate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Capabilities.cellular_min_bitrate)
}

// int32 cellular_max_bitrate = 2;
inline void Capabilities::clear_cellular_max_bitrate() {
  cellular_max_bitrate_ = 0;
}
inline ::google::protobuf::int32 Capabilities::cellular_max_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.network.Capabilities.cellular_max_bitrate)
  return cellular_max_bitrate_;
}
inline void Capabilities::set_cellular_max_bitrate(::google::protobuf::int32 value) {
  
  cellular_max_bitrate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.Capabilities.cellular_max_bitrate)
}

// repeated .arsdk.network.DirectConnectionMode supported_direct_connection_modes = 3;
inline int Capabilities::supported_direct_connection_modes_size() const {
  return supported_direct_connection_modes_.size();
}
inline void Capabilities::clear_supported_direct_connection_modes() {
  supported_direct_connection_modes_.Clear();
}
inline ::arsdk::network::DirectConnectionMode Capabilities::supported_direct_connection_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.network.Capabilities.supported_direct_connection_modes)
  return static_cast< ::arsdk::network::DirectConnectionMode >(supported_direct_connection_modes_.Get(index));
}
inline void Capabilities::set_supported_direct_connection_modes(int index, ::arsdk::network::DirectConnectionMode value) {
  supported_direct_connection_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.network.Capabilities.supported_direct_connection_modes)
}
inline void Capabilities::add_supported_direct_connection_modes(::arsdk::network::DirectConnectionMode value) {
  supported_direct_connection_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.network.Capabilities.supported_direct_connection_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities::supported_direct_connection_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.network.Capabilities.supported_direct_connection_modes)
  return supported_direct_connection_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities::mutable_supported_direct_connection_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.network.Capabilities.supported_direct_connection_modes)
  return &supported_direct_connection_modes_;
}

// -------------------------------------------------------------------

// RoutingInfo

// .arsdk.network.RoutingPolicy policy = 1;
inline void RoutingInfo::clear_policy() {
  policy_ = 0;
}
inline ::arsdk::network::RoutingPolicy RoutingInfo::policy() const {
  // @@protoc_insertion_point(field_get:arsdk.network.RoutingInfo.policy)
  return static_cast< ::arsdk::network::RoutingPolicy >(policy_);
}
inline void RoutingInfo::set_policy(::arsdk::network::RoutingPolicy value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.RoutingInfo.policy)
}

// .arsdk.network.RoutingLink current_link = 2;
inline void RoutingInfo::clear_current_link() {
  current_link_ = 0;
}
inline ::arsdk::network::RoutingLink RoutingInfo::current_link() const {
  // @@protoc_insertion_point(field_get:arsdk.network.RoutingInfo.current_link)
  return static_cast< ::arsdk::network::RoutingLink >(current_link_);
}
inline void RoutingInfo::set_current_link(::arsdk::network::RoutingLink value) {
  
  current_link_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.RoutingInfo.current_link)
}

// -------------------------------------------------------------------

// GlobalLinkQuality

// int32 quality = 1;
inline void GlobalLinkQuality::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 GlobalLinkQuality::quality() const {
  // @@protoc_insertion_point(field_get:arsdk.network.GlobalLinkQuality.quality)
  return quality_;
}
inline void GlobalLinkQuality::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.GlobalLinkQuality.quality)
}

// -------------------------------------------------------------------

// LinksStatus_LinkInfo

// .arsdk.network.LinkType type = 1;
inline void LinksStatus_LinkInfo::clear_type() {
  type_ = 0;
}
inline ::arsdk::network::LinkType LinksStatus_LinkInfo::type() const {
  // @@protoc_insertion_point(field_get:arsdk.network.LinksStatus.LinkInfo.type)
  return static_cast< ::arsdk::network::LinkType >(type_);
}
inline void LinksStatus_LinkInfo::set_type(::arsdk::network::LinkType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.LinksStatus.LinkInfo.type)
}

// .arsdk.network.LinkStatus status = 2;
inline void LinksStatus_LinkInfo::clear_status() {
  status_ = 0;
}
inline ::arsdk::network::LinkStatus LinksStatus_LinkInfo::status() const {
  // @@protoc_insertion_point(field_get:arsdk.network.LinksStatus.LinkInfo.status)
  return static_cast< ::arsdk::network::LinkStatus >(status_);
}
inline void LinksStatus_LinkInfo::set_status(::arsdk::network::LinkStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.LinksStatus.LinkInfo.status)
}

// int32 quality = 3;
inline void LinksStatus_LinkInfo::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 LinksStatus_LinkInfo::quality() const {
  // @@protoc_insertion_point(field_get:arsdk.network.LinksStatus.LinkInfo.quality)
  return quality_;
}
inline void LinksStatus_LinkInfo::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.LinksStatus.LinkInfo.quality)
}

// .arsdk.network.LinkError error = 4;
inline void LinksStatus_LinkInfo::clear_error() {
  error_ = 0;
}
inline ::arsdk::network::LinkError LinksStatus_LinkInfo::error() const {
  // @@protoc_insertion_point(field_get:arsdk.network.LinksStatus.LinkInfo.error)
  return static_cast< ::arsdk::network::LinkError >(error_);
}
inline void LinksStatus_LinkInfo::set_error(::arsdk::network::LinkError value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.LinksStatus.LinkInfo.error)
}

// -------------------------------------------------------------------

// LinksStatus

// repeated .arsdk.network.LinksStatus.LinkInfo links = 1;
inline int LinksStatus::links_size() const {
  return links_.size();
}
inline void LinksStatus::clear_links() {
  links_.Clear();
}
inline ::arsdk::network::LinksStatus_LinkInfo* LinksStatus::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:arsdk.network.LinksStatus.links)
  return links_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::arsdk::network::LinksStatus_LinkInfo >*
LinksStatus::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.network.LinksStatus.links)
  return &links_;
}
inline const ::arsdk::network::LinksStatus_LinkInfo& LinksStatus::links(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.network.LinksStatus.links)
  return links_.Get(index);
}
inline ::arsdk::network::LinksStatus_LinkInfo* LinksStatus::add_links() {
  // @@protoc_insertion_point(field_add:arsdk.network.LinksStatus.links)
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::arsdk::network::LinksStatus_LinkInfo >&
LinksStatus::links() const {
  // @@protoc_insertion_point(field_list:arsdk.network.LinksStatus.links)
  return links_;
}

// -------------------------------------------------------------------

// CellularMaxBitrate

// int32 max_bitrate = 1;
inline void CellularMaxBitrate::clear_max_bitrate() {
  max_bitrate_ = 0;
}
inline ::google::protobuf::int32 CellularMaxBitrate::max_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.network.CellularMaxBitrate.max_bitrate)
  return max_bitrate_;
}
inline void CellularMaxBitrate::set_max_bitrate(::google::protobuf::int32 value) {
  
  max_bitrate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.network.CellularMaxBitrate.max_bitrate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network
}  // namespace arsdk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::arsdk::network::RoutingPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::network::RoutingPolicy>() {
  return ::arsdk::network::RoutingPolicy_descriptor();
}
template <> struct is_proto_enum< ::arsdk::network::RoutingLink> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::network::RoutingLink>() {
  return ::arsdk::network::RoutingLink_descriptor();
}
template <> struct is_proto_enum< ::arsdk::network::LinkStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::network::LinkStatus>() {
  return ::arsdk::network::LinkStatus_descriptor();
}
template <> struct is_proto_enum< ::arsdk::network::LinkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::network::LinkType>() {
  return ::arsdk::network::LinkType_descriptor();
}
template <> struct is_proto_enum< ::arsdk::network::LinkError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::network::LinkError>() {
  return ::arsdk::network::LinkError_descriptor();
}
template <> struct is_proto_enum< ::arsdk::network::DirectConnectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::network::DirectConnectionMode>() {
  return ::arsdk::network::DirectConnectionMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fnetwork_2eproto
