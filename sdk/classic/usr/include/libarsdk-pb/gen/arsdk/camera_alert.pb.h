// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/camera_alert.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fcamera_5falert_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fcamera_5falert_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fcamera_5falert_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fcamera_5falert_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fcamera_5falert_2eproto();
namespace arsdk {
namespace camera {
namespace alert {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_SensorFailure;
class Event_SensorFailureDefaultTypeInternal;
extern Event_SensorFailureDefaultTypeInternal _Event_SensorFailure_default_instance_;
class Event_TooDark;
class Event_TooDarkDefaultTypeInternal;
extern Event_TooDarkDefaultTypeInternal _Event_TooDark_default_instance_;
}  // namespace alert
}  // namespace camera
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::camera::alert::Command* Arena::CreateMaybeMessage<::arsdk::camera::alert::Command>(Arena*);
template<> ::arsdk::camera::alert::Event* Arena::CreateMaybeMessage<::arsdk::camera::alert::Event>(Arena*);
template<> ::arsdk::camera::alert::Event_SensorFailure* Arena::CreateMaybeMessage<::arsdk::camera::alert::Event_SensorFailure>(Arena*);
template<> ::arsdk::camera::alert::Event_TooDark* Arena::CreateMaybeMessage<::arsdk::camera::alert::Event_TooDark>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace camera {
namespace alert {

enum Camera {
  CAMERA_FRONT_STEREO = 0,
  CAMERA_VERTICAL = 1,
  CAMERA_FRONT = 2,
  Camera_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Camera_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Camera_IsValid(int value);
const Camera Camera_MIN = CAMERA_FRONT_STEREO;
const Camera Camera_MAX = CAMERA_FRONT;
const int Camera_ARRAYSIZE = Camera_MAX + 1;

const ::google::protobuf::EnumDescriptor* Camera_descriptor();
inline const ::std::string& Camera_Name(Camera value) {
  return ::google::protobuf::internal::NameOfEnum(
    Camera_descriptor(), value);
}
inline bool Camera_Parse(
    const ::std::string& name, Camera* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Camera>(
    Camera_descriptor(), name, value);
}
enum AlertState {
  ALERT_STATE_ACTIVE = 0,
  ALERT_STATE_INACTIVE = 1,
  AlertState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  AlertState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool AlertState_IsValid(int value);
const AlertState AlertState_MIN = ALERT_STATE_ACTIVE;
const AlertState AlertState_MAX = ALERT_STATE_INACTIVE;
const int AlertState_ARRAYSIZE = AlertState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlertState_descriptor();
inline const ::std::string& AlertState_Name(AlertState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlertState_descriptor(), value);
}
inline bool AlertState_Parse(
    const ::std::string& name, AlertState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlertState>(
    AlertState_descriptor(), name, value);
}
// ===================================================================

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.alert.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kGetAlerts = 16,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Empty get_alerts = 16;
  bool has_get_alerts() const;
  void clear_get_alerts();
  static const int kGetAlertsFieldNumber = 16;
  const ::google::protobuf::Empty& get_alerts() const;
  ::google::protobuf::Empty* release_get_alerts();
  ::google::protobuf::Empty* mutable_get_alerts();
  void set_allocated_get_alerts(::google::protobuf::Empty* get_alerts);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.camera.alert.Command)
 private:
  class HasBitSetters;
  void set_has_get_alerts();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::Empty* get_alerts_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fcamera_5falert_2eproto;
};
// -------------------------------------------------------------------

class Event_TooDark :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.alert.Event.TooDark) */ {
 public:
  Event_TooDark();
  virtual ~Event_TooDark();

  Event_TooDark(const Event_TooDark& from);

  inline Event_TooDark& operator=(const Event_TooDark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_TooDark(Event_TooDark&& from) noexcept
    : Event_TooDark() {
    *this = ::std::move(from);
  }

  inline Event_TooDark& operator=(Event_TooDark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_TooDark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_TooDark* internal_default_instance() {
    return reinterpret_cast<const Event_TooDark*>(
               &_Event_TooDark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Event_TooDark* other);
  friend void swap(Event_TooDark& a, Event_TooDark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_TooDark* New() const final {
    return CreateMaybeMessage<Event_TooDark>(nullptr);
  }

  Event_TooDark* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_TooDark>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_TooDark& from);
  void MergeFrom(const Event_TooDark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_TooDark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.camera.alert.AlertState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::arsdk::camera::alert::AlertState state() const;
  void set_state(::arsdk::camera::alert::AlertState value);

  // .arsdk.camera.alert.Camera camera = 2;
  void clear_camera();
  static const int kCameraFieldNumber = 2;
  ::arsdk::camera::alert::Camera camera() const;
  void set_camera(::arsdk::camera::alert::Camera value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.alert.Event.TooDark)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  int camera_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera_5falert_2eproto;
};
// -------------------------------------------------------------------

class Event_SensorFailure :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.alert.Event.SensorFailure) */ {
 public:
  Event_SensorFailure();
  virtual ~Event_SensorFailure();

  Event_SensorFailure(const Event_SensorFailure& from);

  inline Event_SensorFailure& operator=(const Event_SensorFailure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_SensorFailure(Event_SensorFailure&& from) noexcept
    : Event_SensorFailure() {
    *this = ::std::move(from);
  }

  inline Event_SensorFailure& operator=(Event_SensorFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_SensorFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_SensorFailure* internal_default_instance() {
    return reinterpret_cast<const Event_SensorFailure*>(
               &_Event_SensorFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Event_SensorFailure* other);
  friend void swap(Event_SensorFailure& a, Event_SensorFailure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_SensorFailure* New() const final {
    return CreateMaybeMessage<Event_SensorFailure>(nullptr);
  }

  Event_SensorFailure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_SensorFailure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_SensorFailure& from);
  void MergeFrom(const Event_SensorFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_SensorFailure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.camera.alert.AlertState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::arsdk::camera::alert::AlertState state() const;
  void set_state(::arsdk::camera::alert::AlertState value);

  // .arsdk.camera.alert.Camera camera = 2;
  void clear_camera();
  static const int kCameraFieldNumber = 2;
  ::arsdk::camera::alert::Camera camera() const;
  void set_camera(::arsdk::camera::alert::Camera value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.alert.Event.SensorFailure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  int camera_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera_5falert_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.alert.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kTooDark = 16,
    kSensorFailure = 17,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_TooDark TooDark;
  typedef Event_SensorFailure SensorFailure;

  // accessors -------------------------------------------------------

  // .arsdk.camera.alert.Event.TooDark too_dark = 16;
  bool has_too_dark() const;
  void clear_too_dark();
  static const int kTooDarkFieldNumber = 16;
  const ::arsdk::camera::alert::Event_TooDark& too_dark() const;
  ::arsdk::camera::alert::Event_TooDark* release_too_dark();
  ::arsdk::camera::alert::Event_TooDark* mutable_too_dark();
  void set_allocated_too_dark(::arsdk::camera::alert::Event_TooDark* too_dark);

  // .arsdk.camera.alert.Event.SensorFailure sensor_failure = 17;
  bool has_sensor_failure() const;
  void clear_sensor_failure();
  static const int kSensorFailureFieldNumber = 17;
  const ::arsdk::camera::alert::Event_SensorFailure& sensor_failure() const;
  ::arsdk::camera::alert::Event_SensorFailure* release_sensor_failure();
  ::arsdk::camera::alert::Event_SensorFailure* mutable_sensor_failure();
  void set_allocated_sensor_failure(::arsdk::camera::alert::Event_SensorFailure* sensor_failure);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.camera.alert.Event)
 private:
  class HasBitSetters;
  void set_has_too_dark();
  void set_has_sensor_failure();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::camera::alert::Event_TooDark* too_dark_;
    ::arsdk::camera::alert::Event_SensorFailure* sensor_failure_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fcamera_5falert_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// .google.protobuf.Empty get_alerts = 16;
inline bool Command::has_get_alerts() const {
  return id_case() == kGetAlerts;
}
inline void Command::set_has_get_alerts() {
  _oneof_case_[0] = kGetAlerts;
}
inline ::google::protobuf::Empty* Command::release_get_alerts() {
  // @@protoc_insertion_point(field_release:arsdk.camera.alert.Command.get_alerts)
  if (has_get_alerts()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.get_alerts_;
    id_.get_alerts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::get_alerts() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Command.get_alerts)
  return has_get_alerts()
      ? *id_.get_alerts_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_get_alerts() {
  if (!has_get_alerts()) {
    clear_id();
    set_has_get_alerts();
    id_.get_alerts_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.alert.Command.get_alerts)
  return id_.get_alerts_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_TooDark

// .arsdk.camera.alert.AlertState state = 1;
inline void Event_TooDark::clear_state() {
  state_ = 0;
}
inline ::arsdk::camera::alert::AlertState Event_TooDark::state() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Event.TooDark.state)
  return static_cast< ::arsdk::camera::alert::AlertState >(state_);
}
inline void Event_TooDark::set_state(::arsdk::camera::alert::AlertState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.alert.Event.TooDark.state)
}

// .arsdk.camera.alert.Camera camera = 2;
inline void Event_TooDark::clear_camera() {
  camera_ = 0;
}
inline ::arsdk::camera::alert::Camera Event_TooDark::camera() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Event.TooDark.camera)
  return static_cast< ::arsdk::camera::alert::Camera >(camera_);
}
inline void Event_TooDark::set_camera(::arsdk::camera::alert::Camera value) {
  
  camera_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.alert.Event.TooDark.camera)
}

// -------------------------------------------------------------------

// Event_SensorFailure

// .arsdk.camera.alert.AlertState state = 1;
inline void Event_SensorFailure::clear_state() {
  state_ = 0;
}
inline ::arsdk::camera::alert::AlertState Event_SensorFailure::state() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Event.SensorFailure.state)
  return static_cast< ::arsdk::camera::alert::AlertState >(state_);
}
inline void Event_SensorFailure::set_state(::arsdk::camera::alert::AlertState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.alert.Event.SensorFailure.state)
}

// .arsdk.camera.alert.Camera camera = 2;
inline void Event_SensorFailure::clear_camera() {
  camera_ = 0;
}
inline ::arsdk::camera::alert::Camera Event_SensorFailure::camera() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Event.SensorFailure.camera)
  return static_cast< ::arsdk::camera::alert::Camera >(camera_);
}
inline void Event_SensorFailure::set_camera(::arsdk::camera::alert::Camera value) {
  
  camera_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.alert.Event.SensorFailure.camera)
}

// -------------------------------------------------------------------

// Event

// .arsdk.camera.alert.Event.TooDark too_dark = 16;
inline bool Event::has_too_dark() const {
  return id_case() == kTooDark;
}
inline void Event::set_has_too_dark() {
  _oneof_case_[0] = kTooDark;
}
inline void Event::clear_too_dark() {
  if (has_too_dark()) {
    delete id_.too_dark_;
    clear_has_id();
  }
}
inline ::arsdk::camera::alert::Event_TooDark* Event::release_too_dark() {
  // @@protoc_insertion_point(field_release:arsdk.camera.alert.Event.too_dark)
  if (has_too_dark()) {
    clear_has_id();
      ::arsdk::camera::alert::Event_TooDark* temp = id_.too_dark_;
    id_.too_dark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::alert::Event_TooDark& Event::too_dark() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Event.too_dark)
  return has_too_dark()
      ? *id_.too_dark_
      : *reinterpret_cast< ::arsdk::camera::alert::Event_TooDark*>(&::arsdk::camera::alert::_Event_TooDark_default_instance_);
}
inline ::arsdk::camera::alert::Event_TooDark* Event::mutable_too_dark() {
  if (!has_too_dark()) {
    clear_id();
    set_has_too_dark();
    id_.too_dark_ = CreateMaybeMessage< ::arsdk::camera::alert::Event_TooDark >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.alert.Event.too_dark)
  return id_.too_dark_;
}

// .arsdk.camera.alert.Event.SensorFailure sensor_failure = 17;
inline bool Event::has_sensor_failure() const {
  return id_case() == kSensorFailure;
}
inline void Event::set_has_sensor_failure() {
  _oneof_case_[0] = kSensorFailure;
}
inline void Event::clear_sensor_failure() {
  if (has_sensor_failure()) {
    delete id_.sensor_failure_;
    clear_has_id();
  }
}
inline ::arsdk::camera::alert::Event_SensorFailure* Event::release_sensor_failure() {
  // @@protoc_insertion_point(field_release:arsdk.camera.alert.Event.sensor_failure)
  if (has_sensor_failure()) {
    clear_has_id();
      ::arsdk::camera::alert::Event_SensorFailure* temp = id_.sensor_failure_;
    id_.sensor_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::alert::Event_SensorFailure& Event::sensor_failure() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.alert.Event.sensor_failure)
  return has_sensor_failure()
      ? *id_.sensor_failure_
      : *reinterpret_cast< ::arsdk::camera::alert::Event_SensorFailure*>(&::arsdk::camera::alert::_Event_SensorFailure_default_instance_);
}
inline ::arsdk::camera::alert::Event_SensorFailure* Event::mutable_sensor_failure() {
  if (!has_sensor_failure()) {
    clear_id();
    set_has_sensor_failure();
    id_.sensor_failure_ = CreateMaybeMessage< ::arsdk::camera::alert::Event_SensorFailure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.alert.Event.sensor_failure)
  return id_.sensor_failure_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace alert
}  // namespace camera
}  // namespace arsdk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::arsdk::camera::alert::Camera> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::alert::Camera>() {
  return ::arsdk::camera::alert::Camera_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::alert::AlertState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::alert::AlertState>() {
  return ::arsdk::camera::alert::AlertState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fcamera_5falert_2eproto
