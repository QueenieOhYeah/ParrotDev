// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/camera2.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fcamera2_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fcamera2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fcamera2_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fcamera2_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fcamera2_2eproto();
namespace arsdk {
namespace camera {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class Capabilities_Rule;
class Capabilities_RuleDefaultTypeInternal;
extern Capabilities_RuleDefaultTypeInternal _Capabilities_Rule_default_instance_;
class Capabilities_Rule_SelectedFieldsEntry_DoNotUse;
class Capabilities_Rule_SelectedFieldsEntry_DoNotUseDefaultTypeInternal;
extern Capabilities_Rule_SelectedFieldsEntry_DoNotUseDefaultTypeInternal _Capabilities_Rule_SelectedFieldsEntry_DoNotUse_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_Configure;
class Command_ConfigureDefaultTypeInternal;
extern Command_ConfigureDefaultTypeInternal _Command_Configure_default_instance_;
class Command_GetState;
class Command_GetStateDefaultTypeInternal;
extern Command_GetStateDefaultTypeInternal _Command_GetState_default_instance_;
class Command_ListCameras;
class Command_ListCamerasDefaultTypeInternal;
extern Command_ListCamerasDefaultTypeInternal _Command_ListCameras_default_instance_;
class Command_LockExposure;
class Command_LockExposureDefaultTypeInternal;
extern Command_LockExposureDefaultTypeInternal _Command_LockExposure_default_instance_;
class Command_LockWhiteBalance;
class Command_LockWhiteBalanceDefaultTypeInternal;
extern Command_LockWhiteBalanceDefaultTypeInternal _Command_LockWhiteBalance_default_instance_;
class Command_ResetZoom;
class Command_ResetZoomDefaultTypeInternal;
extern Command_ResetZoomDefaultTypeInternal _Command_ResetZoom_default_instance_;
class Command_SetMediaMetadata;
class Command_SetMediaMetadataDefaultTypeInternal;
extern Command_SetMediaMetadataDefaultTypeInternal _Command_SetMediaMetadata_default_instance_;
class Command_SetZoomTarget;
class Command_SetZoomTargetDefaultTypeInternal;
extern Command_SetZoomTargetDefaultTypeInternal _Command_SetZoomTarget_default_instance_;
class Command_StartPhoto;
class Command_StartPhotoDefaultTypeInternal;
extern Command_StartPhotoDefaultTypeInternal _Command_StartPhoto_default_instance_;
class Command_StartRecording;
class Command_StartRecordingDefaultTypeInternal;
extern Command_StartRecordingDefaultTypeInternal _Command_StartRecording_default_instance_;
class Command_StopPhoto;
class Command_StopPhotoDefaultTypeInternal;
extern Command_StopPhotoDefaultTypeInternal _Command_StopPhoto_default_instance_;
class Command_StopRecording;
class Command_StopRecordingDefaultTypeInternal;
extern Command_StopRecordingDefaultTypeInternal _Command_StopRecording_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_SelectedFieldsEntry_DoNotUse;
class Config_SelectedFieldsEntry_DoNotUseDefaultTypeInternal;
extern Config_SelectedFieldsEntry_DoNotUseDefaultTypeInternal _Config_SelectedFieldsEntry_DoNotUse_default_instance_;
class DoubleRange;
class DoubleRangeDefaultTypeInternal;
extern DoubleRangeDefaultTypeInternal _DoubleRange_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_CameraList;
class Event_CameraListDefaultTypeInternal;
extern Event_CameraListDefaultTypeInternal _Event_CameraList_default_instance_;
class Event_CameraList_CamerasEntry_DoNotUse;
class Event_CameraList_CamerasEntry_DoNotUseDefaultTypeInternal;
extern Event_CameraList_CamerasEntry_DoNotUseDefaultTypeInternal _Event_CameraList_CamerasEntry_DoNotUse_default_instance_;
class Event_Exposure;
class Event_ExposureDefaultTypeInternal;
extern Event_ExposureDefaultTypeInternal _Event_Exposure_default_instance_;
class Event_NextPhotoInterval;
class Event_NextPhotoIntervalDefaultTypeInternal;
extern Event_NextPhotoIntervalDefaultTypeInternal _Event_NextPhotoInterval_default_instance_;
class Event_Photo;
class Event_PhotoDefaultTypeInternal;
extern Event_PhotoDefaultTypeInternal _Event_Photo_default_instance_;
class Event_Recording;
class Event_RecordingDefaultTypeInternal;
extern Event_RecordingDefaultTypeInternal _Event_Recording_default_instance_;
class Event_State;
class Event_StateDefaultTypeInternal;
extern Event_StateDefaultTypeInternal _Event_State_default_instance_;
class Event_State_ExposureLock;
class Event_State_ExposureLockDefaultTypeInternal;
extern Event_State_ExposureLockDefaultTypeInternal _Event_State_ExposureLock_default_instance_;
class Event_State_Photo;
class Event_State_PhotoDefaultTypeInternal;
extern Event_State_PhotoDefaultTypeInternal _Event_State_Photo_default_instance_;
class Event_State_Recording;
class Event_State_RecordingDefaultTypeInternal;
extern Event_State_RecordingDefaultTypeInternal _Event_State_Recording_default_instance_;
class Event_State_SelectedFieldsEntry_DoNotUse;
class Event_State_SelectedFieldsEntry_DoNotUseDefaultTypeInternal;
extern Event_State_SelectedFieldsEntry_DoNotUseDefaultTypeInternal _Event_State_SelectedFieldsEntry_DoNotUse_default_instance_;
class Event_State_WhiteBalanceLock;
class Event_State_WhiteBalanceLockDefaultTypeInternal;
extern Event_State_WhiteBalanceLockDefaultTypeInternal _Event_State_WhiteBalanceLock_default_instance_;
class Event_State_Zoom;
class Event_State_ZoomDefaultTypeInternal;
extern Event_State_ZoomDefaultTypeInternal _Event_State_Zoom_default_instance_;
class Event_ZoomLevel;
class Event_ZoomLevelDefaultTypeInternal;
extern Event_ZoomLevelDefaultTypeInternal _Event_ZoomLevel_default_instance_;
class ExposureRoi;
class ExposureRoiDefaultTypeInternal;
extern ExposureRoiDefaultTypeInternal _ExposureRoi_default_instance_;
class ExposureRoi_Center;
class ExposureRoi_CenterDefaultTypeInternal;
extern ExposureRoi_CenterDefaultTypeInternal _ExposureRoi_Center_default_instance_;
class MediaMetadata;
class MediaMetadataDefaultTypeInternal;
extern MediaMetadataDefaultTypeInternal _MediaMetadata_default_instance_;
class MediaMetadata_SelectedFieldsEntry_DoNotUse;
class MediaMetadata_SelectedFieldsEntry_DoNotUseDefaultTypeInternal;
extern MediaMetadata_SelectedFieldsEntry_DoNotUseDefaultTypeInternal _MediaMetadata_SelectedFieldsEntry_DoNotUse_default_instance_;
}  // namespace camera
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::camera::Capabilities* Arena::CreateMaybeMessage<::arsdk::camera::Capabilities>(Arena*);
template<> ::arsdk::camera::Capabilities_Rule* Arena::CreateMaybeMessage<::arsdk::camera::Capabilities_Rule>(Arena*);
template<> ::arsdk::camera::Capabilities_Rule_SelectedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::arsdk::camera::Capabilities_Rule_SelectedFieldsEntry_DoNotUse>(Arena*);
template<> ::arsdk::camera::Command* Arena::CreateMaybeMessage<::arsdk::camera::Command>(Arena*);
template<> ::arsdk::camera::Command_Configure* Arena::CreateMaybeMessage<::arsdk::camera::Command_Configure>(Arena*);
template<> ::arsdk::camera::Command_GetState* Arena::CreateMaybeMessage<::arsdk::camera::Command_GetState>(Arena*);
template<> ::arsdk::camera::Command_ListCameras* Arena::CreateMaybeMessage<::arsdk::camera::Command_ListCameras>(Arena*);
template<> ::arsdk::camera::Command_LockExposure* Arena::CreateMaybeMessage<::arsdk::camera::Command_LockExposure>(Arena*);
template<> ::arsdk::camera::Command_LockWhiteBalance* Arena::CreateMaybeMessage<::arsdk::camera::Command_LockWhiteBalance>(Arena*);
template<> ::arsdk::camera::Command_ResetZoom* Arena::CreateMaybeMessage<::arsdk::camera::Command_ResetZoom>(Arena*);
template<> ::arsdk::camera::Command_SetMediaMetadata* Arena::CreateMaybeMessage<::arsdk::camera::Command_SetMediaMetadata>(Arena*);
template<> ::arsdk::camera::Command_SetZoomTarget* Arena::CreateMaybeMessage<::arsdk::camera::Command_SetZoomTarget>(Arena*);
template<> ::arsdk::camera::Command_StartPhoto* Arena::CreateMaybeMessage<::arsdk::camera::Command_StartPhoto>(Arena*);
template<> ::arsdk::camera::Command_StartRecording* Arena::CreateMaybeMessage<::arsdk::camera::Command_StartRecording>(Arena*);
template<> ::arsdk::camera::Command_StopPhoto* Arena::CreateMaybeMessage<::arsdk::camera::Command_StopPhoto>(Arena*);
template<> ::arsdk::camera::Command_StopRecording* Arena::CreateMaybeMessage<::arsdk::camera::Command_StopRecording>(Arena*);
template<> ::arsdk::camera::Config* Arena::CreateMaybeMessage<::arsdk::camera::Config>(Arena*);
template<> ::arsdk::camera::Config_SelectedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::arsdk::camera::Config_SelectedFieldsEntry_DoNotUse>(Arena*);
template<> ::arsdk::camera::DoubleRange* Arena::CreateMaybeMessage<::arsdk::camera::DoubleRange>(Arena*);
template<> ::arsdk::camera::Event* Arena::CreateMaybeMessage<::arsdk::camera::Event>(Arena*);
template<> ::arsdk::camera::Event_CameraList* Arena::CreateMaybeMessage<::arsdk::camera::Event_CameraList>(Arena*);
template<> ::arsdk::camera::Event_CameraList_CamerasEntry_DoNotUse* Arena::CreateMaybeMessage<::arsdk::camera::Event_CameraList_CamerasEntry_DoNotUse>(Arena*);
template<> ::arsdk::camera::Event_Exposure* Arena::CreateMaybeMessage<::arsdk::camera::Event_Exposure>(Arena*);
template<> ::arsdk::camera::Event_NextPhotoInterval* Arena::CreateMaybeMessage<::arsdk::camera::Event_NextPhotoInterval>(Arena*);
template<> ::arsdk::camera::Event_Photo* Arena::CreateMaybeMessage<::arsdk::camera::Event_Photo>(Arena*);
template<> ::arsdk::camera::Event_Recording* Arena::CreateMaybeMessage<::arsdk::camera::Event_Recording>(Arena*);
template<> ::arsdk::camera::Event_State* Arena::CreateMaybeMessage<::arsdk::camera::Event_State>(Arena*);
template<> ::arsdk::camera::Event_State_ExposureLock* Arena::CreateMaybeMessage<::arsdk::camera::Event_State_ExposureLock>(Arena*);
template<> ::arsdk::camera::Event_State_Photo* Arena::CreateMaybeMessage<::arsdk::camera::Event_State_Photo>(Arena*);
template<> ::arsdk::camera::Event_State_Recording* Arena::CreateMaybeMessage<::arsdk::camera::Event_State_Recording>(Arena*);
template<> ::arsdk::camera::Event_State_SelectedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::arsdk::camera::Event_State_SelectedFieldsEntry_DoNotUse>(Arena*);
template<> ::arsdk::camera::Event_State_WhiteBalanceLock* Arena::CreateMaybeMessage<::arsdk::camera::Event_State_WhiteBalanceLock>(Arena*);
template<> ::arsdk::camera::Event_State_Zoom* Arena::CreateMaybeMessage<::arsdk::camera::Event_State_Zoom>(Arena*);
template<> ::arsdk::camera::Event_ZoomLevel* Arena::CreateMaybeMessage<::arsdk::camera::Event_ZoomLevel>(Arena*);
template<> ::arsdk::camera::ExposureRoi* Arena::CreateMaybeMessage<::arsdk::camera::ExposureRoi>(Arena*);
template<> ::arsdk::camera::ExposureRoi_Center* Arena::CreateMaybeMessage<::arsdk::camera::ExposureRoi_Center>(Arena*);
template<> ::arsdk::camera::MediaMetadata* Arena::CreateMaybeMessage<::arsdk::camera::MediaMetadata>(Arena*);
template<> ::arsdk::camera::MediaMetadata_SelectedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::arsdk::camera::MediaMetadata_SelectedFieldsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace camera {

enum AudioRecordingMode {
  AUDIO_RECORDING_MODE_MUTE = 0,
  AUDIO_RECORDING_MODE_DRONE = 1,
  AudioRecordingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  AudioRecordingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool AudioRecordingMode_IsValid(int value);
const AudioRecordingMode AudioRecordingMode_MIN = AUDIO_RECORDING_MODE_MUTE;
const AudioRecordingMode AudioRecordingMode_MAX = AUDIO_RECORDING_MODE_DRONE;
const int AudioRecordingMode_ARRAYSIZE = AudioRecordingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioRecordingMode_descriptor();
inline const ::std::string& AudioRecordingMode_Name(AudioRecordingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioRecordingMode_descriptor(), value);
}
inline bool AudioRecordingMode_Parse(
    const ::std::string& name, AudioRecordingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioRecordingMode>(
    AudioRecordingMode_descriptor(), name, value);
}
enum AutoRecordMode {
  AUTO_RECORD_MODE_DISABLED = 0,
  AUTO_RECORD_MODE_FLIGHT = 1,
  AutoRecordMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  AutoRecordMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool AutoRecordMode_IsValid(int value);
const AutoRecordMode AutoRecordMode_MIN = AUTO_RECORD_MODE_DISABLED;
const AutoRecordMode AutoRecordMode_MAX = AUTO_RECORD_MODE_FLIGHT;
const int AutoRecordMode_ARRAYSIZE = AutoRecordMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* AutoRecordMode_descriptor();
inline const ::std::string& AutoRecordMode_Name(AutoRecordMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    AutoRecordMode_descriptor(), value);
}
inline bool AutoRecordMode_Parse(
    const ::std::string& name, AutoRecordMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AutoRecordMode>(
    AutoRecordMode_descriptor(), name, value);
}
enum BracketingPreset {
  BRACKETING_PRESET_1EV = 0,
  BRACKETING_PRESET_2EV = 1,
  BRACKETING_PRESET_3EV = 2,
  BRACKETING_PRESET_1EV_2EV = 3,
  BRACKETING_PRESET_1EV_3EV = 4,
  BRACKETING_PRESET_2EV_3EV = 5,
  BRACKETING_PRESET_1EV_2EV_3EV = 6,
  BracketingPreset_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  BracketingPreset_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool BracketingPreset_IsValid(int value);
const BracketingPreset BracketingPreset_MIN = BRACKETING_PRESET_1EV;
const BracketingPreset BracketingPreset_MAX = BRACKETING_PRESET_1EV_2EV_3EV;
const int BracketingPreset_ARRAYSIZE = BracketingPreset_MAX + 1;

const ::google::protobuf::EnumDescriptor* BracketingPreset_descriptor();
inline const ::std::string& BracketingPreset_Name(BracketingPreset value) {
  return ::google::protobuf::internal::NameOfEnum(
    BracketingPreset_descriptor(), value);
}
inline bool BracketingPreset_Parse(
    const ::std::string& name, BracketingPreset* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BracketingPreset>(
    BracketingPreset_descriptor(), name, value);
}
enum BurstValue {
  BURST_VALUE_14_OVER_4S = 0,
  BURST_VALUE_14_OVER_2S = 1,
  BURST_VALUE_14_OVER_1S = 2,
  BURST_VALUE_10_OVER_4S = 3,
  BURST_VALUE_10_OVER_2S = 4,
  BURST_VALUE_10_OVER_1S = 5,
  BURST_VALUE_4_OVER_4S = 6,
  BURST_VALUE_4_OVER_2S = 7,
  BURST_VALUE_4_OVER_1S = 8,
  BurstValue_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  BurstValue_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool BurstValue_IsValid(int value);
const BurstValue BurstValue_MIN = BURST_VALUE_14_OVER_4S;
const BurstValue BurstValue_MAX = BURST_VALUE_4_OVER_1S;
const int BurstValue_ARRAYSIZE = BurstValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* BurstValue_descriptor();
inline const ::std::string& BurstValue_Name(BurstValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    BurstValue_descriptor(), value);
}
inline bool BurstValue_Parse(
    const ::std::string& name, BurstValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BurstValue>(
    BurstValue_descriptor(), name, value);
}
enum CameraMode {
  CAMERA_MODE_PHOTO = 0,
  CAMERA_MODE_RECORDING = 1,
  CameraMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CameraMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CameraMode_IsValid(int value);
const CameraMode CameraMode_MIN = CAMERA_MODE_PHOTO;
const CameraMode CameraMode_MAX = CAMERA_MODE_RECORDING;
const int CameraMode_ARRAYSIZE = CameraMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraMode_descriptor();
inline const ::std::string& CameraMode_Name(CameraMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraMode_descriptor(), value);
}
inline bool CameraMode_Parse(
    const ::std::string& name, CameraMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraMode>(
    CameraMode_descriptor(), name, value);
}
enum CameraModel {
  CAMERA_MODEL_MAIN = 0,
  CameraModel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CameraModel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CameraModel_IsValid(int value);
const CameraModel CameraModel_MIN = CAMERA_MODEL_MAIN;
const CameraModel CameraModel_MAX = CAMERA_MODEL_MAIN;
const int CameraModel_ARRAYSIZE = CameraModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraModel_descriptor();
inline const ::std::string& CameraModel_Name(CameraModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraModel_descriptor(), value);
}
inline bool CameraModel_Parse(
    const ::std::string& name, CameraModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraModel>(
    CameraModel_descriptor(), name, value);
}
enum DigitalSignature {
  DIGITAL_SIGNATURE_NONE = 0,
  DIGITAL_SIGNATURE_DRONE = 1,
  DigitalSignature_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DigitalSignature_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DigitalSignature_IsValid(int value);
const DigitalSignature DigitalSignature_MIN = DIGITAL_SIGNATURE_NONE;
const DigitalSignature DigitalSignature_MAX = DIGITAL_SIGNATURE_DRONE;
const int DigitalSignature_ARRAYSIZE = DigitalSignature_MAX + 1;

const ::google::protobuf::EnumDescriptor* DigitalSignature_descriptor();
inline const ::std::string& DigitalSignature_Name(DigitalSignature value) {
  return ::google::protobuf::internal::NameOfEnum(
    DigitalSignature_descriptor(), value);
}
inline bool DigitalSignature_Parse(
    const ::std::string& name, DigitalSignature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DigitalSignature>(
    DigitalSignature_descriptor(), name, value);
}
enum DynamicRange {
  DYNAMIC_RANGE_STANDARD = 0,
  DYNAMIC_RANGE_HDR8 = 1,
  DYNAMIC_RANGE_HDR10 = 2,
  DynamicRange_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DynamicRange_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DynamicRange_IsValid(int value);
const DynamicRange DynamicRange_MIN = DYNAMIC_RANGE_STANDARD;
const DynamicRange DynamicRange_MAX = DYNAMIC_RANGE_HDR10;
const int DynamicRange_ARRAYSIZE = DynamicRange_MAX + 1;

const ::google::protobuf::EnumDescriptor* DynamicRange_descriptor();
inline const ::std::string& DynamicRange_Name(DynamicRange value) {
  return ::google::protobuf::internal::NameOfEnum(
    DynamicRange_descriptor(), value);
}
inline bool DynamicRange_Parse(
    const ::std::string& name, DynamicRange* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DynamicRange>(
    DynamicRange_descriptor(), name, value);
}
enum EvCompensation {
  EV_COMPENSATION_MINUS_3_00 = 0,
  EV_COMPENSATION_MINUS_2_67 = 1,
  EV_COMPENSATION_MINUS_2_33 = 2,
  EV_COMPENSATION_MINUS_2_00 = 3,
  EV_COMPENSATION_MINUS_1_67 = 4,
  EV_COMPENSATION_MINUS_1_33 = 5,
  EV_COMPENSATION_MINUS_1_00 = 6,
  EV_COMPENSATION_MINUS_0_67 = 7,
  EV_COMPENSATION_MINUS_0_33 = 8,
  EV_COMPENSATION_0_00 = 9,
  EV_COMPENSATION_0_33 = 10,
  EV_COMPENSATION_0_67 = 11,
  EV_COMPENSATION_1_00 = 12,
  EV_COMPENSATION_1_33 = 13,
  EV_COMPENSATION_1_67 = 14,
  EV_COMPENSATION_2_00 = 15,
  EV_COMPENSATION_2_33 = 16,
  EV_COMPENSATION_2_67 = 17,
  EV_COMPENSATION_3_00 = 18,
  EvCompensation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  EvCompensation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool EvCompensation_IsValid(int value);
const EvCompensation EvCompensation_MIN = EV_COMPENSATION_MINUS_3_00;
const EvCompensation EvCompensation_MAX = EV_COMPENSATION_3_00;
const int EvCompensation_ARRAYSIZE = EvCompensation_MAX + 1;

const ::google::protobuf::EnumDescriptor* EvCompensation_descriptor();
inline const ::std::string& EvCompensation_Name(EvCompensation value) {
  return ::google::protobuf::internal::NameOfEnum(
    EvCompensation_descriptor(), value);
}
inline bool EvCompensation_Parse(
    const ::std::string& name, EvCompensation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EvCompensation>(
    EvCompensation_descriptor(), name, value);
}
enum ExposureLockMode {
  EXPOSURE_LOCK_MODE_UNLOCKED = 0,
  EXPOSURE_LOCK_MODE_FULL_LOCK = 1,
  EXPOSURE_LOCK_MODE_ROI_LOCK = 2,
  ExposureLockMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExposureLockMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExposureLockMode_IsValid(int value);
const ExposureLockMode ExposureLockMode_MIN = EXPOSURE_LOCK_MODE_UNLOCKED;
const ExposureLockMode ExposureLockMode_MAX = EXPOSURE_LOCK_MODE_ROI_LOCK;
const int ExposureLockMode_ARRAYSIZE = ExposureLockMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExposureLockMode_descriptor();
inline const ::std::string& ExposureLockMode_Name(ExposureLockMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExposureLockMode_descriptor(), value);
}
inline bool ExposureLockMode_Parse(
    const ::std::string& name, ExposureLockMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExposureLockMode>(
    ExposureLockMode_descriptor(), name, value);
}
enum ExposureMetering {
  EXPOSURE_METERING_STANDARD = 0,
  EXPOSURE_METERING_CENTER_TOP = 1,
  ExposureMetering_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExposureMetering_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExposureMetering_IsValid(int value);
const ExposureMetering ExposureMetering_MIN = EXPOSURE_METERING_STANDARD;
const ExposureMetering ExposureMetering_MAX = EXPOSURE_METERING_CENTER_TOP;
const int ExposureMetering_ARRAYSIZE = ExposureMetering_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExposureMetering_descriptor();
inline const ::std::string& ExposureMetering_Name(ExposureMetering value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExposureMetering_descriptor(), value);
}
inline bool ExposureMetering_Parse(
    const ::std::string& name, ExposureMetering* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExposureMetering>(
    ExposureMetering_descriptor(), name, value);
}
enum ExposureMode {
  EXPOSURE_MODE_AUTOMATIC = 0,
  EXPOSURE_MODE_AUTOMATIC_PREFER_ISO_SENSITIVITY = 1,
  EXPOSURE_MODE_AUTOMATIC_PREFER_SHUTTER_SPEED = 2,
  EXPOSURE_MODE_MANUAL_ISO_SENSITIVITY = 3,
  EXPOSURE_MODE_MANUAL_SHUTTER_SPEED = 4,
  EXPOSURE_MODE_MANUAL = 5,
  ExposureMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExposureMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExposureMode_IsValid(int value);
const ExposureMode ExposureMode_MIN = EXPOSURE_MODE_AUTOMATIC;
const ExposureMode ExposureMode_MAX = EXPOSURE_MODE_MANUAL;
const int ExposureMode_ARRAYSIZE = ExposureMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExposureMode_descriptor();
inline const ::std::string& ExposureMode_Name(ExposureMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExposureMode_descriptor(), value);
}
inline bool ExposureMode_Parse(
    const ::std::string& name, ExposureMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExposureMode>(
    ExposureMode_descriptor(), name, value);
}
enum Framerate {
  FRAMERATE_24 = 0,
  FRAMERATE_25 = 1,
  FRAMERATE_30 = 2,
  FRAMERATE_48 = 3,
  FRAMERATE_50 = 4,
  FRAMERATE_60 = 5,
  FRAMERATE_96 = 6,
  FRAMERATE_100 = 7,
  FRAMERATE_120 = 8,
  Framerate_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Framerate_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Framerate_IsValid(int value);
const Framerate Framerate_MIN = FRAMERATE_24;
const Framerate Framerate_MAX = FRAMERATE_120;
const int Framerate_ARRAYSIZE = Framerate_MAX + 1;

const ::google::protobuf::EnumDescriptor* Framerate_descriptor();
inline const ::std::string& Framerate_Name(Framerate value) {
  return ::google::protobuf::internal::NameOfEnum(
    Framerate_descriptor(), value);
}
inline bool Framerate_Parse(
    const ::std::string& name, Framerate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Framerate>(
    Framerate_descriptor(), name, value);
}
enum ImageStyle {
  IMAGE_STYLE_CUSTOM = 0,
  IMAGE_STYLE_STANDARD = 1,
  IMAGE_STYLE_PLOG = 2,
  IMAGE_STYLE_INTENSE = 3,
  IMAGE_STYLE_PASTEL = 4,
  IMAGE_STYLE_PHOTOGRAMMETRY = 5,
  ImageStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ImageStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ImageStyle_IsValid(int value);
const ImageStyle ImageStyle_MIN = IMAGE_STYLE_CUSTOM;
const ImageStyle ImageStyle_MAX = IMAGE_STYLE_PHOTOGRAMMETRY;
const int ImageStyle_ARRAYSIZE = ImageStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageStyle_descriptor();
inline const ::std::string& ImageStyle_Name(ImageStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageStyle_descriptor(), value);
}
inline bool ImageStyle_Parse(
    const ::std::string& name, ImageStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageStyle>(
    ImageStyle_descriptor(), name, value);
}
enum IsoSensitivity {
  ISO_SENSITIVITY_25 = 0,
  ISO_SENSITIVITY_50 = 1,
  ISO_SENSITIVITY_64 = 2,
  ISO_SENSITIVITY_80 = 3,
  ISO_SENSITIVITY_100 = 4,
  ISO_SENSITIVITY_125 = 5,
  ISO_SENSITIVITY_160 = 6,
  ISO_SENSITIVITY_200 = 7,
  ISO_SENSITIVITY_250 = 8,
  ISO_SENSITIVITY_320 = 9,
  ISO_SENSITIVITY_400 = 10,
  ISO_SENSITIVITY_500 = 11,
  ISO_SENSITIVITY_640 = 12,
  ISO_SENSITIVITY_800 = 13,
  ISO_SENSITIVITY_1000 = 14,
  ISO_SENSITIVITY_1200 = 15,
  ISO_SENSITIVITY_1600 = 16,
  ISO_SENSITIVITY_2000 = 17,
  ISO_SENSITIVITY_2500 = 18,
  ISO_SENSITIVITY_3200 = 19,
  ISO_SENSITIVITY_4000 = 20,
  ISO_SENSITIVITY_5000 = 21,
  ISO_SENSITIVITY_6400 = 22,
  ISO_SENSITIVITY_8000 = 23,
  ISO_SENSITIVITY_10000 = 24,
  ISO_SENSITIVITY_12800 = 25,
  ISO_SENSITIVITY_16000 = 26,
  ISO_SENSITIVITY_20000 = 27,
  ISO_SENSITIVITY_25600 = 28,
  ISO_SENSITIVITY_32000 = 29,
  ISO_SENSITIVITY_40000 = 30,
  ISO_SENSITIVITY_51200 = 31,
  IsoSensitivity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  IsoSensitivity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool IsoSensitivity_IsValid(int value);
const IsoSensitivity IsoSensitivity_MIN = ISO_SENSITIVITY_25;
const IsoSensitivity IsoSensitivity_MAX = ISO_SENSITIVITY_51200;
const int IsoSensitivity_ARRAYSIZE = IsoSensitivity_MAX + 1;

const ::google::protobuf::EnumDescriptor* IsoSensitivity_descriptor();
inline const ::std::string& IsoSensitivity_Name(IsoSensitivity value) {
  return ::google::protobuf::internal::NameOfEnum(
    IsoSensitivity_descriptor(), value);
}
inline bool IsoSensitivity_Parse(
    const ::std::string& name, IsoSensitivity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IsoSensitivity>(
    IsoSensitivity_descriptor(), name, value);
}
enum PhotoState {
  PHOTO_STATE_UNAVAILABLE = 0,
  PHOTO_STATE_INACTIVE = 1,
  PHOTO_STATE_ACTIVE = 2,
  PhotoState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoState_IsValid(int value);
const PhotoState PhotoState_MIN = PHOTO_STATE_UNAVAILABLE;
const PhotoState PhotoState_MAX = PHOTO_STATE_ACTIVE;
const int PhotoState_ARRAYSIZE = PhotoState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoState_descriptor();
inline const ::std::string& PhotoState_Name(PhotoState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoState_descriptor(), value);
}
inline bool PhotoState_Parse(
    const ::std::string& name, PhotoState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoState>(
    PhotoState_descriptor(), name, value);
}
enum PhotoEvent {
  PHOTO_EVENT_START = 0,
  PHOTO_EVENT_TAKING_PHOTO = 1,
  PHOTO_EVENT_STOP = 4,
  PhotoEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoEvent_IsValid(int value);
const PhotoEvent PhotoEvent_MIN = PHOTO_EVENT_START;
const PhotoEvent PhotoEvent_MAX = PHOTO_EVENT_STOP;
const int PhotoEvent_ARRAYSIZE = PhotoEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoEvent_descriptor();
inline const ::std::string& PhotoEvent_Name(PhotoEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoEvent_descriptor(), value);
}
inline bool PhotoEvent_Parse(
    const ::std::string& name, PhotoEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoEvent>(
    PhotoEvent_descriptor(), name, value);
}
enum PhotoFileFormat {
  PHOTO_FILE_FORMAT_JPEG = 0,
  PHOTO_FILE_FORMAT_DNG_JPEG = 2,
  PhotoFileFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoFileFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoFileFormat_IsValid(int value);
const PhotoFileFormat PhotoFileFormat_MIN = PHOTO_FILE_FORMAT_JPEG;
const PhotoFileFormat PhotoFileFormat_MAX = PHOTO_FILE_FORMAT_DNG_JPEG;
const int PhotoFileFormat_ARRAYSIZE = PhotoFileFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoFileFormat_descriptor();
inline const ::std::string& PhotoFileFormat_Name(PhotoFileFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoFileFormat_descriptor(), value);
}
inline bool PhotoFileFormat_Parse(
    const ::std::string& name, PhotoFileFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoFileFormat>(
    PhotoFileFormat_descriptor(), name, value);
}
enum PhotoFormat {
  PHOTO_FORMAT_FULL_FRAME = 0,
  PHOTO_FORMAT_RECTILINEAR = 1,
  PHOTO_FORMAT_FULL_FRAME_STABILIZED = 2,
  PhotoFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoFormat_IsValid(int value);
const PhotoFormat PhotoFormat_MIN = PHOTO_FORMAT_FULL_FRAME;
const PhotoFormat PhotoFormat_MAX = PHOTO_FORMAT_FULL_FRAME_STABILIZED;
const int PhotoFormat_ARRAYSIZE = PhotoFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoFormat_descriptor();
inline const ::std::string& PhotoFormat_Name(PhotoFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoFormat_descriptor(), value);
}
inline bool PhotoFormat_Parse(
    const ::std::string& name, PhotoFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoFormat>(
    PhotoFormat_descriptor(), name, value);
}
enum PhotoMode {
  PHOTO_MODE_SINGLE = 0,
  PHOTO_MODE_BRACKETING = 1,
  PHOTO_MODE_BURST = 2,
  PHOTO_MODE_TIME_LAPSE = 3,
  PHOTO_MODE_GPS_LAPSE = 4,
  PhotoMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoMode_IsValid(int value);
const PhotoMode PhotoMode_MIN = PHOTO_MODE_SINGLE;
const PhotoMode PhotoMode_MAX = PHOTO_MODE_GPS_LAPSE;
const int PhotoMode_ARRAYSIZE = PhotoMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoMode_descriptor();
inline const ::std::string& PhotoMode_Name(PhotoMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoMode_descriptor(), value);
}
inline bool PhotoMode_Parse(
    const ::std::string& name, PhotoMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoMode>(
    PhotoMode_descriptor(), name, value);
}
enum PhotoResolution {
  PHOTO_RESOLUTION_48_MEGA_PIXELS = 0,
  PHOTO_RESOLUTION_12_MEGA_PIXELS = 2,
  PhotoResolution_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoResolution_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoResolution_IsValid(int value);
const PhotoResolution PhotoResolution_MIN = PHOTO_RESOLUTION_48_MEGA_PIXELS;
const PhotoResolution PhotoResolution_MAX = PHOTO_RESOLUTION_12_MEGA_PIXELS;
const int PhotoResolution_ARRAYSIZE = PhotoResolution_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoResolution_descriptor();
inline const ::std::string& PhotoResolution_Name(PhotoResolution value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoResolution_descriptor(), value);
}
inline bool PhotoResolution_Parse(
    const ::std::string& name, PhotoResolution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoResolution>(
    PhotoResolution_descriptor(), name, value);
}
enum PhotoStopReason {
  PHOTO_STOP_REASON_USER_REQUEST = 0,
  PHOTO_STOP_REASON_CAPTURE_DONE = 1,
  PHOTO_STOP_REASON_CONFIGURATION_CHANGE = 2,
  PHOTO_STOP_REASON_INTERNAL_ERROR = 3,
  PHOTO_STOP_REASON_INSUFFICIENT_STORAGE_SPACE = 4,
  PhotoStopReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoStopReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoStopReason_IsValid(int value);
const PhotoStopReason PhotoStopReason_MIN = PHOTO_STOP_REASON_USER_REQUEST;
const PhotoStopReason PhotoStopReason_MAX = PHOTO_STOP_REASON_INSUFFICIENT_STORAGE_SPACE;
const int PhotoStopReason_ARRAYSIZE = PhotoStopReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoStopReason_descriptor();
inline const ::std::string& PhotoStopReason_Name(PhotoStopReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoStopReason_descriptor(), value);
}
inline bool PhotoStopReason_Parse(
    const ::std::string& name, PhotoStopReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoStopReason>(
    PhotoStopReason_descriptor(), name, value);
}
enum PhotoStreamingMode {
  PHOTO_STREAMING_MODE_INTERRUPT = 0,
  PHOTO_STREAMING_MODE_CONTINUOUS = 1,
  PhotoStreamingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PhotoStreamingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PhotoStreamingMode_IsValid(int value);
const PhotoStreamingMode PhotoStreamingMode_MIN = PHOTO_STREAMING_MODE_INTERRUPT;
const PhotoStreamingMode PhotoStreamingMode_MAX = PHOTO_STREAMING_MODE_CONTINUOUS;
const int PhotoStreamingMode_ARRAYSIZE = PhotoStreamingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoStreamingMode_descriptor();
inline const ::std::string& PhotoStreamingMode_Name(PhotoStreamingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoStreamingMode_descriptor(), value);
}
inline bool PhotoStreamingMode_Parse(
    const ::std::string& name, PhotoStreamingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoStreamingMode>(
    PhotoStreamingMode_descriptor(), name, value);
}
enum RecordingEvent {
  RECORDING_EVENT_START = 0,
  RECORDING_EVENT_STOP = 1,
  RECORDING_EVENT_STOPPING = 2,
  RecordingEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RecordingEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RecordingEvent_IsValid(int value);
const RecordingEvent RecordingEvent_MIN = RECORDING_EVENT_START;
const RecordingEvent RecordingEvent_MAX = RECORDING_EVENT_STOPPING;
const int RecordingEvent_ARRAYSIZE = RecordingEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordingEvent_descriptor();
inline const ::std::string& RecordingEvent_Name(RecordingEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordingEvent_descriptor(), value);
}
inline bool RecordingEvent_Parse(
    const ::std::string& name, RecordingEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordingEvent>(
    RecordingEvent_descriptor(), name, value);
}
enum RecordingState {
  RECORDING_STATE_UNAVAILABLE = 0,
  RECORDING_STATE_INACTIVE = 1,
  RECORDING_STATE_ACTIVE = 3,
  RecordingState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RecordingState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RecordingState_IsValid(int value);
const RecordingState RecordingState_MIN = RECORDING_STATE_UNAVAILABLE;
const RecordingState RecordingState_MAX = RECORDING_STATE_ACTIVE;
const int RecordingState_ARRAYSIZE = RecordingState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordingState_descriptor();
inline const ::std::string& RecordingState_Name(RecordingState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordingState_descriptor(), value);
}
inline bool RecordingState_Parse(
    const ::std::string& name, RecordingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordingState>(
    RecordingState_descriptor(), name, value);
}
enum RecordingStopReason {
  RECORDING_STOP_REASON_USER_REQUEST = 0,
  RECORDING_STOP_REASON_CONFIGURATION_CHANGE = 2,
  RECORDING_STOP_REASON_INTERNAL_ERROR = 3,
  RECORDING_STOP_REASON_INSUFFICIENT_STORAGE_SPACE = 4,
  RECORDING_STOP_REASON_INSUFFICIENT_STORAGE_SPEED = 5,
  RecordingStopReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RecordingStopReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RecordingStopReason_IsValid(int value);
const RecordingStopReason RecordingStopReason_MIN = RECORDING_STOP_REASON_USER_REQUEST;
const RecordingStopReason RecordingStopReason_MAX = RECORDING_STOP_REASON_INSUFFICIENT_STORAGE_SPEED;
const int RecordingStopReason_ARRAYSIZE = RecordingStopReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordingStopReason_descriptor();
inline const ::std::string& RecordingStopReason_Name(RecordingStopReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordingStopReason_descriptor(), value);
}
inline bool RecordingStopReason_Parse(
    const ::std::string& name, RecordingStopReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordingStopReason>(
    RecordingStopReason_descriptor(), name, value);
}
enum VideoRecordingMode {
  VIDEO_RECORDING_MODE_STANDARD = 0,
  VideoRecordingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  VideoRecordingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool VideoRecordingMode_IsValid(int value);
const VideoRecordingMode VideoRecordingMode_MIN = VIDEO_RECORDING_MODE_STANDARD;
const VideoRecordingMode VideoRecordingMode_MAX = VIDEO_RECORDING_MODE_STANDARD;
const int VideoRecordingMode_ARRAYSIZE = VideoRecordingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoRecordingMode_descriptor();
inline const ::std::string& VideoRecordingMode_Name(VideoRecordingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoRecordingMode_descriptor(), value);
}
inline bool VideoRecordingMode_Parse(
    const ::std::string& name, VideoRecordingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoRecordingMode>(
    VideoRecordingMode_descriptor(), name, value);
}
enum ShutterSpeed {
  SHUTTER_SPEED_1_OVER_10000 = 0,
  SHUTTER_SPEED_1_OVER_8000 = 1,
  SHUTTER_SPEED_1_OVER_6400 = 2,
  SHUTTER_SPEED_1_OVER_5000 = 3,
  SHUTTER_SPEED_1_OVER_4000 = 4,
  SHUTTER_SPEED_1_OVER_3200 = 5,
  SHUTTER_SPEED_1_OVER_2500 = 6,
  SHUTTER_SPEED_1_OVER_2000 = 7,
  SHUTTER_SPEED_1_OVER_1600 = 8,
  SHUTTER_SPEED_1_OVER_1250 = 9,
  SHUTTER_SPEED_1_OVER_1000 = 10,
  SHUTTER_SPEED_1_OVER_800 = 11,
  SHUTTER_SPEED_1_OVER_640 = 12,
  SHUTTER_SPEED_1_OVER_500 = 13,
  SHUTTER_SPEED_1_OVER_400 = 14,
  SHUTTER_SPEED_1_OVER_320 = 15,
  SHUTTER_SPEED_1_OVER_240 = 16,
  SHUTTER_SPEED_1_OVER_200 = 17,
  SHUTTER_SPEED_1_OVER_160 = 18,
  SHUTTER_SPEED_1_OVER_120 = 19,
  SHUTTER_SPEED_1_OVER_100 = 20,
  SHUTTER_SPEED_1_OVER_80 = 21,
  SHUTTER_SPEED_1_OVER_60 = 22,
  SHUTTER_SPEED_1_OVER_50 = 23,
  SHUTTER_SPEED_1_OVER_40 = 24,
  SHUTTER_SPEED_1_OVER_30 = 25,
  SHUTTER_SPEED_1_OVER_25 = 26,
  SHUTTER_SPEED_1_OVER_15 = 27,
  SHUTTER_SPEED_1_OVER_10 = 28,
  SHUTTER_SPEED_1_OVER_8 = 29,
  SHUTTER_SPEED_1_OVER_6 = 30,
  SHUTTER_SPEED_1_OVER_4 = 31,
  SHUTTER_SPEED_1_OVER_3 = 32,
  SHUTTER_SPEED_1_OVER_2 = 33,
  SHUTTER_SPEED_1_OVER_1_POINT_5 = 34,
  SHUTTER_SPEED_1 = 35,
  ShutterSpeed_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ShutterSpeed_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ShutterSpeed_IsValid(int value);
const ShutterSpeed ShutterSpeed_MIN = SHUTTER_SPEED_1_OVER_10000;
const ShutterSpeed ShutterSpeed_MAX = SHUTTER_SPEED_1;
const int ShutterSpeed_ARRAYSIZE = ShutterSpeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShutterSpeed_descriptor();
inline const ::std::string& ShutterSpeed_Name(ShutterSpeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShutterSpeed_descriptor(), value);
}
inline bool ShutterSpeed_Parse(
    const ::std::string& name, ShutterSpeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShutterSpeed>(
    ShutterSpeed_descriptor(), name, value);
}
enum StoragePolicy {
  STORAGE_POLICY_AUTO = 0,
  STORAGE_POLICY_INTERNAL = 1,
  STORAGE_POLICY_REMOVABLE = 2,
  StoragePolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  StoragePolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool StoragePolicy_IsValid(int value);
const StoragePolicy StoragePolicy_MIN = STORAGE_POLICY_AUTO;
const StoragePolicy StoragePolicy_MAX = STORAGE_POLICY_REMOVABLE;
const int StoragePolicy_ARRAYSIZE = StoragePolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoragePolicy_descriptor();
inline const ::std::string& StoragePolicy_Name(StoragePolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoragePolicy_descriptor(), value);
}
inline bool StoragePolicy_Parse(
    const ::std::string& name, StoragePolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoragePolicy>(
    StoragePolicy_descriptor(), name, value);
}
enum StorageType {
  STORAGE_TYPE_INTERNAL = 0,
  STORAGE_TYPE_REMOVABLE = 1,
  StorageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  StorageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool StorageType_IsValid(int value);
const StorageType StorageType_MIN = STORAGE_TYPE_INTERNAL;
const StorageType StorageType_MAX = STORAGE_TYPE_REMOVABLE;
const int StorageType_ARRAYSIZE = StorageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StorageType_descriptor();
inline const ::std::string& StorageType_Name(StorageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StorageType_descriptor(), value);
}
inline bool StorageType_Parse(
    const ::std::string& name, StorageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StorageType>(
    StorageType_descriptor(), name, value);
}
enum VideoCodec {
  VIDEO_CODEC_H264 = 0,
  VIDEO_CODEC_H265 = 1,
  VideoCodec_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  VideoCodec_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool VideoCodec_IsValid(int value);
const VideoCodec VideoCodec_MIN = VIDEO_CODEC_H264;
const VideoCodec VideoCodec_MAX = VIDEO_CODEC_H265;
const int VideoCodec_ARRAYSIZE = VideoCodec_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoCodec_descriptor();
inline const ::std::string& VideoCodec_Name(VideoCodec value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoCodec_descriptor(), value);
}
inline bool VideoCodec_Parse(
    const ::std::string& name, VideoCodec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoCodec>(
    VideoCodec_descriptor(), name, value);
}
enum VideoResolution {
  VIDEO_RESOLUTION_RESERVED = 0,
  VIDEO_RESOLUTION_2160P = 1,
  VIDEO_RESOLUTION_1080P = 3,
  VideoResolution_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  VideoResolution_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool VideoResolution_IsValid(int value);
const VideoResolution VideoResolution_MIN = VIDEO_RESOLUTION_RESERVED;
const VideoResolution VideoResolution_MAX = VIDEO_RESOLUTION_1080P;
const int VideoResolution_ARRAYSIZE = VideoResolution_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoResolution_descriptor();
inline const ::std::string& VideoResolution_Name(VideoResolution value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoResolution_descriptor(), value);
}
inline bool VideoResolution_Parse(
    const ::std::string& name, VideoResolution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoResolution>(
    VideoResolution_descriptor(), name, value);
}
enum WhiteBalanceLockMode {
  WHITE_BALANCE_LOCK_MODE_UNLOCKED = 0,
  WHITE_BALANCE_LOCK_MODE_LOCKED = 1,
  WhiteBalanceLockMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WhiteBalanceLockMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WhiteBalanceLockMode_IsValid(int value);
const WhiteBalanceLockMode WhiteBalanceLockMode_MIN = WHITE_BALANCE_LOCK_MODE_UNLOCKED;
const WhiteBalanceLockMode WhiteBalanceLockMode_MAX = WHITE_BALANCE_LOCK_MODE_LOCKED;
const int WhiteBalanceLockMode_ARRAYSIZE = WhiteBalanceLockMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhiteBalanceLockMode_descriptor();
inline const ::std::string& WhiteBalanceLockMode_Name(WhiteBalanceLockMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhiteBalanceLockMode_descriptor(), value);
}
inline bool WhiteBalanceLockMode_Parse(
    const ::std::string& name, WhiteBalanceLockMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhiteBalanceLockMode>(
    WhiteBalanceLockMode_descriptor(), name, value);
}
enum WhiteBalanceMode {
  WHITE_BALANCE_MODE_CUSTOM = 0,
  WHITE_BALANCE_MODE_AUTOMATIC = 1,
  WHITE_BALANCE_MODE_CANDLE = 2,
  WHITE_BALANCE_MODE_SUNSET = 3,
  WHITE_BALANCE_MODE_INCANDESCENT = 4,
  WHITE_BALANCE_MODE_WARM_WHITE_FLUORESCENT = 5,
  WHITE_BALANCE_MODE_HALOGEN = 6,
  WHITE_BALANCE_MODE_FLUORESCENT = 7,
  WHITE_BALANCE_MODE_COOL_WHITE_FLUORESCENT = 8,
  WHITE_BALANCE_MODE_FLASH = 9,
  WHITE_BALANCE_MODE_DAYLIGHT = 10,
  WHITE_BALANCE_MODE_SUNNY = 11,
  WHITE_BALANCE_MODE_CLOUDY = 12,
  WHITE_BALANCE_MODE_SNOW = 13,
  WHITE_BALANCE_MODE_HAZY = 14,
  WHITE_BALANCE_MODE_SHADED = 15,
  WHITE_BALANCE_MODE_GREEN_FOLIAGE = 16,
  WHITE_BALANCE_MODE_BLUE_SKY = 17,
  WhiteBalanceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WhiteBalanceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WhiteBalanceMode_IsValid(int value);
const WhiteBalanceMode WhiteBalanceMode_MIN = WHITE_BALANCE_MODE_CUSTOM;
const WhiteBalanceMode WhiteBalanceMode_MAX = WHITE_BALANCE_MODE_BLUE_SKY;
const int WhiteBalanceMode_ARRAYSIZE = WhiteBalanceMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhiteBalanceMode_descriptor();
inline const ::std::string& WhiteBalanceMode_Name(WhiteBalanceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhiteBalanceMode_descriptor(), value);
}
inline bool WhiteBalanceMode_Parse(
    const ::std::string& name, WhiteBalanceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhiteBalanceMode>(
    WhiteBalanceMode_descriptor(), name, value);
}
enum WhiteBalanceTemperature {
  WHITE_BALANCE_TEMPERATURE_1500 = 0,
  WHITE_BALANCE_TEMPERATURE_1750 = 1,
  WHITE_BALANCE_TEMPERATURE_2000 = 2,
  WHITE_BALANCE_TEMPERATURE_2250 = 3,
  WHITE_BALANCE_TEMPERATURE_2500 = 4,
  WHITE_BALANCE_TEMPERATURE_2750 = 5,
  WHITE_BALANCE_TEMPERATURE_3000 = 6,
  WHITE_BALANCE_TEMPERATURE_3250 = 7,
  WHITE_BALANCE_TEMPERATURE_3500 = 8,
  WHITE_BALANCE_TEMPERATURE_3750 = 9,
  WHITE_BALANCE_TEMPERATURE_4000 = 10,
  WHITE_BALANCE_TEMPERATURE_4250 = 11,
  WHITE_BALANCE_TEMPERATURE_4500 = 12,
  WHITE_BALANCE_TEMPERATURE_4750 = 13,
  WHITE_BALANCE_TEMPERATURE_5000 = 14,
  WHITE_BALANCE_TEMPERATURE_5250 = 15,
  WHITE_BALANCE_TEMPERATURE_5500 = 16,
  WHITE_BALANCE_TEMPERATURE_5750 = 17,
  WHITE_BALANCE_TEMPERATURE_6000 = 18,
  WHITE_BALANCE_TEMPERATURE_6250 = 19,
  WHITE_BALANCE_TEMPERATURE_6500 = 20,
  WHITE_BALANCE_TEMPERATURE_6750 = 21,
  WHITE_BALANCE_TEMPERATURE_7000 = 22,
  WHITE_BALANCE_TEMPERATURE_7250 = 23,
  WHITE_BALANCE_TEMPERATURE_7500 = 24,
  WHITE_BALANCE_TEMPERATURE_7750 = 25,
  WHITE_BALANCE_TEMPERATURE_8000 = 26,
  WHITE_BALANCE_TEMPERATURE_8250 = 27,
  WHITE_BALANCE_TEMPERATURE_8500 = 28,
  WHITE_BALANCE_TEMPERATURE_8750 = 29,
  WHITE_BALANCE_TEMPERATURE_9000 = 30,
  WHITE_BALANCE_TEMPERATURE_9250 = 31,
  WHITE_BALANCE_TEMPERATURE_9500 = 32,
  WHITE_BALANCE_TEMPERATURE_9750 = 33,
  WHITE_BALANCE_TEMPERATURE_10000 = 34,
  WHITE_BALANCE_TEMPERATURE_10250 = 35,
  WHITE_BALANCE_TEMPERATURE_10500 = 36,
  WHITE_BALANCE_TEMPERATURE_10750 = 37,
  WHITE_BALANCE_TEMPERATURE_11000 = 38,
  WHITE_BALANCE_TEMPERATURE_11250 = 39,
  WHITE_BALANCE_TEMPERATURE_11500 = 40,
  WHITE_BALANCE_TEMPERATURE_11750 = 41,
  WHITE_BALANCE_TEMPERATURE_12000 = 42,
  WHITE_BALANCE_TEMPERATURE_12250 = 43,
  WHITE_BALANCE_TEMPERATURE_12500 = 44,
  WHITE_BALANCE_TEMPERATURE_12750 = 45,
  WHITE_BALANCE_TEMPERATURE_13000 = 46,
  WHITE_BALANCE_TEMPERATURE_13250 = 47,
  WHITE_BALANCE_TEMPERATURE_13500 = 48,
  WHITE_BALANCE_TEMPERATURE_13750 = 49,
  WHITE_BALANCE_TEMPERATURE_14000 = 50,
  WHITE_BALANCE_TEMPERATURE_14250 = 51,
  WHITE_BALANCE_TEMPERATURE_14500 = 52,
  WHITE_BALANCE_TEMPERATURE_14750 = 53,
  WHITE_BALANCE_TEMPERATURE_15000 = 54,
  WhiteBalanceTemperature_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WhiteBalanceTemperature_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WhiteBalanceTemperature_IsValid(int value);
const WhiteBalanceTemperature WhiteBalanceTemperature_MIN = WHITE_BALANCE_TEMPERATURE_1500;
const WhiteBalanceTemperature WhiteBalanceTemperature_MAX = WHITE_BALANCE_TEMPERATURE_15000;
const int WhiteBalanceTemperature_ARRAYSIZE = WhiteBalanceTemperature_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhiteBalanceTemperature_descriptor();
inline const ::std::string& WhiteBalanceTemperature_Name(WhiteBalanceTemperature value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhiteBalanceTemperature_descriptor(), value);
}
inline bool WhiteBalanceTemperature_Parse(
    const ::std::string& name, WhiteBalanceTemperature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhiteBalanceTemperature>(
    WhiteBalanceTemperature_descriptor(), name, value);
}
enum ZoomControlMode {
  ZOOM_CONTROL_MODE_LEVEL = 0,
  ZOOM_CONTROL_MODE_VELOCITY = 1,
  ZoomControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ZoomControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ZoomControlMode_IsValid(int value);
const ZoomControlMode ZoomControlMode_MIN = ZOOM_CONTROL_MODE_LEVEL;
const ZoomControlMode ZoomControlMode_MAX = ZOOM_CONTROL_MODE_VELOCITY;
const int ZoomControlMode_ARRAYSIZE = ZoomControlMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZoomControlMode_descriptor();
inline const ::std::string& ZoomControlMode_Name(ZoomControlMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZoomControlMode_descriptor(), value);
}
inline bool ZoomControlMode_Parse(
    const ::std::string& name, ZoomControlMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZoomControlMode>(
    ZoomControlMode_descriptor(), name, value);
}
enum ZoomVelocityControlQualityMode {
  ZOOM_VELOCITY_CONTROL_QUALITY_MODE_ALLOW_DEGRADATION = 0,
  ZOOM_VELOCITY_CONTROL_QUALITY_MODE_STOP_BEFORE_DEGRADATION = 1,
  ZoomVelocityControlQualityMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ZoomVelocityControlQualityMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ZoomVelocityControlQualityMode_IsValid(int value);
const ZoomVelocityControlQualityMode ZoomVelocityControlQualityMode_MIN = ZOOM_VELOCITY_CONTROL_QUALITY_MODE_ALLOW_DEGRADATION;
const ZoomVelocityControlQualityMode ZoomVelocityControlQualityMode_MAX = ZOOM_VELOCITY_CONTROL_QUALITY_MODE_STOP_BEFORE_DEGRADATION;
const int ZoomVelocityControlQualityMode_ARRAYSIZE = ZoomVelocityControlQualityMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZoomVelocityControlQualityMode_descriptor();
inline const ::std::string& ZoomVelocityControlQualityMode_Name(ZoomVelocityControlQualityMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZoomVelocityControlQualityMode_descriptor(), value);
}
inline bool ZoomVelocityControlQualityMode_Parse(
    const ::std::string& name, ZoomVelocityControlQualityMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZoomVelocityControlQualityMode>(
    ZoomVelocityControlQualityMode_descriptor(), name, value);
}
// ===================================================================

class Command_ListCameras :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.ListCameras) */ {
 public:
  Command_ListCameras();
  virtual ~Command_ListCameras();

  Command_ListCameras(const Command_ListCameras& from);

  inline Command_ListCameras& operator=(const Command_ListCameras& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ListCameras(Command_ListCameras&& from) noexcept
    : Command_ListCameras() {
    *this = ::std::move(from);
  }

  inline Command_ListCameras& operator=(Command_ListCameras&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_ListCameras& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ListCameras* internal_default_instance() {
    return reinterpret_cast<const Command_ListCameras*>(
               &_Command_ListCameras_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_ListCameras* other);
  friend void swap(Command_ListCameras& a, Command_ListCameras& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ListCameras* New() const final {
    return CreateMaybeMessage<Command_ListCameras>(nullptr);
  }

  Command_ListCameras* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_ListCameras>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_ListCameras& from);
  void MergeFrom(const Command_ListCameras& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_ListCameras* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .arsdk.camera.CameraModel model_filter = 1 [(.field_doc) = ""];
  int model_filter_size() const;
  void clear_model_filter();
  static const int kModelFilterFieldNumber = 1;
  ::arsdk::camera::CameraModel model_filter(int index) const;
  void set_model_filter(int index, ::arsdk::camera::CameraModel value);
  void add_model_filter(::arsdk::camera::CameraModel value);
  const ::google::protobuf::RepeatedField<int>& model_filter() const;
  ::google::protobuf::RepeatedField<int>* mutable_model_filter();

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.ListCameras)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> model_filter_;
  mutable std::atomic<int> _model_filter_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_GetState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.GetState) */ {
 public:
  Command_GetState();
  virtual ~Command_GetState();

  Command_GetState(const Command_GetState& from);

  inline Command_GetState& operator=(const Command_GetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_GetState(Command_GetState&& from) noexcept
    : Command_GetState() {
    *this = ::std::move(from);
  }

  inline Command_GetState& operator=(Command_GetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_GetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_GetState* internal_default_instance() {
    return reinterpret_cast<const Command_GetState*>(
               &_Command_GetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command_GetState* other);
  friend void swap(Command_GetState& a, Command_GetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_GetState* New() const final {
    return CreateMaybeMessage<Command_GetState>(nullptr);
  }

  Command_GetState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_GetState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_GetState& from);
  void MergeFrom(const Command_GetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_GetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // bool include_default_capabilities = 2;
  void clear_include_default_capabilities();
  static const int kIncludeDefaultCapabilitiesFieldNumber = 2;
  bool include_default_capabilities() const;
  void set_include_default_capabilities(bool value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.GetState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  bool include_default_capabilities_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_Configure :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.Configure) */ {
 public:
  Command_Configure();
  virtual ~Command_Configure();

  Command_Configure(const Command_Configure& from);

  inline Command_Configure& operator=(const Command_Configure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_Configure(Command_Configure&& from) noexcept
    : Command_Configure() {
    *this = ::std::move(from);
  }

  inline Command_Configure& operator=(Command_Configure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_Configure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_Configure* internal_default_instance() {
    return reinterpret_cast<const Command_Configure*>(
               &_Command_Configure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command_Configure* other);
  friend void swap(Command_Configure& a, Command_Configure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_Configure* New() const final {
    return CreateMaybeMessage<Command_Configure>(nullptr);
  }

  Command_Configure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_Configure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_Configure& from);
  void MergeFrom(const Command_Configure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Configure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.camera.Config config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::arsdk::camera::Config& config() const;
  ::arsdk::camera::Config* release_config();
  ::arsdk::camera::Config* mutable_config();
  void set_allocated_config(::arsdk::camera::Config* config);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.Configure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::camera::Config* config_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_SetZoomTarget :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.SetZoomTarget) */ {
 public:
  Command_SetZoomTarget();
  virtual ~Command_SetZoomTarget();

  Command_SetZoomTarget(const Command_SetZoomTarget& from);

  inline Command_SetZoomTarget& operator=(const Command_SetZoomTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetZoomTarget(Command_SetZoomTarget&& from) noexcept
    : Command_SetZoomTarget() {
    *this = ::std::move(from);
  }

  inline Command_SetZoomTarget& operator=(Command_SetZoomTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetZoomTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetZoomTarget* internal_default_instance() {
    return reinterpret_cast<const Command_SetZoomTarget*>(
               &_Command_SetZoomTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Command_SetZoomTarget* other);
  friend void swap(Command_SetZoomTarget& a, Command_SetZoomTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetZoomTarget* New() const final {
    return CreateMaybeMessage<Command_SetZoomTarget>(nullptr);
  }

  Command_SetZoomTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetZoomTarget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetZoomTarget& from);
  void MergeFrom(const Command_SetZoomTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetZoomTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // double target = 3;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  double target() const;
  void set_target(double value);

  // .arsdk.camera.ZoomControlMode control_mode = 2;
  void clear_control_mode();
  static const int kControlModeFieldNumber = 2;
  ::arsdk::camera::ZoomControlMode control_mode() const;
  void set_control_mode(::arsdk::camera::ZoomControlMode value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.SetZoomTarget)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  double target_;
  int control_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_ResetZoom :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.ResetZoom) */ {
 public:
  Command_ResetZoom();
  virtual ~Command_ResetZoom();

  Command_ResetZoom(const Command_ResetZoom& from);

  inline Command_ResetZoom& operator=(const Command_ResetZoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ResetZoom(Command_ResetZoom&& from) noexcept
    : Command_ResetZoom() {
    *this = ::std::move(from);
  }

  inline Command_ResetZoom& operator=(Command_ResetZoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_ResetZoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ResetZoom* internal_default_instance() {
    return reinterpret_cast<const Command_ResetZoom*>(
               &_Command_ResetZoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Command_ResetZoom* other);
  friend void swap(Command_ResetZoom& a, Command_ResetZoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ResetZoom* New() const final {
    return CreateMaybeMessage<Command_ResetZoom>(nullptr);
  }

  Command_ResetZoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_ResetZoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_ResetZoom& from);
  void MergeFrom(const Command_ResetZoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_ResetZoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.ResetZoom)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_StartPhoto :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.StartPhoto) */ {
 public:
  Command_StartPhoto();
  virtual ~Command_StartPhoto();

  Command_StartPhoto(const Command_StartPhoto& from);

  inline Command_StartPhoto& operator=(const Command_StartPhoto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_StartPhoto(Command_StartPhoto&& from) noexcept
    : Command_StartPhoto() {
    *this = ::std::move(from);
  }

  inline Command_StartPhoto& operator=(Command_StartPhoto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_StartPhoto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_StartPhoto* internal_default_instance() {
    return reinterpret_cast<const Command_StartPhoto*>(
               &_Command_StartPhoto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Command_StartPhoto* other);
  friend void swap(Command_StartPhoto& a, Command_StartPhoto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_StartPhoto* New() const final {
    return CreateMaybeMessage<Command_StartPhoto>(nullptr);
  }

  Command_StartPhoto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_StartPhoto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_StartPhoto& from);
  void MergeFrom(const Command_StartPhoto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_StartPhoto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.StartPhoto)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_StopPhoto :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.StopPhoto) */ {
 public:
  Command_StopPhoto();
  virtual ~Command_StopPhoto();

  Command_StopPhoto(const Command_StopPhoto& from);

  inline Command_StopPhoto& operator=(const Command_StopPhoto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_StopPhoto(Command_StopPhoto&& from) noexcept
    : Command_StopPhoto() {
    *this = ::std::move(from);
  }

  inline Command_StopPhoto& operator=(Command_StopPhoto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_StopPhoto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_StopPhoto* internal_default_instance() {
    return reinterpret_cast<const Command_StopPhoto*>(
               &_Command_StopPhoto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Command_StopPhoto* other);
  friend void swap(Command_StopPhoto& a, Command_StopPhoto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_StopPhoto* New() const final {
    return CreateMaybeMessage<Command_StopPhoto>(nullptr);
  }

  Command_StopPhoto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_StopPhoto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_StopPhoto& from);
  void MergeFrom(const Command_StopPhoto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_StopPhoto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.StopPhoto)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_StartRecording :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.StartRecording) */ {
 public:
  Command_StartRecording();
  virtual ~Command_StartRecording();

  Command_StartRecording(const Command_StartRecording& from);

  inline Command_StartRecording& operator=(const Command_StartRecording& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_StartRecording(Command_StartRecording&& from) noexcept
    : Command_StartRecording() {
    *this = ::std::move(from);
  }

  inline Command_StartRecording& operator=(Command_StartRecording&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_StartRecording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_StartRecording* internal_default_instance() {
    return reinterpret_cast<const Command_StartRecording*>(
               &_Command_StartRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Command_StartRecording* other);
  friend void swap(Command_StartRecording& a, Command_StartRecording& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_StartRecording* New() const final {
    return CreateMaybeMessage<Command_StartRecording>(nullptr);
  }

  Command_StartRecording* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_StartRecording>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_StartRecording& from);
  void MergeFrom(const Command_StartRecording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_StartRecording* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.StartRecording)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_StopRecording :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.StopRecording) */ {
 public:
  Command_StopRecording();
  virtual ~Command_StopRecording();

  Command_StopRecording(const Command_StopRecording& from);

  inline Command_StopRecording& operator=(const Command_StopRecording& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_StopRecording(Command_StopRecording&& from) noexcept
    : Command_StopRecording() {
    *this = ::std::move(from);
  }

  inline Command_StopRecording& operator=(Command_StopRecording&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_StopRecording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_StopRecording* internal_default_instance() {
    return reinterpret_cast<const Command_StopRecording*>(
               &_Command_StopRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Command_StopRecording* other);
  friend void swap(Command_StopRecording& a, Command_StopRecording& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_StopRecording* New() const final {
    return CreateMaybeMessage<Command_StopRecording>(nullptr);
  }

  Command_StopRecording* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_StopRecording>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_StopRecording& from);
  void MergeFrom(const Command_StopRecording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_StopRecording* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.StopRecording)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_LockExposure :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.LockExposure) */ {
 public:
  Command_LockExposure();
  virtual ~Command_LockExposure();

  Command_LockExposure(const Command_LockExposure& from);

  inline Command_LockExposure& operator=(const Command_LockExposure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_LockExposure(Command_LockExposure&& from) noexcept
    : Command_LockExposure() {
    *this = ::std::move(from);
  }

  inline Command_LockExposure& operator=(Command_LockExposure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_LockExposure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_LockExposure* internal_default_instance() {
    return reinterpret_cast<const Command_LockExposure*>(
               &_Command_LockExposure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Command_LockExposure* other);
  friend void swap(Command_LockExposure& a, Command_LockExposure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_LockExposure* New() const final {
    return CreateMaybeMessage<Command_LockExposure>(nullptr);
  }

  Command_LockExposure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_LockExposure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_LockExposure& from);
  void MergeFrom(const Command_LockExposure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_LockExposure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.camera.ExposureRoi.Center roi = 3;
  bool has_roi() const;
  void clear_roi();
  static const int kRoiFieldNumber = 3;
  const ::arsdk::camera::ExposureRoi_Center& roi() const;
  ::arsdk::camera::ExposureRoi_Center* release_roi();
  ::arsdk::camera::ExposureRoi_Center* mutable_roi();
  void set_allocated_roi(::arsdk::camera::ExposureRoi_Center* roi);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // .arsdk.camera.ExposureLockMode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::arsdk::camera::ExposureLockMode mode() const;
  void set_mode(::arsdk::camera::ExposureLockMode value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.LockExposure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::camera::ExposureRoi_Center* roi_;
  ::google::protobuf::uint64 camera_id_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_LockWhiteBalance :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.LockWhiteBalance) */ {
 public:
  Command_LockWhiteBalance();
  virtual ~Command_LockWhiteBalance();

  Command_LockWhiteBalance(const Command_LockWhiteBalance& from);

  inline Command_LockWhiteBalance& operator=(const Command_LockWhiteBalance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_LockWhiteBalance(Command_LockWhiteBalance&& from) noexcept
    : Command_LockWhiteBalance() {
    *this = ::std::move(from);
  }

  inline Command_LockWhiteBalance& operator=(Command_LockWhiteBalance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_LockWhiteBalance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_LockWhiteBalance* internal_default_instance() {
    return reinterpret_cast<const Command_LockWhiteBalance*>(
               &_Command_LockWhiteBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Command_LockWhiteBalance* other);
  friend void swap(Command_LockWhiteBalance& a, Command_LockWhiteBalance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_LockWhiteBalance* New() const final {
    return CreateMaybeMessage<Command_LockWhiteBalance>(nullptr);
  }

  Command_LockWhiteBalance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_LockWhiteBalance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_LockWhiteBalance& from);
  void MergeFrom(const Command_LockWhiteBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_LockWhiteBalance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // .arsdk.camera.WhiteBalanceLockMode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::arsdk::camera::WhiteBalanceLockMode mode() const;
  void set_mode(::arsdk::camera::WhiteBalanceLockMode value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.LockWhiteBalance)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command_SetMediaMetadata :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command.SetMediaMetadata) */ {
 public:
  Command_SetMediaMetadata();
  virtual ~Command_SetMediaMetadata();

  Command_SetMediaMetadata(const Command_SetMediaMetadata& from);

  inline Command_SetMediaMetadata& operator=(const Command_SetMediaMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetMediaMetadata(Command_SetMediaMetadata&& from) noexcept
    : Command_SetMediaMetadata() {
    *this = ::std::move(from);
  }

  inline Command_SetMediaMetadata& operator=(Command_SetMediaMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetMediaMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetMediaMetadata* internal_default_instance() {
    return reinterpret_cast<const Command_SetMediaMetadata*>(
               &_Command_SetMediaMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Command_SetMediaMetadata* other);
  friend void swap(Command_SetMediaMetadata& a, Command_SetMediaMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetMediaMetadata* New() const final {
    return CreateMaybeMessage<Command_SetMediaMetadata>(nullptr);
  }

  Command_SetMediaMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetMediaMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetMediaMetadata& from);
  void MergeFrom(const Command_SetMediaMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetMediaMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.camera.MediaMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::arsdk::camera::MediaMetadata& metadata() const;
  ::arsdk::camera::MediaMetadata* release_metadata();
  ::arsdk::camera::MediaMetadata* mutable_metadata();
  void set_allocated_metadata(::arsdk::camera::MediaMetadata* metadata);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Command.SetMediaMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::camera::MediaMetadata* metadata_;
  ::google::protobuf::uint64 camera_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kSetZoomTarget = 1,
    kListCameras = 16,
    kGetState = 17,
    kConfigure = 18,
    kStartPhoto = 19,
    kStopPhoto = 20,
    kStartRecording = 21,
    kStopRecording = 22,
    kLockExposure = 23,
    kLockWhiteBalance = 24,
    kSetMediaMetadata = 25,
    kResetZoom = 26,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_ListCameras ListCameras;
  typedef Command_GetState GetState;
  typedef Command_Configure Configure;
  typedef Command_SetZoomTarget SetZoomTarget;
  typedef Command_ResetZoom ResetZoom;
  typedef Command_StartPhoto StartPhoto;
  typedef Command_StopPhoto StopPhoto;
  typedef Command_StartRecording StartRecording;
  typedef Command_StopRecording StopRecording;
  typedef Command_LockExposure LockExposure;
  typedef Command_LockWhiteBalance LockWhiteBalance;
  typedef Command_SetMediaMetadata SetMediaMetadata;

  // accessors -------------------------------------------------------

  // .arsdk.camera.Command.SetZoomTarget set_zoom_target = 1;
  bool has_set_zoom_target() const;
  void clear_set_zoom_target();
  static const int kSetZoomTargetFieldNumber = 1;
  const ::arsdk::camera::Command_SetZoomTarget& set_zoom_target() const;
  ::arsdk::camera::Command_SetZoomTarget* release_set_zoom_target();
  ::arsdk::camera::Command_SetZoomTarget* mutable_set_zoom_target();
  void set_allocated_set_zoom_target(::arsdk::camera::Command_SetZoomTarget* set_zoom_target);

  // .arsdk.camera.Command.ListCameras list_cameras = 16;
  bool has_list_cameras() const;
  void clear_list_cameras();
  static const int kListCamerasFieldNumber = 16;
  const ::arsdk::camera::Command_ListCameras& list_cameras() const;
  ::arsdk::camera::Command_ListCameras* release_list_cameras();
  ::arsdk::camera::Command_ListCameras* mutable_list_cameras();
  void set_allocated_list_cameras(::arsdk::camera::Command_ListCameras* list_cameras);

  // .arsdk.camera.Command.GetState get_state = 17;
  bool has_get_state() const;
  void clear_get_state();
  static const int kGetStateFieldNumber = 17;
  const ::arsdk::camera::Command_GetState& get_state() const;
  ::arsdk::camera::Command_GetState* release_get_state();
  ::arsdk::camera::Command_GetState* mutable_get_state();
  void set_allocated_get_state(::arsdk::camera::Command_GetState* get_state);

  // .arsdk.camera.Command.Configure configure = 18;
  bool has_configure() const;
  void clear_configure();
  static const int kConfigureFieldNumber = 18;
  const ::arsdk::camera::Command_Configure& configure() const;
  ::arsdk::camera::Command_Configure* release_configure();
  ::arsdk::camera::Command_Configure* mutable_configure();
  void set_allocated_configure(::arsdk::camera::Command_Configure* configure);

  // .arsdk.camera.Command.StartPhoto start_photo = 19;
  bool has_start_photo() const;
  void clear_start_photo();
  static const int kStartPhotoFieldNumber = 19;
  const ::arsdk::camera::Command_StartPhoto& start_photo() const;
  ::arsdk::camera::Command_StartPhoto* release_start_photo();
  ::arsdk::camera::Command_StartPhoto* mutable_start_photo();
  void set_allocated_start_photo(::arsdk::camera::Command_StartPhoto* start_photo);

  // .arsdk.camera.Command.StopPhoto stop_photo = 20;
  bool has_stop_photo() const;
  void clear_stop_photo();
  static const int kStopPhotoFieldNumber = 20;
  const ::arsdk::camera::Command_StopPhoto& stop_photo() const;
  ::arsdk::camera::Command_StopPhoto* release_stop_photo();
  ::arsdk::camera::Command_StopPhoto* mutable_stop_photo();
  void set_allocated_stop_photo(::arsdk::camera::Command_StopPhoto* stop_photo);

  // .arsdk.camera.Command.StartRecording start_recording = 21;
  bool has_start_recording() const;
  void clear_start_recording();
  static const int kStartRecordingFieldNumber = 21;
  const ::arsdk::camera::Command_StartRecording& start_recording() const;
  ::arsdk::camera::Command_StartRecording* release_start_recording();
  ::arsdk::camera::Command_StartRecording* mutable_start_recording();
  void set_allocated_start_recording(::arsdk::camera::Command_StartRecording* start_recording);

  // .arsdk.camera.Command.StopRecording stop_recording = 22;
  bool has_stop_recording() const;
  void clear_stop_recording();
  static const int kStopRecordingFieldNumber = 22;
  const ::arsdk::camera::Command_StopRecording& stop_recording() const;
  ::arsdk::camera::Command_StopRecording* release_stop_recording();
  ::arsdk::camera::Command_StopRecording* mutable_stop_recording();
  void set_allocated_stop_recording(::arsdk::camera::Command_StopRecording* stop_recording);

  // .arsdk.camera.Command.LockExposure lock_exposure = 23;
  bool has_lock_exposure() const;
  void clear_lock_exposure();
  static const int kLockExposureFieldNumber = 23;
  const ::arsdk::camera::Command_LockExposure& lock_exposure() const;
  ::arsdk::camera::Command_LockExposure* release_lock_exposure();
  ::arsdk::camera::Command_LockExposure* mutable_lock_exposure();
  void set_allocated_lock_exposure(::arsdk::camera::Command_LockExposure* lock_exposure);

  // .arsdk.camera.Command.LockWhiteBalance lock_white_balance = 24;
  bool has_lock_white_balance() const;
  void clear_lock_white_balance();
  static const int kLockWhiteBalanceFieldNumber = 24;
  const ::arsdk::camera::Command_LockWhiteBalance& lock_white_balance() const;
  ::arsdk::camera::Command_LockWhiteBalance* release_lock_white_balance();
  ::arsdk::camera::Command_LockWhiteBalance* mutable_lock_white_balance();
  void set_allocated_lock_white_balance(::arsdk::camera::Command_LockWhiteBalance* lock_white_balance);

  // .arsdk.camera.Command.SetMediaMetadata set_media_metadata = 25;
  bool has_set_media_metadata() const;
  void clear_set_media_metadata();
  static const int kSetMediaMetadataFieldNumber = 25;
  const ::arsdk::camera::Command_SetMediaMetadata& set_media_metadata() const;
  ::arsdk::camera::Command_SetMediaMetadata* release_set_media_metadata();
  ::arsdk::camera::Command_SetMediaMetadata* mutable_set_media_metadata();
  void set_allocated_set_media_metadata(::arsdk::camera::Command_SetMediaMetadata* set_media_metadata);

  // .arsdk.camera.Command.ResetZoom reset_zoom = 26;
  bool has_reset_zoom() const;
  void clear_reset_zoom();
  static const int kResetZoomFieldNumber = 26;
  const ::arsdk::camera::Command_ResetZoom& reset_zoom() const;
  ::arsdk::camera::Command_ResetZoom* release_reset_zoom();
  ::arsdk::camera::Command_ResetZoom* mutable_reset_zoom();
  void set_allocated_reset_zoom(::arsdk::camera::Command_ResetZoom* reset_zoom);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.camera.Command)
 private:
  class HasBitSetters;
  void set_has_set_zoom_target();
  void set_has_list_cameras();
  void set_has_get_state();
  void set_has_configure();
  void set_has_start_photo();
  void set_has_stop_photo();
  void set_has_start_recording();
  void set_has_stop_recording();
  void set_has_lock_exposure();
  void set_has_lock_white_balance();
  void set_has_set_media_metadata();
  void set_has_reset_zoom();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::camera::Command_SetZoomTarget* set_zoom_target_;
    ::arsdk::camera::Command_ListCameras* list_cameras_;
    ::arsdk::camera::Command_GetState* get_state_;
    ::arsdk::camera::Command_Configure* configure_;
    ::arsdk::camera::Command_StartPhoto* start_photo_;
    ::arsdk::camera::Command_StopPhoto* stop_photo_;
    ::arsdk::camera::Command_StartRecording* start_recording_;
    ::arsdk::camera::Command_StopRecording* stop_recording_;
    ::arsdk::camera::Command_LockExposure* lock_exposure_;
    ::arsdk::camera::Command_LockWhiteBalance* lock_white_balance_;
    ::arsdk::camera::Command_SetMediaMetadata* set_media_metadata_;
    ::arsdk::camera::Command_ResetZoom* reset_zoom_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_CameraList_CamerasEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Event_CameraList_CamerasEntry_DoNotUse, 
    ::google::protobuf::uint64, ::arsdk::camera::CameraModel,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Event_CameraList_CamerasEntry_DoNotUse, 
    ::google::protobuf::uint64, ::arsdk::camera::CameraModel,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  Event_CameraList_CamerasEntry_DoNotUse();
  Event_CameraList_CamerasEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Event_CameraList_CamerasEntry_DoNotUse& other);
  static const Event_CameraList_CamerasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Event_CameraList_CamerasEntry_DoNotUse*>(&_Event_CameraList_CamerasEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Event_CameraList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.CameraList) */ {
 public:
  Event_CameraList();
  virtual ~Event_CameraList();

  Event_CameraList(const Event_CameraList& from);

  inline Event_CameraList& operator=(const Event_CameraList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_CameraList(Event_CameraList&& from) noexcept
    : Event_CameraList() {
    *this = ::std::move(from);
  }

  inline Event_CameraList& operator=(Event_CameraList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_CameraList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_CameraList* internal_default_instance() {
    return reinterpret_cast<const Event_CameraList*>(
               &_Event_CameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Event_CameraList* other);
  friend void swap(Event_CameraList& a, Event_CameraList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_CameraList* New() const final {
    return CreateMaybeMessage<Event_CameraList>(nullptr);
  }

  Event_CameraList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_CameraList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_CameraList& from);
  void MergeFrom(const Event_CameraList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_CameraList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, .arsdk.camera.CameraModel> cameras = 1;
  int cameras_size() const;
  void clear_cameras();
  static const int kCamerasFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint64, ::arsdk::camera::CameraModel >&
      cameras() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, ::arsdk::camera::CameraModel >*
      mutable_cameras();

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.CameraList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Event_CameraList_CamerasEntry_DoNotUse,
      ::google::protobuf::uint64, ::arsdk::camera::CameraModel,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > cameras_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_State_SelectedFieldsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Event_State_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Event_State_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Event_State_SelectedFieldsEntry_DoNotUse();
  Event_State_SelectedFieldsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Event_State_SelectedFieldsEntry_DoNotUse& other);
  static const Event_State_SelectedFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Event_State_SelectedFieldsEntry_DoNotUse*>(&_Event_State_SelectedFieldsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Event_State_Photo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.State.Photo) */ {
 public:
  Event_State_Photo();
  virtual ~Event_State_Photo();

  Event_State_Photo(const Event_State_Photo& from);

  inline Event_State_Photo& operator=(const Event_State_Photo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State_Photo(Event_State_Photo&& from) noexcept
    : Event_State_Photo() {
    *this = ::std::move(from);
  }

  inline Event_State_Photo& operator=(Event_State_Photo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State_Photo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State_Photo* internal_default_instance() {
    return reinterpret_cast<const Event_State_Photo*>(
               &_Event_State_Photo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Event_State_Photo* other);
  friend void swap(Event_State_Photo& a, Event_State_Photo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State_Photo* New() const final {
    return CreateMaybeMessage<Event_State_Photo>(nullptr);
  }

  Event_State_Photo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State_Photo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State_Photo& from);
  void MergeFrom(const Event_State_Photo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State_Photo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 start_timestamp = 2;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 2;
  ::google::protobuf::uint64 start_timestamp() const;
  void set_start_timestamp(::google::protobuf::uint64 value);

  // .arsdk.camera.PhotoState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::arsdk::camera::PhotoState state() const;
  void set_state(::arsdk::camera::PhotoState value);

  // uint32 photo_count = 3;
  void clear_photo_count();
  static const int kPhotoCountFieldNumber = 3;
  ::google::protobuf::uint32 photo_count() const;
  void set_photo_count(::google::protobuf::uint32 value);

  // .arsdk.camera.StorageType storage = 4;
  void clear_storage();
  static const int kStorageFieldNumber = 4;
  ::arsdk::camera::StorageType storage() const;
  void set_storage(::arsdk::camera::StorageType value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.State.Photo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 start_timestamp_;
  int state_;
  ::google::protobuf::uint32 photo_count_;
  int storage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_State_Recording :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.State.Recording) */ {
 public:
  Event_State_Recording();
  virtual ~Event_State_Recording();

  Event_State_Recording(const Event_State_Recording& from);

  inline Event_State_Recording& operator=(const Event_State_Recording& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State_Recording(Event_State_Recording&& from) noexcept
    : Event_State_Recording() {
    *this = ::std::move(from);
  }

  inline Event_State_Recording& operator=(Event_State_Recording&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State_Recording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State_Recording* internal_default_instance() {
    return reinterpret_cast<const Event_State_Recording*>(
               &_Event_State_Recording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Event_State_Recording* other);
  friend void swap(Event_State_Recording& a, Event_State_Recording& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State_Recording* New() const final {
    return CreateMaybeMessage<Event_State_Recording>(nullptr);
  }

  Event_State_Recording* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State_Recording>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State_Recording& from);
  void MergeFrom(const Event_State_Recording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State_Recording* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 start_timestamp = 2;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 2;
  ::google::protobuf::uint64 start_timestamp() const;
  void set_start_timestamp(::google::protobuf::uint64 value);

  // .arsdk.camera.RecordingState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::arsdk::camera::RecordingState state() const;
  void set_state(::arsdk::camera::RecordingState value);

  // uint32 video_bitrate = 3;
  void clear_video_bitrate();
  static const int kVideoBitrateFieldNumber = 3;
  ::google::protobuf::uint32 video_bitrate() const;
  void set_video_bitrate(::google::protobuf::uint32 value);

  // .arsdk.camera.StorageType storage = 4;
  void clear_storage();
  static const int kStorageFieldNumber = 4;
  ::arsdk::camera::StorageType storage() const;
  void set_storage(::arsdk::camera::StorageType value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.State.Recording)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 start_timestamp_;
  int state_;
  ::google::protobuf::uint32 video_bitrate_;
  int storage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_State_WhiteBalanceLock :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.State.WhiteBalanceLock) */ {
 public:
  Event_State_WhiteBalanceLock();
  virtual ~Event_State_WhiteBalanceLock();

  Event_State_WhiteBalanceLock(const Event_State_WhiteBalanceLock& from);

  inline Event_State_WhiteBalanceLock& operator=(const Event_State_WhiteBalanceLock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State_WhiteBalanceLock(Event_State_WhiteBalanceLock&& from) noexcept
    : Event_State_WhiteBalanceLock() {
    *this = ::std::move(from);
  }

  inline Event_State_WhiteBalanceLock& operator=(Event_State_WhiteBalanceLock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State_WhiteBalanceLock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State_WhiteBalanceLock* internal_default_instance() {
    return reinterpret_cast<const Event_State_WhiteBalanceLock*>(
               &_Event_State_WhiteBalanceLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Event_State_WhiteBalanceLock* other);
  friend void swap(Event_State_WhiteBalanceLock& a, Event_State_WhiteBalanceLock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State_WhiteBalanceLock* New() const final {
    return CreateMaybeMessage<Event_State_WhiteBalanceLock>(nullptr);
  }

  Event_State_WhiteBalanceLock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State_WhiteBalanceLock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State_WhiteBalanceLock& from);
  void MergeFrom(const Event_State_WhiteBalanceLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State_WhiteBalanceLock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .arsdk.camera.WhiteBalanceLockMode supported_modes = 1;
  int supported_modes_size() const;
  void clear_supported_modes();
  static const int kSupportedModesFieldNumber = 1;
  ::arsdk::camera::WhiteBalanceLockMode supported_modes(int index) const;
  void set_supported_modes(int index, ::arsdk::camera::WhiteBalanceLockMode value);
  void add_supported_modes(::arsdk::camera::WhiteBalanceLockMode value);
  const ::google::protobuf::RepeatedField<int>& supported_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_modes();

  // .arsdk.camera.WhiteBalanceLockMode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::arsdk::camera::WhiteBalanceLockMode mode() const;
  void set_mode(::arsdk::camera::WhiteBalanceLockMode value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.State.WhiteBalanceLock)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supported_modes_;
  mutable std::atomic<int> _supported_modes_cached_byte_size_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_State_ExposureLock :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.State.ExposureLock) */ {
 public:
  Event_State_ExposureLock();
  virtual ~Event_State_ExposureLock();

  Event_State_ExposureLock(const Event_State_ExposureLock& from);

  inline Event_State_ExposureLock& operator=(const Event_State_ExposureLock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State_ExposureLock(Event_State_ExposureLock&& from) noexcept
    : Event_State_ExposureLock() {
    *this = ::std::move(from);
  }

  inline Event_State_ExposureLock& operator=(Event_State_ExposureLock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State_ExposureLock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State_ExposureLock* internal_default_instance() {
    return reinterpret_cast<const Event_State_ExposureLock*>(
               &_Event_State_ExposureLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Event_State_ExposureLock* other);
  friend void swap(Event_State_ExposureLock& a, Event_State_ExposureLock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State_ExposureLock* New() const final {
    return CreateMaybeMessage<Event_State_ExposureLock>(nullptr);
  }

  Event_State_ExposureLock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State_ExposureLock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State_ExposureLock& from);
  void MergeFrom(const Event_State_ExposureLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State_ExposureLock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .arsdk.camera.ExposureLockMode supported_modes = 1;
  int supported_modes_size() const;
  void clear_supported_modes();
  static const int kSupportedModesFieldNumber = 1;
  ::arsdk::camera::ExposureLockMode supported_modes(int index) const;
  void set_supported_modes(int index, ::arsdk::camera::ExposureLockMode value);
  void add_supported_modes(::arsdk::camera::ExposureLockMode value);
  const ::google::protobuf::RepeatedField<int>& supported_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_modes();

  // .arsdk.camera.ExposureLockMode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::arsdk::camera::ExposureLockMode mode() const;
  void set_mode(::arsdk::camera::ExposureLockMode value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.State.ExposureLock)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supported_modes_;
  mutable std::atomic<int> _supported_modes_cached_byte_size_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_State_Zoom :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.State.Zoom) */ {
 public:
  Event_State_Zoom();
  virtual ~Event_State_Zoom();

  Event_State_Zoom(const Event_State_Zoom& from);

  inline Event_State_Zoom& operator=(const Event_State_Zoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State_Zoom(Event_State_Zoom&& from) noexcept
    : Event_State_Zoom() {
    *this = ::std::move(from);
  }

  inline Event_State_Zoom& operator=(Event_State_Zoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State_Zoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State_Zoom* internal_default_instance() {
    return reinterpret_cast<const Event_State_Zoom*>(
               &_Event_State_Zoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Event_State_Zoom* other);
  friend void swap(Event_State_Zoom& a, Event_State_Zoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State_Zoom* New() const final {
    return CreateMaybeMessage<Event_State_Zoom>(nullptr);
  }

  Event_State_Zoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State_Zoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State_Zoom& from);
  void MergeFrom(const Event_State_Zoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State_Zoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double zoom_level_max = 1;
  void clear_zoom_level_max();
  static const int kZoomLevelMaxFieldNumber = 1;
  double zoom_level_max() const;
  void set_zoom_level_max(double value);

  // double zoom_high_quality_level_max = 2;
  void clear_zoom_high_quality_level_max();
  static const int kZoomHighQualityLevelMaxFieldNumber = 2;
  double zoom_high_quality_level_max() const;
  void set_zoom_high_quality_level_max(double value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.State.Zoom)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double zoom_level_max_;
  double zoom_high_quality_level_max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_State :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.State) */ {
 public:
  Event_State();
  virtual ~Event_State();

  Event_State(const Event_State& from);

  inline Event_State& operator=(const Event_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State(Event_State&& from) noexcept
    : Event_State() {
    *this = ::std::move(from);
  }

  inline Event_State& operator=(Event_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State* internal_default_instance() {
    return reinterpret_cast<const Event_State*>(
               &_Event_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Event_State* other);
  friend void swap(Event_State& a, Event_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State* New() const final {
    return CreateMaybeMessage<Event_State>(nullptr);
  }

  Event_State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State& from);
  void MergeFrom(const Event_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_State_Photo Photo;
  typedef Event_State_Recording Recording;
  typedef Event_State_WhiteBalanceLock WhiteBalanceLock;
  typedef Event_State_ExposureLock ExposureLock;
  typedef Event_State_Zoom Zoom;

  // accessors -------------------------------------------------------

  // map<uint32, .google.protobuf.Empty> selected_fields = 2;
  int selected_fields_size() const;
  void clear_selected_fields();
  static const int kSelectedFieldsFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
      selected_fields() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
      mutable_selected_fields();

  // .arsdk.camera.Capabilities default_capabilities = 4;
  bool has_default_capabilities() const;
  void clear_default_capabilities();
  static const int kDefaultCapabilitiesFieldNumber = 4;
  const ::arsdk::camera::Capabilities& default_capabilities() const;
  ::arsdk::camera::Capabilities* release_default_capabilities();
  ::arsdk::camera::Capabilities* mutable_default_capabilities();
  void set_allocated_default_capabilities(::arsdk::camera::Capabilities* default_capabilities);

  // .arsdk.camera.Capabilities current_capabilities = 5;
  bool has_current_capabilities() const;
  void clear_current_capabilities();
  static const int kCurrentCapabilitiesFieldNumber = 5;
  const ::arsdk::camera::Capabilities& current_capabilities() const;
  ::arsdk::camera::Capabilities* release_current_capabilities();
  ::arsdk::camera::Capabilities* mutable_current_capabilities();
  void set_allocated_current_capabilities(::arsdk::camera::Capabilities* current_capabilities);

  // .arsdk.camera.Config config = 6;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 6;
  const ::arsdk::camera::Config& config() const;
  ::arsdk::camera::Config* release_config();
  ::arsdk::camera::Config* mutable_config();
  void set_allocated_config(::arsdk::camera::Config* config);

  // .arsdk.camera.Event.State.Photo photo = 7;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 7;
  const ::arsdk::camera::Event_State_Photo& photo() const;
  ::arsdk::camera::Event_State_Photo* release_photo();
  ::arsdk::camera::Event_State_Photo* mutable_photo();
  void set_allocated_photo(::arsdk::camera::Event_State_Photo* photo);

  // .arsdk.camera.Event.State.Recording recording = 8;
  bool has_recording() const;
  void clear_recording();
  static const int kRecordingFieldNumber = 8;
  const ::arsdk::camera::Event_State_Recording& recording() const;
  ::arsdk::camera::Event_State_Recording* release_recording();
  ::arsdk::camera::Event_State_Recording* mutable_recording();
  void set_allocated_recording(::arsdk::camera::Event_State_Recording* recording);

  // .arsdk.camera.Event.State.WhiteBalanceLock white_balance_lock = 9;
  bool has_white_balance_lock() const;
  void clear_white_balance_lock();
  static const int kWhiteBalanceLockFieldNumber = 9;
  const ::arsdk::camera::Event_State_WhiteBalanceLock& white_balance_lock() const;
  ::arsdk::camera::Event_State_WhiteBalanceLock* release_white_balance_lock();
  ::arsdk::camera::Event_State_WhiteBalanceLock* mutable_white_balance_lock();
  void set_allocated_white_balance_lock(::arsdk::camera::Event_State_WhiteBalanceLock* white_balance_lock);

  // .arsdk.camera.Event.State.ExposureLock exposure_lock = 10;
  bool has_exposure_lock() const;
  void clear_exposure_lock();
  static const int kExposureLockFieldNumber = 10;
  const ::arsdk::camera::Event_State_ExposureLock& exposure_lock() const;
  ::arsdk::camera::Event_State_ExposureLock* release_exposure_lock();
  ::arsdk::camera::Event_State_ExposureLock* mutable_exposure_lock();
  void set_allocated_exposure_lock(::arsdk::camera::Event_State_ExposureLock* exposure_lock);

  // .arsdk.camera.Event.State.Zoom zoom = 11;
  bool has_zoom() const;
  void clear_zoom();
  static const int kZoomFieldNumber = 11;
  const ::arsdk::camera::Event_State_Zoom& zoom() const;
  ::arsdk::camera::Event_State_Zoom* release_zoom();
  ::arsdk::camera::Event_State_Zoom* mutable_zoom();
  void set_allocated_zoom(::arsdk::camera::Event_State_Zoom* zoom);

  // .arsdk.camera.MediaMetadata media_metadata = 12;
  bool has_media_metadata() const;
  void clear_media_metadata();
  static const int kMediaMetadataFieldNumber = 12;
  const ::arsdk::camera::MediaMetadata& media_metadata() const;
  ::arsdk::camera::MediaMetadata* release_media_metadata();
  ::arsdk::camera::MediaMetadata* mutable_media_metadata();
  void set_allocated_media_metadata(::arsdk::camera::MediaMetadata* media_metadata);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // bool active = 3;
  void clear_active();
  static const int kActiveFieldNumber = 3;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.State)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Event_State_SelectedFieldsEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::Empty,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > selected_fields_;
  ::arsdk::camera::Capabilities* default_capabilities_;
  ::arsdk::camera::Capabilities* current_capabilities_;
  ::arsdk::camera::Config* config_;
  ::arsdk::camera::Event_State_Photo* photo_;
  ::arsdk::camera::Event_State_Recording* recording_;
  ::arsdk::camera::Event_State_WhiteBalanceLock* white_balance_lock_;
  ::arsdk::camera::Event_State_ExposureLock* exposure_lock_;
  ::arsdk::camera::Event_State_Zoom* zoom_;
  ::arsdk::camera::MediaMetadata* media_metadata_;
  ::google::protobuf::uint64 camera_id_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_Exposure :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.Exposure) */ {
 public:
  Event_Exposure();
  virtual ~Event_Exposure();

  Event_Exposure(const Event_Exposure& from);

  inline Event_Exposure& operator=(const Event_Exposure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Exposure(Event_Exposure&& from) noexcept
    : Event_Exposure() {
    *this = ::std::move(from);
  }

  inline Event_Exposure& operator=(Event_Exposure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_Exposure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Exposure* internal_default_instance() {
    return reinterpret_cast<const Event_Exposure*>(
               &_Event_Exposure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Event_Exposure* other);
  friend void swap(Event_Exposure& a, Event_Exposure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Exposure* New() const final {
    return CreateMaybeMessage<Event_Exposure>(nullptr);
  }

  Event_Exposure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_Exposure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_Exposure& from);
  void MergeFrom(const Event_Exposure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Exposure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.camera.ExposureRoi exposure_lock_region = 4;
  bool has_exposure_lock_region() const;
  void clear_exposure_lock_region();
  static const int kExposureLockRegionFieldNumber = 4;
  const ::arsdk::camera::ExposureRoi& exposure_lock_region() const;
  ::arsdk::camera::ExposureRoi* release_exposure_lock_region();
  ::arsdk::camera::ExposureRoi* mutable_exposure_lock_region();
  void set_allocated_exposure_lock_region(::arsdk::camera::ExposureRoi* exposure_lock_region);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // .arsdk.camera.ShutterSpeed shutter_speed = 2;
  void clear_shutter_speed();
  static const int kShutterSpeedFieldNumber = 2;
  ::arsdk::camera::ShutterSpeed shutter_speed() const;
  void set_shutter_speed(::arsdk::camera::ShutterSpeed value);

  // .arsdk.camera.IsoSensitivity iso_sensitivity = 3;
  void clear_iso_sensitivity();
  static const int kIsoSensitivityFieldNumber = 3;
  ::arsdk::camera::IsoSensitivity iso_sensitivity() const;
  void set_iso_sensitivity(::arsdk::camera::IsoSensitivity value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.Exposure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::camera::ExposureRoi* exposure_lock_region_;
  ::google::protobuf::uint64 camera_id_;
  int shutter_speed_;
  int iso_sensitivity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_ZoomLevel :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.ZoomLevel) */ {
 public:
  Event_ZoomLevel();
  virtual ~Event_ZoomLevel();

  Event_ZoomLevel(const Event_ZoomLevel& from);

  inline Event_ZoomLevel& operator=(const Event_ZoomLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_ZoomLevel(Event_ZoomLevel&& from) noexcept
    : Event_ZoomLevel() {
    *this = ::std::move(from);
  }

  inline Event_ZoomLevel& operator=(Event_ZoomLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_ZoomLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ZoomLevel* internal_default_instance() {
    return reinterpret_cast<const Event_ZoomLevel*>(
               &_Event_ZoomLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(Event_ZoomLevel* other);
  friend void swap(Event_ZoomLevel& a, Event_ZoomLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_ZoomLevel* New() const final {
    return CreateMaybeMessage<Event_ZoomLevel>(nullptr);
  }

  Event_ZoomLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_ZoomLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_ZoomLevel& from);
  void MergeFrom(const Event_ZoomLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ZoomLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // double level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  double level() const;
  void set_level(double value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.ZoomLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  double level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_NextPhotoInterval :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.NextPhotoInterval) */ {
 public:
  Event_NextPhotoInterval();
  virtual ~Event_NextPhotoInterval();

  Event_NextPhotoInterval(const Event_NextPhotoInterval& from);

  inline Event_NextPhotoInterval& operator=(const Event_NextPhotoInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_NextPhotoInterval(Event_NextPhotoInterval&& from) noexcept
    : Event_NextPhotoInterval() {
    *this = ::std::move(from);
  }

  inline Event_NextPhotoInterval& operator=(Event_NextPhotoInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_NextPhotoInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_NextPhotoInterval* internal_default_instance() {
    return reinterpret_cast<const Event_NextPhotoInterval*>(
               &_Event_NextPhotoInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(Event_NextPhotoInterval* other);
  friend void swap(Event_NextPhotoInterval& a, Event_NextPhotoInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_NextPhotoInterval* New() const final {
    return CreateMaybeMessage<Event_NextPhotoInterval>(nullptr);
  }

  Event_NextPhotoInterval* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_NextPhotoInterval>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_NextPhotoInterval& from);
  void MergeFrom(const Event_NextPhotoInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_NextPhotoInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // double interval = 3;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  double interval() const;
  void set_interval(double value);

  // .arsdk.camera.PhotoMode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::arsdk::camera::PhotoMode mode() const;
  void set_mode(::arsdk::camera::PhotoMode value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.NextPhotoInterval)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 camera_id_;
  double interval_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_Photo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.Photo) */ {
 public:
  Event_Photo();
  virtual ~Event_Photo();

  Event_Photo(const Event_Photo& from);

  inline Event_Photo& operator=(const Event_Photo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Photo(Event_Photo&& from) noexcept
    : Event_Photo() {
    *this = ::std::move(from);
  }

  inline Event_Photo& operator=(Event_Photo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_Photo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Photo* internal_default_instance() {
    return reinterpret_cast<const Event_Photo*>(
               &_Event_Photo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Event_Photo* other);
  friend void swap(Event_Photo& a, Event_Photo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Photo* New() const final {
    return CreateMaybeMessage<Event_Photo>(nullptr);
  }

  Event_Photo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_Photo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_Photo& from);
  void MergeFrom(const Event_Photo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Photo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_id = 3;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 3;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  #if LANG_CXX11
  void set_media_id(::std::string&& value);
  #endif
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);

  // string resource_id = 5;
  void clear_resource_id();
  static const int kResourceIdFieldNumber = 5;
  const ::std::string& resource_id() const;
  void set_resource_id(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_id(::std::string&& value);
  #endif
  void set_resource_id(const char* value);
  void set_resource_id(const char* value, size_t size);
  ::std::string* mutable_resource_id();
  ::std::string* release_resource_id();
  void set_allocated_resource_id(::std::string* resource_id);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // .arsdk.camera.PhotoEvent type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::arsdk::camera::PhotoEvent type() const;
  void set_type(::arsdk::camera::PhotoEvent value);

  // .arsdk.camera.PhotoStopReason stop_reason = 4;
  void clear_stop_reason();
  static const int kStopReasonFieldNumber = 4;
  ::arsdk::camera::PhotoStopReason stop_reason() const;
  void set_stop_reason(::arsdk::camera::PhotoStopReason value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.Photo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  ::google::protobuf::internal::ArenaStringPtr resource_id_;
  ::google::protobuf::uint64 camera_id_;
  int type_;
  int stop_reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event_Recording :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event.Recording) */ {
 public:
  Event_Recording();
  virtual ~Event_Recording();

  Event_Recording(const Event_Recording& from);

  inline Event_Recording& operator=(const Event_Recording& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Recording(Event_Recording&& from) noexcept
    : Event_Recording() {
    *this = ::std::move(from);
  }

  inline Event_Recording& operator=(Event_Recording&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_Recording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Recording* internal_default_instance() {
    return reinterpret_cast<const Event_Recording*>(
               &_Event_Recording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Event_Recording* other);
  friend void swap(Event_Recording& a, Event_Recording& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Recording* New() const final {
    return CreateMaybeMessage<Event_Recording>(nullptr);
  }

  Event_Recording* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_Recording>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_Recording& from);
  void MergeFrom(const Event_Recording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Recording* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_id = 3;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 3;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  #if LANG_CXX11
  void set_media_id(::std::string&& value);
  #endif
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);

  // uint64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint64 camera_id() const;
  void set_camera_id(::google::protobuf::uint64 value);

  // .arsdk.camera.RecordingEvent type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::arsdk::camera::RecordingEvent type() const;
  void set_type(::arsdk::camera::RecordingEvent value);

  // .arsdk.camera.RecordingStopReason stop_reason = 4;
  void clear_stop_reason();
  static const int kStopReasonFieldNumber = 4;
  ::arsdk::camera::RecordingStopReason stop_reason() const;
  void set_stop_reason(::arsdk::camera::RecordingStopReason value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Event.Recording)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  ::google::protobuf::uint64 camera_id_;
  int type_;
  int stop_reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kCameraExposure = 1,
    kZoomLevel = 2,
    kNextPhotoInterval = 3,
    kCameraList = 16,
    kState = 17,
    kPhoto = 18,
    kRecording = 19,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_CameraList CameraList;
  typedef Event_State State;
  typedef Event_Exposure Exposure;
  typedef Event_ZoomLevel ZoomLevel;
  typedef Event_NextPhotoInterval NextPhotoInterval;
  typedef Event_Photo Photo;
  typedef Event_Recording Recording;

  // accessors -------------------------------------------------------

  // .arsdk.camera.Event.Exposure camera_exposure = 1;
  bool has_camera_exposure() const;
  void clear_camera_exposure();
  static const int kCameraExposureFieldNumber = 1;
  const ::arsdk::camera::Event_Exposure& camera_exposure() const;
  ::arsdk::camera::Event_Exposure* release_camera_exposure();
  ::arsdk::camera::Event_Exposure* mutable_camera_exposure();
  void set_allocated_camera_exposure(::arsdk::camera::Event_Exposure* camera_exposure);

  // .arsdk.camera.Event.ZoomLevel zoom_level = 2;
  bool has_zoom_level() const;
  void clear_zoom_level();
  static const int kZoomLevelFieldNumber = 2;
  const ::arsdk::camera::Event_ZoomLevel& zoom_level() const;
  ::arsdk::camera::Event_ZoomLevel* release_zoom_level();
  ::arsdk::camera::Event_ZoomLevel* mutable_zoom_level();
  void set_allocated_zoom_level(::arsdk::camera::Event_ZoomLevel* zoom_level);

  // .arsdk.camera.Event.NextPhotoInterval next_photo_interval = 3;
  bool has_next_photo_interval() const;
  void clear_next_photo_interval();
  static const int kNextPhotoIntervalFieldNumber = 3;
  const ::arsdk::camera::Event_NextPhotoInterval& next_photo_interval() const;
  ::arsdk::camera::Event_NextPhotoInterval* release_next_photo_interval();
  ::arsdk::camera::Event_NextPhotoInterval* mutable_next_photo_interval();
  void set_allocated_next_photo_interval(::arsdk::camera::Event_NextPhotoInterval* next_photo_interval);

  // .arsdk.camera.Event.CameraList camera_list = 16;
  bool has_camera_list() const;
  void clear_camera_list();
  static const int kCameraListFieldNumber = 16;
  const ::arsdk::camera::Event_CameraList& camera_list() const;
  ::arsdk::camera::Event_CameraList* release_camera_list();
  ::arsdk::camera::Event_CameraList* mutable_camera_list();
  void set_allocated_camera_list(::arsdk::camera::Event_CameraList* camera_list);

  // .arsdk.camera.Event.State state = 17;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 17;
  const ::arsdk::camera::Event_State& state() const;
  ::arsdk::camera::Event_State* release_state();
  ::arsdk::camera::Event_State* mutable_state();
  void set_allocated_state(::arsdk::camera::Event_State* state);

  // .arsdk.camera.Event.Photo photo = 18;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 18;
  const ::arsdk::camera::Event_Photo& photo() const;
  ::arsdk::camera::Event_Photo* release_photo();
  ::arsdk::camera::Event_Photo* mutable_photo();
  void set_allocated_photo(::arsdk::camera::Event_Photo* photo);

  // .arsdk.camera.Event.Recording recording = 19;
  bool has_recording() const;
  void clear_recording();
  static const int kRecordingFieldNumber = 19;
  const ::arsdk::camera::Event_Recording& recording() const;
  ::arsdk::camera::Event_Recording* release_recording();
  ::arsdk::camera::Event_Recording* mutable_recording();
  void set_allocated_recording(::arsdk::camera::Event_Recording* recording);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.camera.Event)
 private:
  class HasBitSetters;
  void set_has_camera_exposure();
  void set_has_zoom_level();
  void set_has_next_photo_interval();
  void set_has_camera_list();
  void set_has_state();
  void set_has_photo();
  void set_has_recording();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::camera::Event_Exposure* camera_exposure_;
    ::arsdk::camera::Event_ZoomLevel* zoom_level_;
    ::arsdk::camera::Event_NextPhotoInterval* next_photo_interval_;
    ::arsdk::camera::Event_CameraList* camera_list_;
    ::arsdk::camera::Event_State* state_;
    ::arsdk::camera::Event_Photo* photo_;
    ::arsdk::camera::Event_Recording* recording_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Capabilities_Rule_SelectedFieldsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Capabilities_Rule_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Capabilities_Rule_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Capabilities_Rule_SelectedFieldsEntry_DoNotUse();
  Capabilities_Rule_SelectedFieldsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Capabilities_Rule_SelectedFieldsEntry_DoNotUse& other);
  static const Capabilities_Rule_SelectedFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Capabilities_Rule_SelectedFieldsEntry_DoNotUse*>(&_Capabilities_Rule_SelectedFieldsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Capabilities_Rule :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Capabilities.Rule) */ {
 public:
  Capabilities_Rule();
  virtual ~Capabilities_Rule();

  Capabilities_Rule(const Capabilities_Rule& from);

  inline Capabilities_Rule& operator=(const Capabilities_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities_Rule(Capabilities_Rule&& from) noexcept
    : Capabilities_Rule() {
    *this = ::std::move(from);
  }

  inline Capabilities_Rule& operator=(Capabilities_Rule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Capabilities_Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities_Rule* internal_default_instance() {
    return reinterpret_cast<const Capabilities_Rule*>(
               &_Capabilities_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Capabilities_Rule* other);
  friend void swap(Capabilities_Rule& a, Capabilities_Rule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities_Rule* New() const final {
    return CreateMaybeMessage<Capabilities_Rule>(nullptr);
  }

  Capabilities_Rule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities_Rule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities_Rule& from);
  void MergeFrom(const Capabilities_Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities_Rule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .google.protobuf.Empty> selected_fields = 2;
  int selected_fields_size() const;
  void clear_selected_fields();
  static const int kSelectedFieldsFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
      selected_fields() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
      mutable_selected_fields();

  // repeated .arsdk.camera.CameraMode camera_modes = 3;
  int camera_modes_size() const;
  void clear_camera_modes();
  static const int kCameraModesFieldNumber = 3;
  ::arsdk::camera::CameraMode camera_modes(int index) const;
  void set_camera_modes(int index, ::arsdk::camera::CameraMode value);
  void add_camera_modes(::arsdk::camera::CameraMode value);
  const ::google::protobuf::RepeatedField<int>& camera_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_camera_modes();

  // repeated .arsdk.camera.PhotoMode photo_modes = 4;
  int photo_modes_size() const;
  void clear_photo_modes();
  static const int kPhotoModesFieldNumber = 4;
  ::arsdk::camera::PhotoMode photo_modes(int index) const;
  void set_photo_modes(int index, ::arsdk::camera::PhotoMode value);
  void add_photo_modes(::arsdk::camera::PhotoMode value);
  const ::google::protobuf::RepeatedField<int>& photo_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_modes();

  // repeated .arsdk.camera.DynamicRange photo_dynamic_ranges = 5;
  int photo_dynamic_ranges_size() const;
  void clear_photo_dynamic_ranges();
  static const int kPhotoDynamicRangesFieldNumber = 5;
  ::arsdk::camera::DynamicRange photo_dynamic_ranges(int index) const;
  void set_photo_dynamic_ranges(int index, ::arsdk::camera::DynamicRange value);
  void add_photo_dynamic_ranges(::arsdk::camera::DynamicRange value);
  const ::google::protobuf::RepeatedField<int>& photo_dynamic_ranges() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_dynamic_ranges();

  // repeated .arsdk.camera.PhotoResolution photo_resolutions = 6;
  int photo_resolutions_size() const;
  void clear_photo_resolutions();
  static const int kPhotoResolutionsFieldNumber = 6;
  ::arsdk::camera::PhotoResolution photo_resolutions(int index) const;
  void set_photo_resolutions(int index, ::arsdk::camera::PhotoResolution value);
  void add_photo_resolutions(::arsdk::camera::PhotoResolution value);
  const ::google::protobuf::RepeatedField<int>& photo_resolutions() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_resolutions();

  // repeated .arsdk.camera.PhotoFormat photo_formats = 7;
  int photo_formats_size() const;
  void clear_photo_formats();
  static const int kPhotoFormatsFieldNumber = 7;
  ::arsdk::camera::PhotoFormat photo_formats(int index) const;
  void set_photo_formats(int index, ::arsdk::camera::PhotoFormat value);
  void add_photo_formats(::arsdk::camera::PhotoFormat value);
  const ::google::protobuf::RepeatedField<int>& photo_formats() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_formats();

  // repeated .arsdk.camera.PhotoFileFormat photo_file_formats = 8;
  int photo_file_formats_size() const;
  void clear_photo_file_formats();
  static const int kPhotoFileFormatsFieldNumber = 8;
  ::arsdk::camera::PhotoFileFormat photo_file_formats(int index) const;
  void set_photo_file_formats(int index, ::arsdk::camera::PhotoFileFormat value);
  void add_photo_file_formats(::arsdk::camera::PhotoFileFormat value);
  const ::google::protobuf::RepeatedField<int>& photo_file_formats() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_file_formats();

  // repeated .arsdk.camera.BurstValue photo_burst_values = 9;
  int photo_burst_values_size() const;
  void clear_photo_burst_values();
  static const int kPhotoBurstValuesFieldNumber = 9;
  ::arsdk::camera::BurstValue photo_burst_values(int index) const;
  void set_photo_burst_values(int index, ::arsdk::camera::BurstValue value);
  void add_photo_burst_values(::arsdk::camera::BurstValue value);
  const ::google::protobuf::RepeatedField<int>& photo_burst_values() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_burst_values();

  // repeated .arsdk.camera.BracketingPreset photo_bracketing_presets = 10;
  int photo_bracketing_presets_size() const;
  void clear_photo_bracketing_presets();
  static const int kPhotoBracketingPresetsFieldNumber = 10;
  ::arsdk::camera::BracketingPreset photo_bracketing_presets(int index) const;
  void set_photo_bracketing_presets(int index, ::arsdk::camera::BracketingPreset value);
  void add_photo_bracketing_presets(::arsdk::camera::BracketingPreset value);
  const ::google::protobuf::RepeatedField<int>& photo_bracketing_presets() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_bracketing_presets();

  // repeated .arsdk.camera.PhotoStreamingMode photo_streaming_modes = 13;
  int photo_streaming_modes_size() const;
  void clear_photo_streaming_modes();
  static const int kPhotoStreamingModesFieldNumber = 13;
  ::arsdk::camera::PhotoStreamingMode photo_streaming_modes(int index) const;
  void set_photo_streaming_modes(int index, ::arsdk::camera::PhotoStreamingMode value);
  void add_photo_streaming_modes(::arsdk::camera::PhotoStreamingMode value);
  const ::google::protobuf::RepeatedField<int>& photo_streaming_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_streaming_modes();

  // repeated .arsdk.camera.VideoRecordingMode video_recording_modes = 14;
  int video_recording_modes_size() const;
  void clear_video_recording_modes();
  static const int kVideoRecordingModesFieldNumber = 14;
  ::arsdk::camera::VideoRecordingMode video_recording_modes(int index) const;
  void set_video_recording_modes(int index, ::arsdk::camera::VideoRecordingMode value);
  void add_video_recording_modes(::arsdk::camera::VideoRecordingMode value);
  const ::google::protobuf::RepeatedField<int>& video_recording_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_video_recording_modes();

  // repeated .arsdk.camera.DynamicRange video_recording_dynamic_ranges = 15;
  int video_recording_dynamic_ranges_size() const;
  void clear_video_recording_dynamic_ranges();
  static const int kVideoRecordingDynamicRangesFieldNumber = 15;
  ::arsdk::camera::DynamicRange video_recording_dynamic_ranges(int index) const;
  void set_video_recording_dynamic_ranges(int index, ::arsdk::camera::DynamicRange value);
  void add_video_recording_dynamic_ranges(::arsdk::camera::DynamicRange value);
  const ::google::protobuf::RepeatedField<int>& video_recording_dynamic_ranges() const;
  ::google::protobuf::RepeatedField<int>* mutable_video_recording_dynamic_ranges();

  // repeated .arsdk.camera.VideoCodec video_recording_codecs = 16;
  int video_recording_codecs_size() const;
  void clear_video_recording_codecs();
  static const int kVideoRecordingCodecsFieldNumber = 16;
  ::arsdk::camera::VideoCodec video_recording_codecs(int index) const;
  void set_video_recording_codecs(int index, ::arsdk::camera::VideoCodec value);
  void add_video_recording_codecs(::arsdk::camera::VideoCodec value);
  const ::google::protobuf::RepeatedField<int>& video_recording_codecs() const;
  ::google::protobuf::RepeatedField<int>* mutable_video_recording_codecs();

  // repeated .arsdk.camera.VideoResolution video_recording_resolutions = 17;
  int video_recording_resolutions_size() const;
  void clear_video_recording_resolutions();
  static const int kVideoRecordingResolutionsFieldNumber = 17;
  ::arsdk::camera::VideoResolution video_recording_resolutions(int index) const;
  void set_video_recording_resolutions(int index, ::arsdk::camera::VideoResolution value);
  void add_video_recording_resolutions(::arsdk::camera::VideoResolution value);
  const ::google::protobuf::RepeatedField<int>& video_recording_resolutions() const;
  ::google::protobuf::RepeatedField<int>* mutable_video_recording_resolutions();

  // repeated .arsdk.camera.Framerate video_recording_framerates = 18;
  int video_recording_framerates_size() const;
  void clear_video_recording_framerates();
  static const int kVideoRecordingFrameratesFieldNumber = 18;
  ::arsdk::camera::Framerate video_recording_framerates(int index) const;
  void set_video_recording_framerates(int index, ::arsdk::camera::Framerate value);
  void add_video_recording_framerates(::arsdk::camera::Framerate value);
  const ::google::protobuf::RepeatedField<int>& video_recording_framerates() const;
  ::google::protobuf::RepeatedField<int>* mutable_video_recording_framerates();

  // repeated .arsdk.camera.AudioRecordingMode audio_recording_modes = 20;
  int audio_recording_modes_size() const;
  void clear_audio_recording_modes();
  static const int kAudioRecordingModesFieldNumber = 20;
  ::arsdk::camera::AudioRecordingMode audio_recording_modes(int index) const;
  void set_audio_recording_modes(int index, ::arsdk::camera::AudioRecordingMode value);
  void add_audio_recording_modes(::arsdk::camera::AudioRecordingMode value);
  const ::google::protobuf::RepeatedField<int>& audio_recording_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_audio_recording_modes();

  // repeated .arsdk.camera.ExposureMode exposure_modes = 23;
  int exposure_modes_size() const;
  void clear_exposure_modes();
  static const int kExposureModesFieldNumber = 23;
  ::arsdk::camera::ExposureMode exposure_modes(int index) const;
  void set_exposure_modes(int index, ::arsdk::camera::ExposureMode value);
  void add_exposure_modes(::arsdk::camera::ExposureMode value);
  const ::google::protobuf::RepeatedField<int>& exposure_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_exposure_modes();

  // repeated .arsdk.camera.ShutterSpeed exposure_manual_shutter_speeds = 24;
  int exposure_manual_shutter_speeds_size() const;
  void clear_exposure_manual_shutter_speeds();
  static const int kExposureManualShutterSpeedsFieldNumber = 24;
  ::arsdk::camera::ShutterSpeed exposure_manual_shutter_speeds(int index) const;
  void set_exposure_manual_shutter_speeds(int index, ::arsdk::camera::ShutterSpeed value);
  void add_exposure_manual_shutter_speeds(::arsdk::camera::ShutterSpeed value);
  const ::google::protobuf::RepeatedField<int>& exposure_manual_shutter_speeds() const;
  ::google::protobuf::RepeatedField<int>* mutable_exposure_manual_shutter_speeds();

  // repeated .arsdk.camera.IsoSensitivity exposure_manual_iso_sensitivities = 25;
  int exposure_manual_iso_sensitivities_size() const;
  void clear_exposure_manual_iso_sensitivities();
  static const int kExposureManualIsoSensitivitiesFieldNumber = 25;
  ::arsdk::camera::IsoSensitivity exposure_manual_iso_sensitivities(int index) const;
  void set_exposure_manual_iso_sensitivities(int index, ::arsdk::camera::IsoSensitivity value);
  void add_exposure_manual_iso_sensitivities(::arsdk::camera::IsoSensitivity value);
  const ::google::protobuf::RepeatedField<int>& exposure_manual_iso_sensitivities() const;
  ::google::protobuf::RepeatedField<int>* mutable_exposure_manual_iso_sensitivities();

  // repeated .arsdk.camera.IsoSensitivity exposure_maximum_iso_sensitivities = 26;
  int exposure_maximum_iso_sensitivities_size() const;
  void clear_exposure_maximum_iso_sensitivities();
  static const int kExposureMaximumIsoSensitivitiesFieldNumber = 26;
  ::arsdk::camera::IsoSensitivity exposure_maximum_iso_sensitivities(int index) const;
  void set_exposure_maximum_iso_sensitivities(int index, ::arsdk::camera::IsoSensitivity value);
  void add_exposure_maximum_iso_sensitivities(::arsdk::camera::IsoSensitivity value);
  const ::google::protobuf::RepeatedField<int>& exposure_maximum_iso_sensitivities() const;
  ::google::protobuf::RepeatedField<int>* mutable_exposure_maximum_iso_sensitivities();

  // repeated .arsdk.camera.WhiteBalanceMode white_balance_modes = 27;
  int white_balance_modes_size() const;
  void clear_white_balance_modes();
  static const int kWhiteBalanceModesFieldNumber = 27;
  ::arsdk::camera::WhiteBalanceMode white_balance_modes(int index) const;
  void set_white_balance_modes(int index, ::arsdk::camera::WhiteBalanceMode value);
  void add_white_balance_modes(::arsdk::camera::WhiteBalanceMode value);
  const ::google::protobuf::RepeatedField<int>& white_balance_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_white_balance_modes();

  // repeated .arsdk.camera.WhiteBalanceTemperature white_balance_temperatures = 28;
  int white_balance_temperatures_size() const;
  void clear_white_balance_temperatures();
  static const int kWhiteBalanceTemperaturesFieldNumber = 28;
  ::arsdk::camera::WhiteBalanceTemperature white_balance_temperatures(int index) const;
  void set_white_balance_temperatures(int index, ::arsdk::camera::WhiteBalanceTemperature value);
  void add_white_balance_temperatures(::arsdk::camera::WhiteBalanceTemperature value);
  const ::google::protobuf::RepeatedField<int>& white_balance_temperatures() const;
  ::google::protobuf::RepeatedField<int>* mutable_white_balance_temperatures();

  // repeated .arsdk.camera.EvCompensation ev_compensations = 29;
  int ev_compensations_size() const;
  void clear_ev_compensations();
  static const int kEvCompensationsFieldNumber = 29;
  ::arsdk::camera::EvCompensation ev_compensations(int index) const;
  void set_ev_compensations(int index, ::arsdk::camera::EvCompensation value);
  void add_ev_compensations(::arsdk::camera::EvCompensation value);
  const ::google::protobuf::RepeatedField<int>& ev_compensations() const;
  ::google::protobuf::RepeatedField<int>* mutable_ev_compensations();

  // repeated .arsdk.camera.ImageStyle image_styles = 30;
  int image_styles_size() const;
  void clear_image_styles();
  static const int kImageStylesFieldNumber = 30;
  ::arsdk::camera::ImageStyle image_styles(int index) const;
  void set_image_styles(int index, ::arsdk::camera::ImageStyle value);
  void add_image_styles(::arsdk::camera::ImageStyle value);
  const ::google::protobuf::RepeatedField<int>& image_styles() const;
  ::google::protobuf::RepeatedField<int>* mutable_image_styles();

  // repeated .arsdk.camera.ZoomVelocityControlQualityMode zoom_velocity_control_quality_modes = 35;
  int zoom_velocity_control_quality_modes_size() const;
  void clear_zoom_velocity_control_quality_modes();
  static const int kZoomVelocityControlQualityModesFieldNumber = 35;
  ::arsdk::camera::ZoomVelocityControlQualityMode zoom_velocity_control_quality_modes(int index) const;
  void set_zoom_velocity_control_quality_modes(int index, ::arsdk::camera::ZoomVelocityControlQualityMode value);
  void add_zoom_velocity_control_quality_modes(::arsdk::camera::ZoomVelocityControlQualityMode value);
  const ::google::protobuf::RepeatedField<int>& zoom_velocity_control_quality_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_zoom_velocity_control_quality_modes();

  // repeated .arsdk.camera.AutoRecordMode auto_record_modes = 36;
  int auto_record_modes_size() const;
  void clear_auto_record_modes();
  static const int kAutoRecordModesFieldNumber = 36;
  ::arsdk::camera::AutoRecordMode auto_record_modes(int index) const;
  void set_auto_record_modes(int index, ::arsdk::camera::AutoRecordMode value);
  void add_auto_record_modes(::arsdk::camera::AutoRecordMode value);
  const ::google::protobuf::RepeatedField<int>& auto_record_modes() const;
  ::google::protobuf::RepeatedField<int>* mutable_auto_record_modes();

  // repeated .arsdk.camera.DigitalSignature photo_signatures = 40;
  int photo_signatures_size() const;
  void clear_photo_signatures();
  static const int kPhotoSignaturesFieldNumber = 40;
  ::arsdk::camera::DigitalSignature photo_signatures(int index) const;
  void set_photo_signatures(int index, ::arsdk::camera::DigitalSignature value);
  void add_photo_signatures(::arsdk::camera::DigitalSignature value);
  const ::google::protobuf::RepeatedField<int>& photo_signatures() const;
  ::google::protobuf::RepeatedField<int>* mutable_photo_signatures();

  // repeated .arsdk.camera.ExposureMetering exposure_meterings = 41;
  int exposure_meterings_size() const;
  void clear_exposure_meterings();
  static const int kExposureMeteringsFieldNumber = 41;
  ::arsdk::camera::ExposureMetering exposure_meterings(int index) const;
  void set_exposure_meterings(int index, ::arsdk::camera::ExposureMetering value);
  void add_exposure_meterings(::arsdk::camera::ExposureMetering value);
  const ::google::protobuf::RepeatedField<int>& exposure_meterings() const;
  ::google::protobuf::RepeatedField<int>* mutable_exposure_meterings();

  // repeated .arsdk.camera.StoragePolicy storage_policies = 42;
  int storage_policies_size() const;
  void clear_storage_policies();
  static const int kStoragePoliciesFieldNumber = 42;
  ::arsdk::camera::StoragePolicy storage_policies(int index) const;
  void set_storage_policies(int index, ::arsdk::camera::StoragePolicy value);
  void add_storage_policies(::arsdk::camera::StoragePolicy value);
  const ::google::protobuf::RepeatedField<int>& storage_policies() const;
  ::google::protobuf::RepeatedField<int>* mutable_storage_policies();

  // repeated uint32 video_recording_bitrates = 43;
  int video_recording_bitrates_size() const;
  void clear_video_recording_bitrates();
  static const int kVideoRecordingBitratesFieldNumber = 43;
  ::google::protobuf::uint32 video_recording_bitrates(int index) const;
  void set_video_recording_bitrates(int index, ::google::protobuf::uint32 value);
  void add_video_recording_bitrates(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      video_recording_bitrates() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_video_recording_bitrates();

  // .arsdk.camera.DoubleRange photo_time_lapse_interval_range = 11;
  bool has_photo_time_lapse_interval_range() const;
  void clear_photo_time_lapse_interval_range();
  static const int kPhotoTimeLapseIntervalRangeFieldNumber = 11;
  const ::arsdk::camera::DoubleRange& photo_time_lapse_interval_range() const;
  ::arsdk::camera::DoubleRange* release_photo_time_lapse_interval_range();
  ::arsdk::camera::DoubleRange* mutable_photo_time_lapse_interval_range();
  void set_allocated_photo_time_lapse_interval_range(::arsdk::camera::DoubleRange* photo_time_lapse_interval_range);

  // .arsdk.camera.DoubleRange photo_gps_lapse_interval_range = 12;
  bool has_photo_gps_lapse_interval_range() const;
  void clear_photo_gps_lapse_interval_range();
  static const int kPhotoGpsLapseIntervalRangeFieldNumber = 12;
  const ::arsdk::camera::DoubleRange& photo_gps_lapse_interval_range() const;
  ::arsdk::camera::DoubleRange* release_photo_gps_lapse_interval_range();
  ::arsdk::camera::DoubleRange* mutable_photo_gps_lapse_interval_range();
  void set_allocated_photo_gps_lapse_interval_range(::arsdk::camera::DoubleRange* photo_gps_lapse_interval_range);

  // .arsdk.camera.DoubleRange image_contrast_range = 31;
  bool has_image_contrast_range() const;
  void clear_image_contrast_range();
  static const int kImageContrastRangeFieldNumber = 31;
  const ::arsdk::camera::DoubleRange& image_contrast_range() const;
  ::arsdk::camera::DoubleRange* release_image_contrast_range();
  ::arsdk::camera::DoubleRange* mutable_image_contrast_range();
  void set_allocated_image_contrast_range(::arsdk::camera::DoubleRange* image_contrast_range);

  // .arsdk.camera.DoubleRange image_saturation_range = 32;
  bool has_image_saturation_range() const;
  void clear_image_saturation_range();
  static const int kImageSaturationRangeFieldNumber = 32;
  const ::arsdk::camera::DoubleRange& image_saturation_range() const;
  ::arsdk::camera::DoubleRange* release_image_saturation_range();
  ::arsdk::camera::DoubleRange* mutable_image_saturation_range();
  void set_allocated_image_saturation_range(::arsdk::camera::DoubleRange* image_saturation_range);

  // .arsdk.camera.DoubleRange image_sharpness_range = 33;
  bool has_image_sharpness_range() const;
  void clear_image_sharpness_range();
  static const int kImageSharpnessRangeFieldNumber = 33;
  const ::arsdk::camera::DoubleRange& image_sharpness_range() const;
  ::arsdk::camera::DoubleRange* release_image_sharpness_range();
  ::arsdk::camera::DoubleRange* mutable_image_sharpness_range();
  void set_allocated_image_sharpness_range(::arsdk::camera::DoubleRange* image_sharpness_range);

  // .arsdk.camera.DoubleRange zoom_max_speed_range = 34;
  bool has_zoom_max_speed_range() const;
  void clear_zoom_max_speed_range();
  static const int kZoomMaxSpeedRangeFieldNumber = 34;
  const ::arsdk::camera::DoubleRange& zoom_max_speed_range() const;
  ::arsdk::camera::DoubleRange* release_zoom_max_speed_range();
  ::arsdk::camera::DoubleRange* mutable_zoom_max_speed_range();
  void set_allocated_zoom_max_speed_range(::arsdk::camera::DoubleRange* zoom_max_speed_range);

  // .arsdk.camera.DoubleRange alignment_offset_pitch_range = 37;
  bool has_alignment_offset_pitch_range() const;
  void clear_alignment_offset_pitch_range();
  static const int kAlignmentOffsetPitchRangeFieldNumber = 37;
  const ::arsdk::camera::DoubleRange& alignment_offset_pitch_range() const;
  ::arsdk::camera::DoubleRange* release_alignment_offset_pitch_range();
  ::arsdk::camera::DoubleRange* mutable_alignment_offset_pitch_range();
  void set_allocated_alignment_offset_pitch_range(::arsdk::camera::DoubleRange* alignment_offset_pitch_range);

  // .arsdk.camera.DoubleRange alignment_offset_roll_range = 38;
  bool has_alignment_offset_roll_range() const;
  void clear_alignment_offset_roll_range();
  static const int kAlignmentOffsetRollRangeFieldNumber = 38;
  const ::arsdk::camera::DoubleRange& alignment_offset_roll_range() const;
  ::arsdk::camera::DoubleRange* release_alignment_offset_roll_range();
  ::arsdk::camera::DoubleRange* mutable_alignment_offset_roll_range();
  void set_allocated_alignment_offset_roll_range(::arsdk::camera::DoubleRange* alignment_offset_roll_range);

  // .arsdk.camera.DoubleRange alignment_offset_yaw_range = 39;
  bool has_alignment_offset_yaw_range() const;
  void clear_alignment_offset_yaw_range();
  static const int kAlignmentOffsetYawRangeFieldNumber = 39;
  const ::arsdk::camera::DoubleRange& alignment_offset_yaw_range() const;
  ::arsdk::camera::DoubleRange* release_alignment_offset_yaw_range();
  ::arsdk::camera::DoubleRange* mutable_alignment_offset_yaw_range();
  void set_allocated_alignment_offset_yaw_range(::arsdk::camera::DoubleRange* alignment_offset_yaw_range);

  // uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Capabilities.Rule)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Capabilities_Rule_SelectedFieldsEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::Empty,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > selected_fields_;
  ::google::protobuf::RepeatedField<int> camera_modes_;
  mutable std::atomic<int> _camera_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_modes_;
  mutable std::atomic<int> _photo_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_dynamic_ranges_;
  mutable std::atomic<int> _photo_dynamic_ranges_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_resolutions_;
  mutable std::atomic<int> _photo_resolutions_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_formats_;
  mutable std::atomic<int> _photo_formats_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_file_formats_;
  mutable std::atomic<int> _photo_file_formats_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_burst_values_;
  mutable std::atomic<int> _photo_burst_values_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_bracketing_presets_;
  mutable std::atomic<int> _photo_bracketing_presets_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_streaming_modes_;
  mutable std::atomic<int> _photo_streaming_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> video_recording_modes_;
  mutable std::atomic<int> _video_recording_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> video_recording_dynamic_ranges_;
  mutable std::atomic<int> _video_recording_dynamic_ranges_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> video_recording_codecs_;
  mutable std::atomic<int> _video_recording_codecs_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> video_recording_resolutions_;
  mutable std::atomic<int> _video_recording_resolutions_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> video_recording_framerates_;
  mutable std::atomic<int> _video_recording_framerates_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> audio_recording_modes_;
  mutable std::atomic<int> _audio_recording_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> exposure_modes_;
  mutable std::atomic<int> _exposure_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> exposure_manual_shutter_speeds_;
  mutable std::atomic<int> _exposure_manual_shutter_speeds_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> exposure_manual_iso_sensitivities_;
  mutable std::atomic<int> _exposure_manual_iso_sensitivities_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> exposure_maximum_iso_sensitivities_;
  mutable std::atomic<int> _exposure_maximum_iso_sensitivities_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> white_balance_modes_;
  mutable std::atomic<int> _white_balance_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> white_balance_temperatures_;
  mutable std::atomic<int> _white_balance_temperatures_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> ev_compensations_;
  mutable std::atomic<int> _ev_compensations_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> image_styles_;
  mutable std::atomic<int> _image_styles_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> zoom_velocity_control_quality_modes_;
  mutable std::atomic<int> _zoom_velocity_control_quality_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> auto_record_modes_;
  mutable std::atomic<int> _auto_record_modes_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> photo_signatures_;
  mutable std::atomic<int> _photo_signatures_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> exposure_meterings_;
  mutable std::atomic<int> _exposure_meterings_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> storage_policies_;
  mutable std::atomic<int> _storage_policies_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > video_recording_bitrates_;
  mutable std::atomic<int> _video_recording_bitrates_cached_byte_size_;
  ::arsdk::camera::DoubleRange* photo_time_lapse_interval_range_;
  ::arsdk::camera::DoubleRange* photo_gps_lapse_interval_range_;
  ::arsdk::camera::DoubleRange* image_contrast_range_;
  ::arsdk::camera::DoubleRange* image_saturation_range_;
  ::arsdk::camera::DoubleRange* image_sharpness_range_;
  ::arsdk::camera::DoubleRange* zoom_max_speed_range_;
  ::arsdk::camera::DoubleRange* alignment_offset_pitch_range_;
  ::arsdk::camera::DoubleRange* alignment_offset_roll_range_;
  ::arsdk::camera::DoubleRange* alignment_offset_yaw_range_;
  ::google::protobuf::uint64 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Capabilities :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(Capabilities* other);
  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities* New() const final {
    return CreateMaybeMessage<Capabilities>(nullptr);
  }

  Capabilities* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Capabilities_Rule Rule;

  // accessors -------------------------------------------------------

  // repeated .arsdk.camera.Capabilities.Rule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  ::arsdk::camera::Capabilities_Rule* mutable_rules(int index);
  ::google::protobuf::RepeatedPtrField< ::arsdk::camera::Capabilities_Rule >*
      mutable_rules();
  const ::arsdk::camera::Capabilities_Rule& rules(int index) const;
  ::arsdk::camera::Capabilities_Rule* add_rules();
  const ::google::protobuf::RepeatedPtrField< ::arsdk::camera::Capabilities_Rule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:arsdk.camera.Capabilities)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::arsdk::camera::Capabilities_Rule > rules_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class Config_SelectedFieldsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Config_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Config_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Config_SelectedFieldsEntry_DoNotUse();
  Config_SelectedFieldsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Config_SelectedFieldsEntry_DoNotUse& other);
  static const Config_SelectedFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Config_SelectedFieldsEntry_DoNotUse*>(&_Config_SelectedFieldsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Config :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .google.protobuf.Empty> selected_fields = 1;
  int selected_fields_size() const;
  void clear_selected_fields();
  static const int kSelectedFieldsFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
      selected_fields() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
      mutable_selected_fields();

  // .arsdk.camera.CameraMode camera_mode = 2;
  void clear_camera_mode();
  static const int kCameraModeFieldNumber = 2;
  ::arsdk::camera::CameraMode camera_mode() const;
  void set_camera_mode(::arsdk::camera::CameraMode value);

  // .arsdk.camera.PhotoMode photo_mode = 3;
  void clear_photo_mode();
  static const int kPhotoModeFieldNumber = 3;
  ::arsdk::camera::PhotoMode photo_mode() const;
  void set_photo_mode(::arsdk::camera::PhotoMode value);

  // .arsdk.camera.DynamicRange photo_dynamic_range = 4;
  void clear_photo_dynamic_range();
  static const int kPhotoDynamicRangeFieldNumber = 4;
  ::arsdk::camera::DynamicRange photo_dynamic_range() const;
  void set_photo_dynamic_range(::arsdk::camera::DynamicRange value);

  // .arsdk.camera.PhotoResolution photo_resolution = 5;
  void clear_photo_resolution();
  static const int kPhotoResolutionFieldNumber = 5;
  ::arsdk::camera::PhotoResolution photo_resolution() const;
  void set_photo_resolution(::arsdk::camera::PhotoResolution value);

  // .arsdk.camera.PhotoFormat photo_format = 6;
  void clear_photo_format();
  static const int kPhotoFormatFieldNumber = 6;
  ::arsdk::camera::PhotoFormat photo_format() const;
  void set_photo_format(::arsdk::camera::PhotoFormat value);

  // .arsdk.camera.PhotoFileFormat photo_file_format = 7;
  void clear_photo_file_format();
  static const int kPhotoFileFormatFieldNumber = 7;
  ::arsdk::camera::PhotoFileFormat photo_file_format() const;
  void set_photo_file_format(::arsdk::camera::PhotoFileFormat value);

  // .arsdk.camera.BurstValue photo_burst_value = 8;
  void clear_photo_burst_value();
  static const int kPhotoBurstValueFieldNumber = 8;
  ::arsdk::camera::BurstValue photo_burst_value() const;
  void set_photo_burst_value(::arsdk::camera::BurstValue value);

  // .arsdk.camera.BracketingPreset photo_bracketing_preset = 9;
  void clear_photo_bracketing_preset();
  static const int kPhotoBracketingPresetFieldNumber = 9;
  ::arsdk::camera::BracketingPreset photo_bracketing_preset() const;
  void set_photo_bracketing_preset(::arsdk::camera::BracketingPreset value);

  // double photo_time_lapse_interval = 10;
  void clear_photo_time_lapse_interval();
  static const int kPhotoTimeLapseIntervalFieldNumber = 10;
  double photo_time_lapse_interval() const;
  void set_photo_time_lapse_interval(double value);

  // double photo_gps_lapse_interval = 11;
  void clear_photo_gps_lapse_interval();
  static const int kPhotoGpsLapseIntervalFieldNumber = 11;
  double photo_gps_lapse_interval() const;
  void set_photo_gps_lapse_interval(double value);

  // .arsdk.camera.PhotoStreamingMode photo_streaming_mode = 12;
  void clear_photo_streaming_mode();
  static const int kPhotoStreamingModeFieldNumber = 12;
  ::arsdk::camera::PhotoStreamingMode photo_streaming_mode() const;
  void set_photo_streaming_mode(::arsdk::camera::PhotoStreamingMode value);

  // .arsdk.camera.VideoRecordingMode video_recording_mode = 13;
  void clear_video_recording_mode();
  static const int kVideoRecordingModeFieldNumber = 13;
  ::arsdk::camera::VideoRecordingMode video_recording_mode() const;
  void set_video_recording_mode(::arsdk::camera::VideoRecordingMode value);

  // .arsdk.camera.DynamicRange video_recording_dynamic_range = 14;
  void clear_video_recording_dynamic_range();
  static const int kVideoRecordingDynamicRangeFieldNumber = 14;
  ::arsdk::camera::DynamicRange video_recording_dynamic_range() const;
  void set_video_recording_dynamic_range(::arsdk::camera::DynamicRange value);

  // .arsdk.camera.VideoCodec video_recording_codec = 15;
  void clear_video_recording_codec();
  static const int kVideoRecordingCodecFieldNumber = 15;
  ::arsdk::camera::VideoCodec video_recording_codec() const;
  void set_video_recording_codec(::arsdk::camera::VideoCodec value);

  // .arsdk.camera.VideoResolution video_recording_resolution = 16;
  void clear_video_recording_resolution();
  static const int kVideoRecordingResolutionFieldNumber = 16;
  ::arsdk::camera::VideoResolution video_recording_resolution() const;
  void set_video_recording_resolution(::arsdk::camera::VideoResolution value);

  // .arsdk.camera.Framerate video_recording_framerate = 17;
  void clear_video_recording_framerate();
  static const int kVideoRecordingFramerateFieldNumber = 17;
  ::arsdk::camera::Framerate video_recording_framerate() const;
  void set_video_recording_framerate(::arsdk::camera::Framerate value);

  // .arsdk.camera.AudioRecordingMode audio_recording_mode = 19;
  void clear_audio_recording_mode();
  static const int kAudioRecordingModeFieldNumber = 19;
  ::arsdk::camera::AudioRecordingMode audio_recording_mode() const;
  void set_audio_recording_mode(::arsdk::camera::AudioRecordingMode value);

  // .arsdk.camera.ExposureMode exposure_mode = 22;
  void clear_exposure_mode();
  static const int kExposureModeFieldNumber = 22;
  ::arsdk::camera::ExposureMode exposure_mode() const;
  void set_exposure_mode(::arsdk::camera::ExposureMode value);

  // .arsdk.camera.ShutterSpeed exposure_manual_shutter_speed = 23;
  void clear_exposure_manual_shutter_speed();
  static const int kExposureManualShutterSpeedFieldNumber = 23;
  ::arsdk::camera::ShutterSpeed exposure_manual_shutter_speed() const;
  void set_exposure_manual_shutter_speed(::arsdk::camera::ShutterSpeed value);

  // .arsdk.camera.IsoSensitivity exposure_manual_iso_sensitivity = 24;
  void clear_exposure_manual_iso_sensitivity();
  static const int kExposureManualIsoSensitivityFieldNumber = 24;
  ::arsdk::camera::IsoSensitivity exposure_manual_iso_sensitivity() const;
  void set_exposure_manual_iso_sensitivity(::arsdk::camera::IsoSensitivity value);

  // .arsdk.camera.IsoSensitivity exposure_maximum_iso_sensitivity = 25;
  void clear_exposure_maximum_iso_sensitivity();
  static const int kExposureMaximumIsoSensitivityFieldNumber = 25;
  ::arsdk::camera::IsoSensitivity exposure_maximum_iso_sensitivity() const;
  void set_exposure_maximum_iso_sensitivity(::arsdk::camera::IsoSensitivity value);

  // .arsdk.camera.WhiteBalanceMode white_balance_mode = 26;
  void clear_white_balance_mode();
  static const int kWhiteBalanceModeFieldNumber = 26;
  ::arsdk::camera::WhiteBalanceMode white_balance_mode() const;
  void set_white_balance_mode(::arsdk::camera::WhiteBalanceMode value);

  // .arsdk.camera.WhiteBalanceTemperature white_balance_temperature = 27;
  void clear_white_balance_temperature();
  static const int kWhiteBalanceTemperatureFieldNumber = 27;
  ::arsdk::camera::WhiteBalanceTemperature white_balance_temperature() const;
  void set_white_balance_temperature(::arsdk::camera::WhiteBalanceTemperature value);

  // .arsdk.camera.EvCompensation ev_compensation = 28;
  void clear_ev_compensation();
  static const int kEvCompensationFieldNumber = 28;
  ::arsdk::camera::EvCompensation ev_compensation() const;
  void set_ev_compensation(::arsdk::camera::EvCompensation value);

  // double image_contrast = 30;
  void clear_image_contrast();
  static const int kImageContrastFieldNumber = 30;
  double image_contrast() const;
  void set_image_contrast(double value);

  // double image_saturation = 31;
  void clear_image_saturation();
  static const int kImageSaturationFieldNumber = 31;
  double image_saturation() const;
  void set_image_saturation(double value);

  // .arsdk.camera.ImageStyle image_style = 29;
  void clear_image_style();
  static const int kImageStyleFieldNumber = 29;
  ::arsdk::camera::ImageStyle image_style() const;
  void set_image_style(::arsdk::camera::ImageStyle value);

  // .arsdk.camera.ZoomVelocityControlQualityMode zoom_velocity_control_quality_mode = 34;
  void clear_zoom_velocity_control_quality_mode();
  static const int kZoomVelocityControlQualityModeFieldNumber = 34;
  ::arsdk::camera::ZoomVelocityControlQualityMode zoom_velocity_control_quality_mode() const;
  void set_zoom_velocity_control_quality_mode(::arsdk::camera::ZoomVelocityControlQualityMode value);

  // double image_sharpness = 32;
  void clear_image_sharpness();
  static const int kImageSharpnessFieldNumber = 32;
  double image_sharpness() const;
  void set_image_sharpness(double value);

  // double zoom_max_speed = 33;
  void clear_zoom_max_speed();
  static const int kZoomMaxSpeedFieldNumber = 33;
  double zoom_max_speed() const;
  void set_zoom_max_speed(double value);

  // double alignment_offset_pitch = 36;
  void clear_alignment_offset_pitch();
  static const int kAlignmentOffsetPitchFieldNumber = 36;
  double alignment_offset_pitch() const;
  void set_alignment_offset_pitch(double value);

  // double alignment_offset_roll = 37;
  void clear_alignment_offset_roll();
  static const int kAlignmentOffsetRollFieldNumber = 37;
  double alignment_offset_roll() const;
  void set_alignment_offset_roll(double value);

  // .arsdk.camera.AutoRecordMode auto_record_mode = 35;
  void clear_auto_record_mode();
  static const int kAutoRecordModeFieldNumber = 35;
  ::arsdk::camera::AutoRecordMode auto_record_mode() const;
  void set_auto_record_mode(::arsdk::camera::AutoRecordMode value);

  // .arsdk.camera.DigitalSignature photo_signature = 39;
  void clear_photo_signature();
  static const int kPhotoSignatureFieldNumber = 39;
  ::arsdk::camera::DigitalSignature photo_signature() const;
  void set_photo_signature(::arsdk::camera::DigitalSignature value);

  // double alignment_offset_yaw = 38;
  void clear_alignment_offset_yaw();
  static const int kAlignmentOffsetYawFieldNumber = 38;
  double alignment_offset_yaw() const;
  void set_alignment_offset_yaw(double value);

  // uint32 video_recording_bitrate = 42;
  void clear_video_recording_bitrate();
  static const int kVideoRecordingBitrateFieldNumber = 42;
  ::google::protobuf::uint32 video_recording_bitrate() const;
  void set_video_recording_bitrate(::google::protobuf::uint32 value);

  // .arsdk.camera.ExposureMetering exposure_metering = 40;
  void clear_exposure_metering();
  static const int kExposureMeteringFieldNumber = 40;
  ::arsdk::camera::ExposureMetering exposure_metering() const;
  void set_exposure_metering(::arsdk::camera::ExposureMetering value);

  // .arsdk.camera.StoragePolicy storage_policy = 41;
  void clear_storage_policy();
  static const int kStoragePolicyFieldNumber = 41;
  ::arsdk::camera::StoragePolicy storage_policy() const;
  void set_storage_policy(::arsdk::camera::StoragePolicy value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.Config)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Config_SelectedFieldsEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::Empty,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > selected_fields_;
  int camera_mode_;
  int photo_mode_;
  int photo_dynamic_range_;
  int photo_resolution_;
  int photo_format_;
  int photo_file_format_;
  int photo_burst_value_;
  int photo_bracketing_preset_;
  double photo_time_lapse_interval_;
  double photo_gps_lapse_interval_;
  int photo_streaming_mode_;
  int video_recording_mode_;
  int video_recording_dynamic_range_;
  int video_recording_codec_;
  int video_recording_resolution_;
  int video_recording_framerate_;
  int audio_recording_mode_;
  int exposure_mode_;
  int exposure_manual_shutter_speed_;
  int exposure_manual_iso_sensitivity_;
  int exposure_maximum_iso_sensitivity_;
  int white_balance_mode_;
  int white_balance_temperature_;
  int ev_compensation_;
  double image_contrast_;
  double image_saturation_;
  int image_style_;
  int zoom_velocity_control_quality_mode_;
  double image_sharpness_;
  double zoom_max_speed_;
  double alignment_offset_pitch_;
  double alignment_offset_roll_;
  int auto_record_mode_;
  int photo_signature_;
  double alignment_offset_yaw_;
  ::google::protobuf::uint32 video_recording_bitrate_;
  int exposure_metering_;
  int storage_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class DoubleRange :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.DoubleRange) */ {
 public:
  DoubleRange();
  virtual ~DoubleRange();

  DoubleRange(const DoubleRange& from);

  inline DoubleRange& operator=(const DoubleRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleRange(DoubleRange&& from) noexcept
    : DoubleRange() {
    *this = ::std::move(from);
  }

  inline DoubleRange& operator=(DoubleRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoubleRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleRange* internal_default_instance() {
    return reinterpret_cast<const DoubleRange*>(
               &_DoubleRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(DoubleRange* other);
  friend void swap(DoubleRange& a, DoubleRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleRange* New() const final {
    return CreateMaybeMessage<DoubleRange>(nullptr);
  }

  DoubleRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DoubleRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DoubleRange& from);
  void MergeFrom(const DoubleRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  double min() const;
  void set_min(double value);

  // double max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.DoubleRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double min_;
  double max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class ExposureRoi_Center :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.ExposureRoi.Center) */ {
 public:
  ExposureRoi_Center();
  virtual ~ExposureRoi_Center();

  ExposureRoi_Center(const ExposureRoi_Center& from);

  inline ExposureRoi_Center& operator=(const ExposureRoi_Center& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExposureRoi_Center(ExposureRoi_Center&& from) noexcept
    : ExposureRoi_Center() {
    *this = ::std::move(from);
  }

  inline ExposureRoi_Center& operator=(ExposureRoi_Center&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExposureRoi_Center& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExposureRoi_Center* internal_default_instance() {
    return reinterpret_cast<const ExposureRoi_Center*>(
               &_ExposureRoi_Center_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ExposureRoi_Center* other);
  friend void swap(ExposureRoi_Center& a, ExposureRoi_Center& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExposureRoi_Center* New() const final {
    return CreateMaybeMessage<ExposureRoi_Center>(nullptr);
  }

  ExposureRoi_Center* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExposureRoi_Center>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExposureRoi_Center& from);
  void MergeFrom(const ExposureRoi_Center& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExposureRoi_Center* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.ExposureRoi.Center)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class ExposureRoi :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.ExposureRoi) */ {
 public:
  ExposureRoi();
  virtual ~ExposureRoi();

  ExposureRoi(const ExposureRoi& from);

  inline ExposureRoi& operator=(const ExposureRoi& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExposureRoi(ExposureRoi&& from) noexcept
    : ExposureRoi() {
    *this = ::std::move(from);
  }

  inline ExposureRoi& operator=(ExposureRoi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExposureRoi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExposureRoi* internal_default_instance() {
    return reinterpret_cast<const ExposureRoi*>(
               &_ExposureRoi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ExposureRoi* other);
  friend void swap(ExposureRoi& a, ExposureRoi& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExposureRoi* New() const final {
    return CreateMaybeMessage<ExposureRoi>(nullptr);
  }

  ExposureRoi* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExposureRoi>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExposureRoi& from);
  void MergeFrom(const ExposureRoi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExposureRoi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExposureRoi_Center Center;

  // accessors -------------------------------------------------------

  // .arsdk.camera.ExposureRoi.Center center = 1;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 1;
  const ::arsdk::camera::ExposureRoi_Center& center() const;
  ::arsdk::camera::ExposureRoi_Center* release_center();
  ::arsdk::camera::ExposureRoi_Center* mutable_center();
  void set_allocated_center(::arsdk::camera::ExposureRoi_Center* center);

  // double width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  double width() const;
  void set_width(double value);

  // double height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:arsdk.camera.ExposureRoi)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::camera::ExposureRoi_Center* center_;
  double width_;
  double height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// -------------------------------------------------------------------

class MediaMetadata_SelectedFieldsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MediaMetadata_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<MediaMetadata_SelectedFieldsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::Empty,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MediaMetadata_SelectedFieldsEntry_DoNotUse();
  MediaMetadata_SelectedFieldsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MediaMetadata_SelectedFieldsEntry_DoNotUse& other);
  static const MediaMetadata_SelectedFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MediaMetadata_SelectedFieldsEntry_DoNotUse*>(&_MediaMetadata_SelectedFieldsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MediaMetadata :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.camera.MediaMetadata) */ {
 public:
  MediaMetadata();
  virtual ~MediaMetadata();

  MediaMetadata(const MediaMetadata& from);

  inline MediaMetadata& operator=(const MediaMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaMetadata(MediaMetadata&& from) noexcept
    : MediaMetadata() {
    *this = ::std::move(from);
  }

  inline MediaMetadata& operator=(MediaMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MediaMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaMetadata* internal_default_instance() {
    return reinterpret_cast<const MediaMetadata*>(
               &_MediaMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(MediaMetadata* other);
  friend void swap(MediaMetadata& a, MediaMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaMetadata* New() const final {
    return CreateMaybeMessage<MediaMetadata>(nullptr);
  }

  MediaMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaMetadata& from);
  void MergeFrom(const MediaMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .google.protobuf.Empty> selected_fields = 1;
  int selected_fields_size() const;
  void clear_selected_fields();
  static const int kSelectedFieldsFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
      selected_fields() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
      mutable_selected_fields();

  // string copyright = 2;
  void clear_copyright();
  static const int kCopyrightFieldNumber = 2;
  const ::std::string& copyright() const;
  void set_copyright(const ::std::string& value);
  #if LANG_CXX11
  void set_copyright(::std::string&& value);
  #endif
  void set_copyright(const char* value);
  void set_copyright(const char* value, size_t size);
  ::std::string* mutable_copyright();
  ::std::string* release_copyright();
  void set_allocated_copyright(::std::string* copyright);

  // string custom_id = 3;
  void clear_custom_id();
  static const int kCustomIdFieldNumber = 3;
  const ::std::string& custom_id() const;
  void set_custom_id(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_id(::std::string&& value);
  #endif
  void set_custom_id(const char* value);
  void set_custom_id(const char* value, size_t size);
  ::std::string* mutable_custom_id();
  ::std::string* release_custom_id();
  void set_allocated_custom_id(::std::string* custom_id);

  // string custom_title = 4;
  void clear_custom_title();
  static const int kCustomTitleFieldNumber = 4;
  const ::std::string& custom_title() const;
  void set_custom_title(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_title(::std::string&& value);
  #endif
  void set_custom_title(const char* value);
  void set_custom_title(const char* value, size_t size);
  ::std::string* mutable_custom_title();
  ::std::string* release_custom_title();
  void set_allocated_custom_title(::std::string* custom_title);

  // @@protoc_insertion_point(class_scope:arsdk.camera.MediaMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MediaMetadata_SelectedFieldsEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::Empty,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > selected_fields_;
  ::google::protobuf::internal::ArenaStringPtr copyright_;
  ::google::protobuf::internal::ArenaStringPtr custom_id_;
  ::google::protobuf::internal::ArenaStringPtr custom_title_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcamera2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_ListCameras

// repeated .arsdk.camera.CameraModel model_filter = 1 [(.field_doc) = ""];
inline int Command_ListCameras::model_filter_size() const {
  return model_filter_.size();
}
inline void Command_ListCameras::clear_model_filter() {
  model_filter_.Clear();
}
inline ::arsdk::camera::CameraModel Command_ListCameras::model_filter(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.ListCameras.model_filter)
  return static_cast< ::arsdk::camera::CameraModel >(model_filter_.Get(index));
}
inline void Command_ListCameras::set_model_filter(int index, ::arsdk::camera::CameraModel value) {
  model_filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.ListCameras.model_filter)
}
inline void Command_ListCameras::add_model_filter(::arsdk::camera::CameraModel value) {
  model_filter_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Command.ListCameras.model_filter)
}
inline const ::google::protobuf::RepeatedField<int>&
Command_ListCameras::model_filter() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Command.ListCameras.model_filter)
  return model_filter_;
}
inline ::google::protobuf::RepeatedField<int>*
Command_ListCameras::mutable_model_filter() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Command.ListCameras.model_filter)
  return &model_filter_;
}

// -------------------------------------------------------------------

// Command_GetState

// uint64 camera_id = 1;
inline void Command_GetState::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_GetState::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.GetState.camera_id)
  return camera_id_;
}
inline void Command_GetState::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.GetState.camera_id)
}

// bool include_default_capabilities = 2;
inline void Command_GetState::clear_include_default_capabilities() {
  include_default_capabilities_ = false;
}
inline bool Command_GetState::include_default_capabilities() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.GetState.include_default_capabilities)
  return include_default_capabilities_;
}
inline void Command_GetState::set_include_default_capabilities(bool value) {
  
  include_default_capabilities_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.GetState.include_default_capabilities)
}

// -------------------------------------------------------------------

// Command_Configure

// uint64 camera_id = 1;
inline void Command_Configure::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_Configure::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.Configure.camera_id)
  return camera_id_;
}
inline void Command_Configure::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.Configure.camera_id)
}

// .arsdk.camera.Config config = 2;
inline bool Command_Configure::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline void Command_Configure::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::arsdk::camera::Config& Command_Configure::config() const {
  const ::arsdk::camera::Config* p = config_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.Configure.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Config*>(
      &::arsdk::camera::_Config_default_instance_);
}
inline ::arsdk::camera::Config* Command_Configure::release_config() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.Configure.config)
  
  ::arsdk::camera::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Config* Command_Configure::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.Configure.config)
  return config_;
}
inline void Command_Configure::set_allocated_config(::arsdk::camera::Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Command.Configure.config)
}

// -------------------------------------------------------------------

// Command_SetZoomTarget

// uint64 camera_id = 1;
inline void Command_SetZoomTarget::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_SetZoomTarget::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.SetZoomTarget.camera_id)
  return camera_id_;
}
inline void Command_SetZoomTarget::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.SetZoomTarget.camera_id)
}

// .arsdk.camera.ZoomControlMode control_mode = 2;
inline void Command_SetZoomTarget::clear_control_mode() {
  control_mode_ = 0;
}
inline ::arsdk::camera::ZoomControlMode Command_SetZoomTarget::control_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.SetZoomTarget.control_mode)
  return static_cast< ::arsdk::camera::ZoomControlMode >(control_mode_);
}
inline void Command_SetZoomTarget::set_control_mode(::arsdk::camera::ZoomControlMode value) {
  
  control_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.SetZoomTarget.control_mode)
}

// double target = 3;
inline void Command_SetZoomTarget::clear_target() {
  target_ = 0;
}
inline double Command_SetZoomTarget::target() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.SetZoomTarget.target)
  return target_;
}
inline void Command_SetZoomTarget::set_target(double value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.SetZoomTarget.target)
}

// -------------------------------------------------------------------

// Command_ResetZoom

// uint64 camera_id = 1;
inline void Command_ResetZoom::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_ResetZoom::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.ResetZoom.camera_id)
  return camera_id_;
}
inline void Command_ResetZoom::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.ResetZoom.camera_id)
}

// -------------------------------------------------------------------

// Command_StartPhoto

// uint64 camera_id = 1;
inline void Command_StartPhoto::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_StartPhoto::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.StartPhoto.camera_id)
  return camera_id_;
}
inline void Command_StartPhoto::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.StartPhoto.camera_id)
}

// -------------------------------------------------------------------

// Command_StopPhoto

// uint64 camera_id = 1;
inline void Command_StopPhoto::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_StopPhoto::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.StopPhoto.camera_id)
  return camera_id_;
}
inline void Command_StopPhoto::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.StopPhoto.camera_id)
}

// -------------------------------------------------------------------

// Command_StartRecording

// uint64 camera_id = 1;
inline void Command_StartRecording::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_StartRecording::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.StartRecording.camera_id)
  return camera_id_;
}
inline void Command_StartRecording::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.StartRecording.camera_id)
}

// -------------------------------------------------------------------

// Command_StopRecording

// uint64 camera_id = 1;
inline void Command_StopRecording::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_StopRecording::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.StopRecording.camera_id)
  return camera_id_;
}
inline void Command_StopRecording::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.StopRecording.camera_id)
}

// -------------------------------------------------------------------

// Command_LockExposure

// uint64 camera_id = 1;
inline void Command_LockExposure::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_LockExposure::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.LockExposure.camera_id)
  return camera_id_;
}
inline void Command_LockExposure::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.LockExposure.camera_id)
}

// .arsdk.camera.ExposureLockMode mode = 2;
inline void Command_LockExposure::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::camera::ExposureLockMode Command_LockExposure::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.LockExposure.mode)
  return static_cast< ::arsdk::camera::ExposureLockMode >(mode_);
}
inline void Command_LockExposure::set_mode(::arsdk::camera::ExposureLockMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.LockExposure.mode)
}

// .arsdk.camera.ExposureRoi.Center roi = 3;
inline bool Command_LockExposure::has_roi() const {
  return this != internal_default_instance() && roi_ != nullptr;
}
inline void Command_LockExposure::clear_roi() {
  if (GetArenaNoVirtual() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
}
inline const ::arsdk::camera::ExposureRoi_Center& Command_LockExposure::roi() const {
  const ::arsdk::camera::ExposureRoi_Center* p = roi_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.LockExposure.roi)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::ExposureRoi_Center*>(
      &::arsdk::camera::_ExposureRoi_Center_default_instance_);
}
inline ::arsdk::camera::ExposureRoi_Center* Command_LockExposure::release_roi() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.LockExposure.roi)
  
  ::arsdk::camera::ExposureRoi_Center* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::arsdk::camera::ExposureRoi_Center* Command_LockExposure::mutable_roi() {
  
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::ExposureRoi_Center>(GetArenaNoVirtual());
    roi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.LockExposure.roi)
  return roi_;
}
inline void Command_LockExposure::set_allocated_roi(::arsdk::camera::ExposureRoi_Center* roi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roi_;
  }
  if (roi) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Command.LockExposure.roi)
}

// -------------------------------------------------------------------

// Command_LockWhiteBalance

// uint64 camera_id = 1;
inline void Command_LockWhiteBalance::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_LockWhiteBalance::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.LockWhiteBalance.camera_id)
  return camera_id_;
}
inline void Command_LockWhiteBalance::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.LockWhiteBalance.camera_id)
}

// .arsdk.camera.WhiteBalanceLockMode mode = 2;
inline void Command_LockWhiteBalance::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::camera::WhiteBalanceLockMode Command_LockWhiteBalance::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.LockWhiteBalance.mode)
  return static_cast< ::arsdk::camera::WhiteBalanceLockMode >(mode_);
}
inline void Command_LockWhiteBalance::set_mode(::arsdk::camera::WhiteBalanceLockMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.LockWhiteBalance.mode)
}

// -------------------------------------------------------------------

// Command_SetMediaMetadata

// uint64 camera_id = 1;
inline void Command_SetMediaMetadata::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command_SetMediaMetadata::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.SetMediaMetadata.camera_id)
  return camera_id_;
}
inline void Command_SetMediaMetadata::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Command.SetMediaMetadata.camera_id)
}

// .arsdk.camera.MediaMetadata metadata = 2;
inline bool Command_SetMediaMetadata::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void Command_SetMediaMetadata::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::arsdk::camera::MediaMetadata& Command_SetMediaMetadata::metadata() const {
  const ::arsdk::camera::MediaMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.SetMediaMetadata.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::MediaMetadata*>(
      &::arsdk::camera::_MediaMetadata_default_instance_);
}
inline ::arsdk::camera::MediaMetadata* Command_SetMediaMetadata::release_metadata() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.SetMediaMetadata.metadata)
  
  ::arsdk::camera::MediaMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::arsdk::camera::MediaMetadata* Command_SetMediaMetadata::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::MediaMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.SetMediaMetadata.metadata)
  return metadata_;
}
inline void Command_SetMediaMetadata::set_allocated_metadata(::arsdk::camera::MediaMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Command.SetMediaMetadata.metadata)
}

// -------------------------------------------------------------------

// Command

// .arsdk.camera.Command.SetZoomTarget set_zoom_target = 1;
inline bool Command::has_set_zoom_target() const {
  return id_case() == kSetZoomTarget;
}
inline void Command::set_has_set_zoom_target() {
  _oneof_case_[0] = kSetZoomTarget;
}
inline void Command::clear_set_zoom_target() {
  if (has_set_zoom_target()) {
    delete id_.set_zoom_target_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_SetZoomTarget* Command::release_set_zoom_target() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.set_zoom_target)
  if (has_set_zoom_target()) {
    clear_has_id();
      ::arsdk::camera::Command_SetZoomTarget* temp = id_.set_zoom_target_;
    id_.set_zoom_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_SetZoomTarget& Command::set_zoom_target() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.set_zoom_target)
  return has_set_zoom_target()
      ? *id_.set_zoom_target_
      : *reinterpret_cast< ::arsdk::camera::Command_SetZoomTarget*>(&::arsdk::camera::_Command_SetZoomTarget_default_instance_);
}
inline ::arsdk::camera::Command_SetZoomTarget* Command::mutable_set_zoom_target() {
  if (!has_set_zoom_target()) {
    clear_id();
    set_has_set_zoom_target();
    id_.set_zoom_target_ = CreateMaybeMessage< ::arsdk::camera::Command_SetZoomTarget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.set_zoom_target)
  return id_.set_zoom_target_;
}

// .arsdk.camera.Command.ListCameras list_cameras = 16;
inline bool Command::has_list_cameras() const {
  return id_case() == kListCameras;
}
inline void Command::set_has_list_cameras() {
  _oneof_case_[0] = kListCameras;
}
inline void Command::clear_list_cameras() {
  if (has_list_cameras()) {
    delete id_.list_cameras_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_ListCameras* Command::release_list_cameras() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.list_cameras)
  if (has_list_cameras()) {
    clear_has_id();
      ::arsdk::camera::Command_ListCameras* temp = id_.list_cameras_;
    id_.list_cameras_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_ListCameras& Command::list_cameras() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.list_cameras)
  return has_list_cameras()
      ? *id_.list_cameras_
      : *reinterpret_cast< ::arsdk::camera::Command_ListCameras*>(&::arsdk::camera::_Command_ListCameras_default_instance_);
}
inline ::arsdk::camera::Command_ListCameras* Command::mutable_list_cameras() {
  if (!has_list_cameras()) {
    clear_id();
    set_has_list_cameras();
    id_.list_cameras_ = CreateMaybeMessage< ::arsdk::camera::Command_ListCameras >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.list_cameras)
  return id_.list_cameras_;
}

// .arsdk.camera.Command.GetState get_state = 17;
inline bool Command::has_get_state() const {
  return id_case() == kGetState;
}
inline void Command::set_has_get_state() {
  _oneof_case_[0] = kGetState;
}
inline void Command::clear_get_state() {
  if (has_get_state()) {
    delete id_.get_state_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_GetState* Command::release_get_state() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.get_state)
  if (has_get_state()) {
    clear_has_id();
      ::arsdk::camera::Command_GetState* temp = id_.get_state_;
    id_.get_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_GetState& Command::get_state() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.get_state)
  return has_get_state()
      ? *id_.get_state_
      : *reinterpret_cast< ::arsdk::camera::Command_GetState*>(&::arsdk::camera::_Command_GetState_default_instance_);
}
inline ::arsdk::camera::Command_GetState* Command::mutable_get_state() {
  if (!has_get_state()) {
    clear_id();
    set_has_get_state();
    id_.get_state_ = CreateMaybeMessage< ::arsdk::camera::Command_GetState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.get_state)
  return id_.get_state_;
}

// .arsdk.camera.Command.Configure configure = 18;
inline bool Command::has_configure() const {
  return id_case() == kConfigure;
}
inline void Command::set_has_configure() {
  _oneof_case_[0] = kConfigure;
}
inline void Command::clear_configure() {
  if (has_configure()) {
    delete id_.configure_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_Configure* Command::release_configure() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.configure)
  if (has_configure()) {
    clear_has_id();
      ::arsdk::camera::Command_Configure* temp = id_.configure_;
    id_.configure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_Configure& Command::configure() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.configure)
  return has_configure()
      ? *id_.configure_
      : *reinterpret_cast< ::arsdk::camera::Command_Configure*>(&::arsdk::camera::_Command_Configure_default_instance_);
}
inline ::arsdk::camera::Command_Configure* Command::mutable_configure() {
  if (!has_configure()) {
    clear_id();
    set_has_configure();
    id_.configure_ = CreateMaybeMessage< ::arsdk::camera::Command_Configure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.configure)
  return id_.configure_;
}

// .arsdk.camera.Command.StartPhoto start_photo = 19;
inline bool Command::has_start_photo() const {
  return id_case() == kStartPhoto;
}
inline void Command::set_has_start_photo() {
  _oneof_case_[0] = kStartPhoto;
}
inline void Command::clear_start_photo() {
  if (has_start_photo()) {
    delete id_.start_photo_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_StartPhoto* Command::release_start_photo() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.start_photo)
  if (has_start_photo()) {
    clear_has_id();
      ::arsdk::camera::Command_StartPhoto* temp = id_.start_photo_;
    id_.start_photo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_StartPhoto& Command::start_photo() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.start_photo)
  return has_start_photo()
      ? *id_.start_photo_
      : *reinterpret_cast< ::arsdk::camera::Command_StartPhoto*>(&::arsdk::camera::_Command_StartPhoto_default_instance_);
}
inline ::arsdk::camera::Command_StartPhoto* Command::mutable_start_photo() {
  if (!has_start_photo()) {
    clear_id();
    set_has_start_photo();
    id_.start_photo_ = CreateMaybeMessage< ::arsdk::camera::Command_StartPhoto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.start_photo)
  return id_.start_photo_;
}

// .arsdk.camera.Command.StopPhoto stop_photo = 20;
inline bool Command::has_stop_photo() const {
  return id_case() == kStopPhoto;
}
inline void Command::set_has_stop_photo() {
  _oneof_case_[0] = kStopPhoto;
}
inline void Command::clear_stop_photo() {
  if (has_stop_photo()) {
    delete id_.stop_photo_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_StopPhoto* Command::release_stop_photo() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.stop_photo)
  if (has_stop_photo()) {
    clear_has_id();
      ::arsdk::camera::Command_StopPhoto* temp = id_.stop_photo_;
    id_.stop_photo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_StopPhoto& Command::stop_photo() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.stop_photo)
  return has_stop_photo()
      ? *id_.stop_photo_
      : *reinterpret_cast< ::arsdk::camera::Command_StopPhoto*>(&::arsdk::camera::_Command_StopPhoto_default_instance_);
}
inline ::arsdk::camera::Command_StopPhoto* Command::mutable_stop_photo() {
  if (!has_stop_photo()) {
    clear_id();
    set_has_stop_photo();
    id_.stop_photo_ = CreateMaybeMessage< ::arsdk::camera::Command_StopPhoto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.stop_photo)
  return id_.stop_photo_;
}

// .arsdk.camera.Command.StartRecording start_recording = 21;
inline bool Command::has_start_recording() const {
  return id_case() == kStartRecording;
}
inline void Command::set_has_start_recording() {
  _oneof_case_[0] = kStartRecording;
}
inline void Command::clear_start_recording() {
  if (has_start_recording()) {
    delete id_.start_recording_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_StartRecording* Command::release_start_recording() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.start_recording)
  if (has_start_recording()) {
    clear_has_id();
      ::arsdk::camera::Command_StartRecording* temp = id_.start_recording_;
    id_.start_recording_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_StartRecording& Command::start_recording() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.start_recording)
  return has_start_recording()
      ? *id_.start_recording_
      : *reinterpret_cast< ::arsdk::camera::Command_StartRecording*>(&::arsdk::camera::_Command_StartRecording_default_instance_);
}
inline ::arsdk::camera::Command_StartRecording* Command::mutable_start_recording() {
  if (!has_start_recording()) {
    clear_id();
    set_has_start_recording();
    id_.start_recording_ = CreateMaybeMessage< ::arsdk::camera::Command_StartRecording >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.start_recording)
  return id_.start_recording_;
}

// .arsdk.camera.Command.StopRecording stop_recording = 22;
inline bool Command::has_stop_recording() const {
  return id_case() == kStopRecording;
}
inline void Command::set_has_stop_recording() {
  _oneof_case_[0] = kStopRecording;
}
inline void Command::clear_stop_recording() {
  if (has_stop_recording()) {
    delete id_.stop_recording_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_StopRecording* Command::release_stop_recording() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.stop_recording)
  if (has_stop_recording()) {
    clear_has_id();
      ::arsdk::camera::Command_StopRecording* temp = id_.stop_recording_;
    id_.stop_recording_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_StopRecording& Command::stop_recording() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.stop_recording)
  return has_stop_recording()
      ? *id_.stop_recording_
      : *reinterpret_cast< ::arsdk::camera::Command_StopRecording*>(&::arsdk::camera::_Command_StopRecording_default_instance_);
}
inline ::arsdk::camera::Command_StopRecording* Command::mutable_stop_recording() {
  if (!has_stop_recording()) {
    clear_id();
    set_has_stop_recording();
    id_.stop_recording_ = CreateMaybeMessage< ::arsdk::camera::Command_StopRecording >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.stop_recording)
  return id_.stop_recording_;
}

// .arsdk.camera.Command.LockExposure lock_exposure = 23;
inline bool Command::has_lock_exposure() const {
  return id_case() == kLockExposure;
}
inline void Command::set_has_lock_exposure() {
  _oneof_case_[0] = kLockExposure;
}
inline void Command::clear_lock_exposure() {
  if (has_lock_exposure()) {
    delete id_.lock_exposure_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_LockExposure* Command::release_lock_exposure() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.lock_exposure)
  if (has_lock_exposure()) {
    clear_has_id();
      ::arsdk::camera::Command_LockExposure* temp = id_.lock_exposure_;
    id_.lock_exposure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_LockExposure& Command::lock_exposure() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.lock_exposure)
  return has_lock_exposure()
      ? *id_.lock_exposure_
      : *reinterpret_cast< ::arsdk::camera::Command_LockExposure*>(&::arsdk::camera::_Command_LockExposure_default_instance_);
}
inline ::arsdk::camera::Command_LockExposure* Command::mutable_lock_exposure() {
  if (!has_lock_exposure()) {
    clear_id();
    set_has_lock_exposure();
    id_.lock_exposure_ = CreateMaybeMessage< ::arsdk::camera::Command_LockExposure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.lock_exposure)
  return id_.lock_exposure_;
}

// .arsdk.camera.Command.LockWhiteBalance lock_white_balance = 24;
inline bool Command::has_lock_white_balance() const {
  return id_case() == kLockWhiteBalance;
}
inline void Command::set_has_lock_white_balance() {
  _oneof_case_[0] = kLockWhiteBalance;
}
inline void Command::clear_lock_white_balance() {
  if (has_lock_white_balance()) {
    delete id_.lock_white_balance_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_LockWhiteBalance* Command::release_lock_white_balance() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.lock_white_balance)
  if (has_lock_white_balance()) {
    clear_has_id();
      ::arsdk::camera::Command_LockWhiteBalance* temp = id_.lock_white_balance_;
    id_.lock_white_balance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_LockWhiteBalance& Command::lock_white_balance() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.lock_white_balance)
  return has_lock_white_balance()
      ? *id_.lock_white_balance_
      : *reinterpret_cast< ::arsdk::camera::Command_LockWhiteBalance*>(&::arsdk::camera::_Command_LockWhiteBalance_default_instance_);
}
inline ::arsdk::camera::Command_LockWhiteBalance* Command::mutable_lock_white_balance() {
  if (!has_lock_white_balance()) {
    clear_id();
    set_has_lock_white_balance();
    id_.lock_white_balance_ = CreateMaybeMessage< ::arsdk::camera::Command_LockWhiteBalance >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.lock_white_balance)
  return id_.lock_white_balance_;
}

// .arsdk.camera.Command.SetMediaMetadata set_media_metadata = 25;
inline bool Command::has_set_media_metadata() const {
  return id_case() == kSetMediaMetadata;
}
inline void Command::set_has_set_media_metadata() {
  _oneof_case_[0] = kSetMediaMetadata;
}
inline void Command::clear_set_media_metadata() {
  if (has_set_media_metadata()) {
    delete id_.set_media_metadata_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_SetMediaMetadata* Command::release_set_media_metadata() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.set_media_metadata)
  if (has_set_media_metadata()) {
    clear_has_id();
      ::arsdk::camera::Command_SetMediaMetadata* temp = id_.set_media_metadata_;
    id_.set_media_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_SetMediaMetadata& Command::set_media_metadata() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.set_media_metadata)
  return has_set_media_metadata()
      ? *id_.set_media_metadata_
      : *reinterpret_cast< ::arsdk::camera::Command_SetMediaMetadata*>(&::arsdk::camera::_Command_SetMediaMetadata_default_instance_);
}
inline ::arsdk::camera::Command_SetMediaMetadata* Command::mutable_set_media_metadata() {
  if (!has_set_media_metadata()) {
    clear_id();
    set_has_set_media_metadata();
    id_.set_media_metadata_ = CreateMaybeMessage< ::arsdk::camera::Command_SetMediaMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.set_media_metadata)
  return id_.set_media_metadata_;
}

// .arsdk.camera.Command.ResetZoom reset_zoom = 26;
inline bool Command::has_reset_zoom() const {
  return id_case() == kResetZoom;
}
inline void Command::set_has_reset_zoom() {
  _oneof_case_[0] = kResetZoom;
}
inline void Command::clear_reset_zoom() {
  if (has_reset_zoom()) {
    delete id_.reset_zoom_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Command_ResetZoom* Command::release_reset_zoom() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Command.reset_zoom)
  if (has_reset_zoom()) {
    clear_has_id();
      ::arsdk::camera::Command_ResetZoom* temp = id_.reset_zoom_;
    id_.reset_zoom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Command_ResetZoom& Command::reset_zoom() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Command.reset_zoom)
  return has_reset_zoom()
      ? *id_.reset_zoom_
      : *reinterpret_cast< ::arsdk::camera::Command_ResetZoom*>(&::arsdk::camera::_Command_ResetZoom_default_instance_);
}
inline ::arsdk::camera::Command_ResetZoom* Command::mutable_reset_zoom() {
  if (!has_reset_zoom()) {
    clear_id();
    set_has_reset_zoom();
    id_.reset_zoom_ = CreateMaybeMessage< ::arsdk::camera::Command_ResetZoom >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Command.reset_zoom)
  return id_.reset_zoom_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event_CameraList

// map<uint64, .arsdk.camera.CameraModel> cameras = 1;
inline int Event_CameraList::cameras_size() const {
  return cameras_.size();
}
inline void Event_CameraList::clear_cameras() {
  cameras_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, ::arsdk::camera::CameraModel >&
Event_CameraList::cameras() const {
  // @@protoc_insertion_point(field_map:arsdk.camera.Event.CameraList.cameras)
  return cameras_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, ::arsdk::camera::CameraModel >*
Event_CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_map:arsdk.camera.Event.CameraList.cameras)
  return cameras_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event_State_Photo

// .arsdk.camera.PhotoState state = 1;
inline void Event_State_Photo::clear_state() {
  state_ = 0;
}
inline ::arsdk::camera::PhotoState Event_State_Photo::state() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Photo.state)
  return static_cast< ::arsdk::camera::PhotoState >(state_);
}
inline void Event_State_Photo::set_state(::arsdk::camera::PhotoState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Photo.state)
}

// uint64 start_timestamp = 2;
inline void Event_State_Photo::clear_start_timestamp() {
  start_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_State_Photo::start_timestamp() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Photo.start_timestamp)
  return start_timestamp_;
}
inline void Event_State_Photo::set_start_timestamp(::google::protobuf::uint64 value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Photo.start_timestamp)
}

// uint32 photo_count = 3;
inline void Event_State_Photo::clear_photo_count() {
  photo_count_ = 0u;
}
inline ::google::protobuf::uint32 Event_State_Photo::photo_count() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Photo.photo_count)
  return photo_count_;
}
inline void Event_State_Photo::set_photo_count(::google::protobuf::uint32 value) {
  
  photo_count_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Photo.photo_count)
}

// .arsdk.camera.StorageType storage = 4;
inline void Event_State_Photo::clear_storage() {
  storage_ = 0;
}
inline ::arsdk::camera::StorageType Event_State_Photo::storage() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Photo.storage)
  return static_cast< ::arsdk::camera::StorageType >(storage_);
}
inline void Event_State_Photo::set_storage(::arsdk::camera::StorageType value) {
  
  storage_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Photo.storage)
}

// -------------------------------------------------------------------

// Event_State_Recording

// .arsdk.camera.RecordingState state = 1;
inline void Event_State_Recording::clear_state() {
  state_ = 0;
}
inline ::arsdk::camera::RecordingState Event_State_Recording::state() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Recording.state)
  return static_cast< ::arsdk::camera::RecordingState >(state_);
}
inline void Event_State_Recording::set_state(::arsdk::camera::RecordingState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Recording.state)
}

// uint64 start_timestamp = 2;
inline void Event_State_Recording::clear_start_timestamp() {
  start_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_State_Recording::start_timestamp() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Recording.start_timestamp)
  return start_timestamp_;
}
inline void Event_State_Recording::set_start_timestamp(::google::protobuf::uint64 value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Recording.start_timestamp)
}

// uint32 video_bitrate = 3;
inline void Event_State_Recording::clear_video_bitrate() {
  video_bitrate_ = 0u;
}
inline ::google::protobuf::uint32 Event_State_Recording::video_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Recording.video_bitrate)
  return video_bitrate_;
}
inline void Event_State_Recording::set_video_bitrate(::google::protobuf::uint32 value) {
  
  video_bitrate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Recording.video_bitrate)
}

// .arsdk.camera.StorageType storage = 4;
inline void Event_State_Recording::clear_storage() {
  storage_ = 0;
}
inline ::arsdk::camera::StorageType Event_State_Recording::storage() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Recording.storage)
  return static_cast< ::arsdk::camera::StorageType >(storage_);
}
inline void Event_State_Recording::set_storage(::arsdk::camera::StorageType value) {
  
  storage_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Recording.storage)
}

// -------------------------------------------------------------------

// Event_State_WhiteBalanceLock

// repeated .arsdk.camera.WhiteBalanceLockMode supported_modes = 1;
inline int Event_State_WhiteBalanceLock::supported_modes_size() const {
  return supported_modes_.size();
}
inline void Event_State_WhiteBalanceLock::clear_supported_modes() {
  supported_modes_.Clear();
}
inline ::arsdk::camera::WhiteBalanceLockMode Event_State_WhiteBalanceLock::supported_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.WhiteBalanceLock.supported_modes)
  return static_cast< ::arsdk::camera::WhiteBalanceLockMode >(supported_modes_.Get(index));
}
inline void Event_State_WhiteBalanceLock::set_supported_modes(int index, ::arsdk::camera::WhiteBalanceLockMode value) {
  supported_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.WhiteBalanceLock.supported_modes)
}
inline void Event_State_WhiteBalanceLock::add_supported_modes(::arsdk::camera::WhiteBalanceLockMode value) {
  supported_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Event.State.WhiteBalanceLock.supported_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Event_State_WhiteBalanceLock::supported_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Event.State.WhiteBalanceLock.supported_modes)
  return supported_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Event_State_WhiteBalanceLock::mutable_supported_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Event.State.WhiteBalanceLock.supported_modes)
  return &supported_modes_;
}

// .arsdk.camera.WhiteBalanceLockMode mode = 2;
inline void Event_State_WhiteBalanceLock::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::camera::WhiteBalanceLockMode Event_State_WhiteBalanceLock::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.WhiteBalanceLock.mode)
  return static_cast< ::arsdk::camera::WhiteBalanceLockMode >(mode_);
}
inline void Event_State_WhiteBalanceLock::set_mode(::arsdk::camera::WhiteBalanceLockMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.WhiteBalanceLock.mode)
}

// -------------------------------------------------------------------

// Event_State_ExposureLock

// repeated .arsdk.camera.ExposureLockMode supported_modes = 1;
inline int Event_State_ExposureLock::supported_modes_size() const {
  return supported_modes_.size();
}
inline void Event_State_ExposureLock::clear_supported_modes() {
  supported_modes_.Clear();
}
inline ::arsdk::camera::ExposureLockMode Event_State_ExposureLock::supported_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.ExposureLock.supported_modes)
  return static_cast< ::arsdk::camera::ExposureLockMode >(supported_modes_.Get(index));
}
inline void Event_State_ExposureLock::set_supported_modes(int index, ::arsdk::camera::ExposureLockMode value) {
  supported_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.ExposureLock.supported_modes)
}
inline void Event_State_ExposureLock::add_supported_modes(::arsdk::camera::ExposureLockMode value) {
  supported_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Event.State.ExposureLock.supported_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Event_State_ExposureLock::supported_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Event.State.ExposureLock.supported_modes)
  return supported_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Event_State_ExposureLock::mutable_supported_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Event.State.ExposureLock.supported_modes)
  return &supported_modes_;
}

// .arsdk.camera.ExposureLockMode mode = 2;
inline void Event_State_ExposureLock::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::camera::ExposureLockMode Event_State_ExposureLock::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.ExposureLock.mode)
  return static_cast< ::arsdk::camera::ExposureLockMode >(mode_);
}
inline void Event_State_ExposureLock::set_mode(::arsdk::camera::ExposureLockMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.ExposureLock.mode)
}

// -------------------------------------------------------------------

// Event_State_Zoom

// double zoom_level_max = 1;
inline void Event_State_Zoom::clear_zoom_level_max() {
  zoom_level_max_ = 0;
}
inline double Event_State_Zoom::zoom_level_max() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Zoom.zoom_level_max)
  return zoom_level_max_;
}
inline void Event_State_Zoom::set_zoom_level_max(double value) {
  
  zoom_level_max_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Zoom.zoom_level_max)
}

// double zoom_high_quality_level_max = 2;
inline void Event_State_Zoom::clear_zoom_high_quality_level_max() {
  zoom_high_quality_level_max_ = 0;
}
inline double Event_State_Zoom::zoom_high_quality_level_max() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.Zoom.zoom_high_quality_level_max)
  return zoom_high_quality_level_max_;
}
inline void Event_State_Zoom::set_zoom_high_quality_level_max(double value) {
  
  zoom_high_quality_level_max_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.Zoom.zoom_high_quality_level_max)
}

// -------------------------------------------------------------------

// Event_State

// uint64 camera_id = 1;
inline void Event_State::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_State::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.camera_id)
  return camera_id_;
}
inline void Event_State::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.camera_id)
}

// map<uint32, .google.protobuf.Empty> selected_fields = 2;
inline int Event_State::selected_fields_size() const {
  return selected_fields_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
Event_State::selected_fields() const {
  // @@protoc_insertion_point(field_map:arsdk.camera.Event.State.selected_fields)
  return selected_fields_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
Event_State::mutable_selected_fields() {
  // @@protoc_insertion_point(field_mutable_map:arsdk.camera.Event.State.selected_fields)
  return selected_fields_.MutableMap();
}

// bool active = 3;
inline void Event_State::clear_active() {
  active_ = false;
}
inline bool Event_State::active() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.active)
  return active_;
}
inline void Event_State::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.State.active)
}

// .arsdk.camera.Capabilities default_capabilities = 4;
inline bool Event_State::has_default_capabilities() const {
  return this != internal_default_instance() && default_capabilities_ != nullptr;
}
inline void Event_State::clear_default_capabilities() {
  if (GetArenaNoVirtual() == nullptr && default_capabilities_ != nullptr) {
    delete default_capabilities_;
  }
  default_capabilities_ = nullptr;
}
inline const ::arsdk::camera::Capabilities& Event_State::default_capabilities() const {
  const ::arsdk::camera::Capabilities* p = default_capabilities_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.default_capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Capabilities*>(
      &::arsdk::camera::_Capabilities_default_instance_);
}
inline ::arsdk::camera::Capabilities* Event_State::release_default_capabilities() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.default_capabilities)
  
  ::arsdk::camera::Capabilities* temp = default_capabilities_;
  default_capabilities_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Capabilities* Event_State::mutable_default_capabilities() {
  
  if (default_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Capabilities>(GetArenaNoVirtual());
    default_capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.default_capabilities)
  return default_capabilities_;
}
inline void Event_State::set_allocated_default_capabilities(::arsdk::camera::Capabilities* default_capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_capabilities_;
  }
  if (default_capabilities) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  default_capabilities_ = default_capabilities;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.default_capabilities)
}

// .arsdk.camera.Capabilities current_capabilities = 5;
inline bool Event_State::has_current_capabilities() const {
  return this != internal_default_instance() && current_capabilities_ != nullptr;
}
inline void Event_State::clear_current_capabilities() {
  if (GetArenaNoVirtual() == nullptr && current_capabilities_ != nullptr) {
    delete current_capabilities_;
  }
  current_capabilities_ = nullptr;
}
inline const ::arsdk::camera::Capabilities& Event_State::current_capabilities() const {
  const ::arsdk::camera::Capabilities* p = current_capabilities_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.current_capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Capabilities*>(
      &::arsdk::camera::_Capabilities_default_instance_);
}
inline ::arsdk::camera::Capabilities* Event_State::release_current_capabilities() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.current_capabilities)
  
  ::arsdk::camera::Capabilities* temp = current_capabilities_;
  current_capabilities_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Capabilities* Event_State::mutable_current_capabilities() {
  
  if (current_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Capabilities>(GetArenaNoVirtual());
    current_capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.current_capabilities)
  return current_capabilities_;
}
inline void Event_State::set_allocated_current_capabilities(::arsdk::camera::Capabilities* current_capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_capabilities_;
  }
  if (current_capabilities) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  current_capabilities_ = current_capabilities;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.current_capabilities)
}

// .arsdk.camera.Config config = 6;
inline bool Event_State::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline void Event_State::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::arsdk::camera::Config& Event_State::config() const {
  const ::arsdk::camera::Config* p = config_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Config*>(
      &::arsdk::camera::_Config_default_instance_);
}
inline ::arsdk::camera::Config* Event_State::release_config() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.config)
  
  ::arsdk::camera::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Config* Event_State::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.config)
  return config_;
}
inline void Event_State::set_allocated_config(::arsdk::camera::Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.config)
}

// .arsdk.camera.Event.State.Photo photo = 7;
inline bool Event_State::has_photo() const {
  return this != internal_default_instance() && photo_ != nullptr;
}
inline void Event_State::clear_photo() {
  if (GetArenaNoVirtual() == nullptr && photo_ != nullptr) {
    delete photo_;
  }
  photo_ = nullptr;
}
inline const ::arsdk::camera::Event_State_Photo& Event_State::photo() const {
  const ::arsdk::camera::Event_State_Photo* p = photo_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.photo)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Event_State_Photo*>(
      &::arsdk::camera::_Event_State_Photo_default_instance_);
}
inline ::arsdk::camera::Event_State_Photo* Event_State::release_photo() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.photo)
  
  ::arsdk::camera::Event_State_Photo* temp = photo_;
  photo_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Event_State_Photo* Event_State::mutable_photo() {
  
  if (photo_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Event_State_Photo>(GetArenaNoVirtual());
    photo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.photo)
  return photo_;
}
inline void Event_State::set_allocated_photo(::arsdk::camera::Event_State_Photo* photo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete photo_;
  }
  if (photo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      photo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo, submessage_arena);
    }
    
  } else {
    
  }
  photo_ = photo;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.photo)
}

// .arsdk.camera.Event.State.Recording recording = 8;
inline bool Event_State::has_recording() const {
  return this != internal_default_instance() && recording_ != nullptr;
}
inline void Event_State::clear_recording() {
  if (GetArenaNoVirtual() == nullptr && recording_ != nullptr) {
    delete recording_;
  }
  recording_ = nullptr;
}
inline const ::arsdk::camera::Event_State_Recording& Event_State::recording() const {
  const ::arsdk::camera::Event_State_Recording* p = recording_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.recording)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Event_State_Recording*>(
      &::arsdk::camera::_Event_State_Recording_default_instance_);
}
inline ::arsdk::camera::Event_State_Recording* Event_State::release_recording() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.recording)
  
  ::arsdk::camera::Event_State_Recording* temp = recording_;
  recording_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Event_State_Recording* Event_State::mutable_recording() {
  
  if (recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Event_State_Recording>(GetArenaNoVirtual());
    recording_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.recording)
  return recording_;
}
inline void Event_State::set_allocated_recording(::arsdk::camera::Event_State_Recording* recording) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recording_;
  }
  if (recording) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recording = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recording, submessage_arena);
    }
    
  } else {
    
  }
  recording_ = recording;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.recording)
}

// .arsdk.camera.Event.State.WhiteBalanceLock white_balance_lock = 9;
inline bool Event_State::has_white_balance_lock() const {
  return this != internal_default_instance() && white_balance_lock_ != nullptr;
}
inline void Event_State::clear_white_balance_lock() {
  if (GetArenaNoVirtual() == nullptr && white_balance_lock_ != nullptr) {
    delete white_balance_lock_;
  }
  white_balance_lock_ = nullptr;
}
inline const ::arsdk::camera::Event_State_WhiteBalanceLock& Event_State::white_balance_lock() const {
  const ::arsdk::camera::Event_State_WhiteBalanceLock* p = white_balance_lock_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.white_balance_lock)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Event_State_WhiteBalanceLock*>(
      &::arsdk::camera::_Event_State_WhiteBalanceLock_default_instance_);
}
inline ::arsdk::camera::Event_State_WhiteBalanceLock* Event_State::release_white_balance_lock() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.white_balance_lock)
  
  ::arsdk::camera::Event_State_WhiteBalanceLock* temp = white_balance_lock_;
  white_balance_lock_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Event_State_WhiteBalanceLock* Event_State::mutable_white_balance_lock() {
  
  if (white_balance_lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Event_State_WhiteBalanceLock>(GetArenaNoVirtual());
    white_balance_lock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.white_balance_lock)
  return white_balance_lock_;
}
inline void Event_State::set_allocated_white_balance_lock(::arsdk::camera::Event_State_WhiteBalanceLock* white_balance_lock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete white_balance_lock_;
  }
  if (white_balance_lock) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      white_balance_lock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, white_balance_lock, submessage_arena);
    }
    
  } else {
    
  }
  white_balance_lock_ = white_balance_lock;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.white_balance_lock)
}

// .arsdk.camera.Event.State.ExposureLock exposure_lock = 10;
inline bool Event_State::has_exposure_lock() const {
  return this != internal_default_instance() && exposure_lock_ != nullptr;
}
inline void Event_State::clear_exposure_lock() {
  if (GetArenaNoVirtual() == nullptr && exposure_lock_ != nullptr) {
    delete exposure_lock_;
  }
  exposure_lock_ = nullptr;
}
inline const ::arsdk::camera::Event_State_ExposureLock& Event_State::exposure_lock() const {
  const ::arsdk::camera::Event_State_ExposureLock* p = exposure_lock_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.exposure_lock)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Event_State_ExposureLock*>(
      &::arsdk::camera::_Event_State_ExposureLock_default_instance_);
}
inline ::arsdk::camera::Event_State_ExposureLock* Event_State::release_exposure_lock() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.exposure_lock)
  
  ::arsdk::camera::Event_State_ExposureLock* temp = exposure_lock_;
  exposure_lock_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Event_State_ExposureLock* Event_State::mutable_exposure_lock() {
  
  if (exposure_lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Event_State_ExposureLock>(GetArenaNoVirtual());
    exposure_lock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.exposure_lock)
  return exposure_lock_;
}
inline void Event_State::set_allocated_exposure_lock(::arsdk::camera::Event_State_ExposureLock* exposure_lock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exposure_lock_;
  }
  if (exposure_lock) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exposure_lock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exposure_lock, submessage_arena);
    }
    
  } else {
    
  }
  exposure_lock_ = exposure_lock;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.exposure_lock)
}

// .arsdk.camera.Event.State.Zoom zoom = 11;
inline bool Event_State::has_zoom() const {
  return this != internal_default_instance() && zoom_ != nullptr;
}
inline void Event_State::clear_zoom() {
  if (GetArenaNoVirtual() == nullptr && zoom_ != nullptr) {
    delete zoom_;
  }
  zoom_ = nullptr;
}
inline const ::arsdk::camera::Event_State_Zoom& Event_State::zoom() const {
  const ::arsdk::camera::Event_State_Zoom* p = zoom_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.zoom)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::Event_State_Zoom*>(
      &::arsdk::camera::_Event_State_Zoom_default_instance_);
}
inline ::arsdk::camera::Event_State_Zoom* Event_State::release_zoom() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.zoom)
  
  ::arsdk::camera::Event_State_Zoom* temp = zoom_;
  zoom_ = nullptr;
  return temp;
}
inline ::arsdk::camera::Event_State_Zoom* Event_State::mutable_zoom() {
  
  if (zoom_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::Event_State_Zoom>(GetArenaNoVirtual());
    zoom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.zoom)
  return zoom_;
}
inline void Event_State::set_allocated_zoom(::arsdk::camera::Event_State_Zoom* zoom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zoom_;
  }
  if (zoom) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zoom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zoom, submessage_arena);
    }
    
  } else {
    
  }
  zoom_ = zoom;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.zoom)
}

// .arsdk.camera.MediaMetadata media_metadata = 12;
inline bool Event_State::has_media_metadata() const {
  return this != internal_default_instance() && media_metadata_ != nullptr;
}
inline void Event_State::clear_media_metadata() {
  if (GetArenaNoVirtual() == nullptr && media_metadata_ != nullptr) {
    delete media_metadata_;
  }
  media_metadata_ = nullptr;
}
inline const ::arsdk::camera::MediaMetadata& Event_State::media_metadata() const {
  const ::arsdk::camera::MediaMetadata* p = media_metadata_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.State.media_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::MediaMetadata*>(
      &::arsdk::camera::_MediaMetadata_default_instance_);
}
inline ::arsdk::camera::MediaMetadata* Event_State::release_media_metadata() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.State.media_metadata)
  
  ::arsdk::camera::MediaMetadata* temp = media_metadata_;
  media_metadata_ = nullptr;
  return temp;
}
inline ::arsdk::camera::MediaMetadata* Event_State::mutable_media_metadata() {
  
  if (media_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::MediaMetadata>(GetArenaNoVirtual());
    media_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.State.media_metadata)
  return media_metadata_;
}
inline void Event_State::set_allocated_media_metadata(::arsdk::camera::MediaMetadata* media_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete media_metadata_;
  }
  if (media_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      media_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_metadata, submessage_arena);
    }
    
  } else {
    
  }
  media_metadata_ = media_metadata;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.State.media_metadata)
}

// -------------------------------------------------------------------

// Event_Exposure

// uint64 camera_id = 1;
inline void Event_Exposure::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_Exposure::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Exposure.camera_id)
  return camera_id_;
}
inline void Event_Exposure::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Exposure.camera_id)
}

// .arsdk.camera.ShutterSpeed shutter_speed = 2;
inline void Event_Exposure::clear_shutter_speed() {
  shutter_speed_ = 0;
}
inline ::arsdk::camera::ShutterSpeed Event_Exposure::shutter_speed() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Exposure.shutter_speed)
  return static_cast< ::arsdk::camera::ShutterSpeed >(shutter_speed_);
}
inline void Event_Exposure::set_shutter_speed(::arsdk::camera::ShutterSpeed value) {
  
  shutter_speed_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Exposure.shutter_speed)
}

// .arsdk.camera.IsoSensitivity iso_sensitivity = 3;
inline void Event_Exposure::clear_iso_sensitivity() {
  iso_sensitivity_ = 0;
}
inline ::arsdk::camera::IsoSensitivity Event_Exposure::iso_sensitivity() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Exposure.iso_sensitivity)
  return static_cast< ::arsdk::camera::IsoSensitivity >(iso_sensitivity_);
}
inline void Event_Exposure::set_iso_sensitivity(::arsdk::camera::IsoSensitivity value) {
  
  iso_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Exposure.iso_sensitivity)
}

// .arsdk.camera.ExposureRoi exposure_lock_region = 4;
inline bool Event_Exposure::has_exposure_lock_region() const {
  return this != internal_default_instance() && exposure_lock_region_ != nullptr;
}
inline void Event_Exposure::clear_exposure_lock_region() {
  if (GetArenaNoVirtual() == nullptr && exposure_lock_region_ != nullptr) {
    delete exposure_lock_region_;
  }
  exposure_lock_region_ = nullptr;
}
inline const ::arsdk::camera::ExposureRoi& Event_Exposure::exposure_lock_region() const {
  const ::arsdk::camera::ExposureRoi* p = exposure_lock_region_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Exposure.exposure_lock_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::ExposureRoi*>(
      &::arsdk::camera::_ExposureRoi_default_instance_);
}
inline ::arsdk::camera::ExposureRoi* Event_Exposure::release_exposure_lock_region() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.Exposure.exposure_lock_region)
  
  ::arsdk::camera::ExposureRoi* temp = exposure_lock_region_;
  exposure_lock_region_ = nullptr;
  return temp;
}
inline ::arsdk::camera::ExposureRoi* Event_Exposure::mutable_exposure_lock_region() {
  
  if (exposure_lock_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::ExposureRoi>(GetArenaNoVirtual());
    exposure_lock_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.Exposure.exposure_lock_region)
  return exposure_lock_region_;
}
inline void Event_Exposure::set_allocated_exposure_lock_region(::arsdk::camera::ExposureRoi* exposure_lock_region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exposure_lock_region_;
  }
  if (exposure_lock_region) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exposure_lock_region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exposure_lock_region, submessage_arena);
    }
    
  } else {
    
  }
  exposure_lock_region_ = exposure_lock_region;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.Exposure.exposure_lock_region)
}

// -------------------------------------------------------------------

// Event_ZoomLevel

// uint64 camera_id = 1;
inline void Event_ZoomLevel::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_ZoomLevel::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.ZoomLevel.camera_id)
  return camera_id_;
}
inline void Event_ZoomLevel::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.ZoomLevel.camera_id)
}

// double level = 2;
inline void Event_ZoomLevel::clear_level() {
  level_ = 0;
}
inline double Event_ZoomLevel::level() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.ZoomLevel.level)
  return level_;
}
inline void Event_ZoomLevel::set_level(double value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.ZoomLevel.level)
}

// -------------------------------------------------------------------

// Event_NextPhotoInterval

// uint64 camera_id = 1;
inline void Event_NextPhotoInterval::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_NextPhotoInterval::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.NextPhotoInterval.camera_id)
  return camera_id_;
}
inline void Event_NextPhotoInterval::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.NextPhotoInterval.camera_id)
}

// .arsdk.camera.PhotoMode mode = 2;
inline void Event_NextPhotoInterval::clear_mode() {
  mode_ = 0;
}
inline ::arsdk::camera::PhotoMode Event_NextPhotoInterval::mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.NextPhotoInterval.mode)
  return static_cast< ::arsdk::camera::PhotoMode >(mode_);
}
inline void Event_NextPhotoInterval::set_mode(::arsdk::camera::PhotoMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.NextPhotoInterval.mode)
}

// double interval = 3;
inline void Event_NextPhotoInterval::clear_interval() {
  interval_ = 0;
}
inline double Event_NextPhotoInterval::interval() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.NextPhotoInterval.interval)
  return interval_;
}
inline void Event_NextPhotoInterval::set_interval(double value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.NextPhotoInterval.interval)
}

// -------------------------------------------------------------------

// Event_Photo

// uint64 camera_id = 1;
inline void Event_Photo::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_Photo::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Photo.camera_id)
  return camera_id_;
}
inline void Event_Photo::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Photo.camera_id)
}

// .arsdk.camera.PhotoEvent type = 2;
inline void Event_Photo::clear_type() {
  type_ = 0;
}
inline ::arsdk::camera::PhotoEvent Event_Photo::type() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Photo.type)
  return static_cast< ::arsdk::camera::PhotoEvent >(type_);
}
inline void Event_Photo::set_type(::arsdk::camera::PhotoEvent value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Photo.type)
}

// string media_id = 3;
inline void Event_Photo::clear_media_id() {
  media_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event_Photo::media_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Photo.media_id)
  return media_id_.GetNoArena();
}
inline void Event_Photo::set_media_id(const ::std::string& value) {
  
  media_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Photo.media_id)
}
#if LANG_CXX11
inline void Event_Photo::set_media_id(::std::string&& value) {
  
  media_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.camera.Event.Photo.media_id)
}
#endif
inline void Event_Photo::set_media_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.camera.Event.Photo.media_id)
}
inline void Event_Photo::set_media_id(const char* value, size_t size) {
  
  media_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.camera.Event.Photo.media_id)
}
inline ::std::string* Event_Photo::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.Photo.media_id)
  return media_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Photo::release_media_id() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.Photo.media_id)
  
  return media_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Photo::set_allocated_media_id(::std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  media_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id);
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.Photo.media_id)
}

// .arsdk.camera.PhotoStopReason stop_reason = 4;
inline void Event_Photo::clear_stop_reason() {
  stop_reason_ = 0;
}
inline ::arsdk::camera::PhotoStopReason Event_Photo::stop_reason() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Photo.stop_reason)
  return static_cast< ::arsdk::camera::PhotoStopReason >(stop_reason_);
}
inline void Event_Photo::set_stop_reason(::arsdk::camera::PhotoStopReason value) {
  
  stop_reason_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Photo.stop_reason)
}

// string resource_id = 5;
inline void Event_Photo::clear_resource_id() {
  resource_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event_Photo::resource_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Photo.resource_id)
  return resource_id_.GetNoArena();
}
inline void Event_Photo::set_resource_id(const ::std::string& value) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Photo.resource_id)
}
#if LANG_CXX11
inline void Event_Photo::set_resource_id(::std::string&& value) {
  
  resource_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.camera.Event.Photo.resource_id)
}
#endif
inline void Event_Photo::set_resource_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.camera.Event.Photo.resource_id)
}
inline void Event_Photo::set_resource_id(const char* value, size_t size) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.camera.Event.Photo.resource_id)
}
inline ::std::string* Event_Photo::mutable_resource_id() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.Photo.resource_id)
  return resource_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Photo::release_resource_id() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.Photo.resource_id)
  
  return resource_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Photo::set_allocated_resource_id(::std::string* resource_id) {
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_id);
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.Photo.resource_id)
}

// -------------------------------------------------------------------

// Event_Recording

// uint64 camera_id = 1;
inline void Event_Recording::clear_camera_id() {
  camera_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event_Recording::camera_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Recording.camera_id)
  return camera_id_;
}
inline void Event_Recording::set_camera_id(::google::protobuf::uint64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Recording.camera_id)
}

// .arsdk.camera.RecordingEvent type = 2;
inline void Event_Recording::clear_type() {
  type_ = 0;
}
inline ::arsdk::camera::RecordingEvent Event_Recording::type() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Recording.type)
  return static_cast< ::arsdk::camera::RecordingEvent >(type_);
}
inline void Event_Recording::set_type(::arsdk::camera::RecordingEvent value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Recording.type)
}

// string media_id = 3;
inline void Event_Recording::clear_media_id() {
  media_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event_Recording::media_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Recording.media_id)
  return media_id_.GetNoArena();
}
inline void Event_Recording::set_media_id(const ::std::string& value) {
  
  media_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Recording.media_id)
}
#if LANG_CXX11
inline void Event_Recording::set_media_id(::std::string&& value) {
  
  media_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.camera.Event.Recording.media_id)
}
#endif
inline void Event_Recording::set_media_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.camera.Event.Recording.media_id)
}
inline void Event_Recording::set_media_id(const char* value, size_t size) {
  
  media_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.camera.Event.Recording.media_id)
}
inline ::std::string* Event_Recording::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.Recording.media_id)
  return media_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Recording::release_media_id() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.Recording.media_id)
  
  return media_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Recording::set_allocated_media_id(::std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  media_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id);
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Event.Recording.media_id)
}

// .arsdk.camera.RecordingStopReason stop_reason = 4;
inline void Event_Recording::clear_stop_reason() {
  stop_reason_ = 0;
}
inline ::arsdk::camera::RecordingStopReason Event_Recording::stop_reason() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.Recording.stop_reason)
  return static_cast< ::arsdk::camera::RecordingStopReason >(stop_reason_);
}
inline void Event_Recording::set_stop_reason(::arsdk::camera::RecordingStopReason value) {
  
  stop_reason_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Event.Recording.stop_reason)
}

// -------------------------------------------------------------------

// Event

// .arsdk.camera.Event.Exposure camera_exposure = 1;
inline bool Event::has_camera_exposure() const {
  return id_case() == kCameraExposure;
}
inline void Event::set_has_camera_exposure() {
  _oneof_case_[0] = kCameraExposure;
}
inline void Event::clear_camera_exposure() {
  if (has_camera_exposure()) {
    delete id_.camera_exposure_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_Exposure* Event::release_camera_exposure() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.camera_exposure)
  if (has_camera_exposure()) {
    clear_has_id();
      ::arsdk::camera::Event_Exposure* temp = id_.camera_exposure_;
    id_.camera_exposure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_Exposure& Event::camera_exposure() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.camera_exposure)
  return has_camera_exposure()
      ? *id_.camera_exposure_
      : *reinterpret_cast< ::arsdk::camera::Event_Exposure*>(&::arsdk::camera::_Event_Exposure_default_instance_);
}
inline ::arsdk::camera::Event_Exposure* Event::mutable_camera_exposure() {
  if (!has_camera_exposure()) {
    clear_id();
    set_has_camera_exposure();
    id_.camera_exposure_ = CreateMaybeMessage< ::arsdk::camera::Event_Exposure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.camera_exposure)
  return id_.camera_exposure_;
}

// .arsdk.camera.Event.ZoomLevel zoom_level = 2;
inline bool Event::has_zoom_level() const {
  return id_case() == kZoomLevel;
}
inline void Event::set_has_zoom_level() {
  _oneof_case_[0] = kZoomLevel;
}
inline void Event::clear_zoom_level() {
  if (has_zoom_level()) {
    delete id_.zoom_level_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_ZoomLevel* Event::release_zoom_level() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.zoom_level)
  if (has_zoom_level()) {
    clear_has_id();
      ::arsdk::camera::Event_ZoomLevel* temp = id_.zoom_level_;
    id_.zoom_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_ZoomLevel& Event::zoom_level() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.zoom_level)
  return has_zoom_level()
      ? *id_.zoom_level_
      : *reinterpret_cast< ::arsdk::camera::Event_ZoomLevel*>(&::arsdk::camera::_Event_ZoomLevel_default_instance_);
}
inline ::arsdk::camera::Event_ZoomLevel* Event::mutable_zoom_level() {
  if (!has_zoom_level()) {
    clear_id();
    set_has_zoom_level();
    id_.zoom_level_ = CreateMaybeMessage< ::arsdk::camera::Event_ZoomLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.zoom_level)
  return id_.zoom_level_;
}

// .arsdk.camera.Event.NextPhotoInterval next_photo_interval = 3;
inline bool Event::has_next_photo_interval() const {
  return id_case() == kNextPhotoInterval;
}
inline void Event::set_has_next_photo_interval() {
  _oneof_case_[0] = kNextPhotoInterval;
}
inline void Event::clear_next_photo_interval() {
  if (has_next_photo_interval()) {
    delete id_.next_photo_interval_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_NextPhotoInterval* Event::release_next_photo_interval() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.next_photo_interval)
  if (has_next_photo_interval()) {
    clear_has_id();
      ::arsdk::camera::Event_NextPhotoInterval* temp = id_.next_photo_interval_;
    id_.next_photo_interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_NextPhotoInterval& Event::next_photo_interval() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.next_photo_interval)
  return has_next_photo_interval()
      ? *id_.next_photo_interval_
      : *reinterpret_cast< ::arsdk::camera::Event_NextPhotoInterval*>(&::arsdk::camera::_Event_NextPhotoInterval_default_instance_);
}
inline ::arsdk::camera::Event_NextPhotoInterval* Event::mutable_next_photo_interval() {
  if (!has_next_photo_interval()) {
    clear_id();
    set_has_next_photo_interval();
    id_.next_photo_interval_ = CreateMaybeMessage< ::arsdk::camera::Event_NextPhotoInterval >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.next_photo_interval)
  return id_.next_photo_interval_;
}

// .arsdk.camera.Event.CameraList camera_list = 16;
inline bool Event::has_camera_list() const {
  return id_case() == kCameraList;
}
inline void Event::set_has_camera_list() {
  _oneof_case_[0] = kCameraList;
}
inline void Event::clear_camera_list() {
  if (has_camera_list()) {
    delete id_.camera_list_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_CameraList* Event::release_camera_list() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.camera_list)
  if (has_camera_list()) {
    clear_has_id();
      ::arsdk::camera::Event_CameraList* temp = id_.camera_list_;
    id_.camera_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_CameraList& Event::camera_list() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.camera_list)
  return has_camera_list()
      ? *id_.camera_list_
      : *reinterpret_cast< ::arsdk::camera::Event_CameraList*>(&::arsdk::camera::_Event_CameraList_default_instance_);
}
inline ::arsdk::camera::Event_CameraList* Event::mutable_camera_list() {
  if (!has_camera_list()) {
    clear_id();
    set_has_camera_list();
    id_.camera_list_ = CreateMaybeMessage< ::arsdk::camera::Event_CameraList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.camera_list)
  return id_.camera_list_;
}

// .arsdk.camera.Event.State state = 17;
inline bool Event::has_state() const {
  return id_case() == kState;
}
inline void Event::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Event::clear_state() {
  if (has_state()) {
    delete id_.state_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_State* Event::release_state() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.state)
  if (has_state()) {
    clear_has_id();
      ::arsdk::camera::Event_State* temp = id_.state_;
    id_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_State& Event::state() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.state)
  return has_state()
      ? *id_.state_
      : *reinterpret_cast< ::arsdk::camera::Event_State*>(&::arsdk::camera::_Event_State_default_instance_);
}
inline ::arsdk::camera::Event_State* Event::mutable_state() {
  if (!has_state()) {
    clear_id();
    set_has_state();
    id_.state_ = CreateMaybeMessage< ::arsdk::camera::Event_State >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.state)
  return id_.state_;
}

// .arsdk.camera.Event.Photo photo = 18;
inline bool Event::has_photo() const {
  return id_case() == kPhoto;
}
inline void Event::set_has_photo() {
  _oneof_case_[0] = kPhoto;
}
inline void Event::clear_photo() {
  if (has_photo()) {
    delete id_.photo_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_Photo* Event::release_photo() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.photo)
  if (has_photo()) {
    clear_has_id();
      ::arsdk::camera::Event_Photo* temp = id_.photo_;
    id_.photo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_Photo& Event::photo() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.photo)
  return has_photo()
      ? *id_.photo_
      : *reinterpret_cast< ::arsdk::camera::Event_Photo*>(&::arsdk::camera::_Event_Photo_default_instance_);
}
inline ::arsdk::camera::Event_Photo* Event::mutable_photo() {
  if (!has_photo()) {
    clear_id();
    set_has_photo();
    id_.photo_ = CreateMaybeMessage< ::arsdk::camera::Event_Photo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.photo)
  return id_.photo_;
}

// .arsdk.camera.Event.Recording recording = 19;
inline bool Event::has_recording() const {
  return id_case() == kRecording;
}
inline void Event::set_has_recording() {
  _oneof_case_[0] = kRecording;
}
inline void Event::clear_recording() {
  if (has_recording()) {
    delete id_.recording_;
    clear_has_id();
  }
}
inline ::arsdk::camera::Event_Recording* Event::release_recording() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Event.recording)
  if (has_recording()) {
    clear_has_id();
      ::arsdk::camera::Event_Recording* temp = id_.recording_;
    id_.recording_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::camera::Event_Recording& Event::recording() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Event.recording)
  return has_recording()
      ? *id_.recording_
      : *reinterpret_cast< ::arsdk::camera::Event_Recording*>(&::arsdk::camera::_Event_Recording_default_instance_);
}
inline ::arsdk::camera::Event_Recording* Event::mutable_recording() {
  if (!has_recording()) {
    clear_id();
    set_has_recording();
    id_.recording_ = CreateMaybeMessage< ::arsdk::camera::Event_Recording >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Event.recording)
  return id_.recording_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Capabilities_Rule

// uint64 index = 1;
inline void Capabilities_Rule::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Capabilities_Rule::index() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.index)
  return index_;
}
inline void Capabilities_Rule::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.index)
}

// map<uint32, .google.protobuf.Empty> selected_fields = 2;
inline int Capabilities_Rule::selected_fields_size() const {
  return selected_fields_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
Capabilities_Rule::selected_fields() const {
  // @@protoc_insertion_point(field_map:arsdk.camera.Capabilities.Rule.selected_fields)
  return selected_fields_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
Capabilities_Rule::mutable_selected_fields() {
  // @@protoc_insertion_point(field_mutable_map:arsdk.camera.Capabilities.Rule.selected_fields)
  return selected_fields_.MutableMap();
}

// repeated .arsdk.camera.CameraMode camera_modes = 3;
inline int Capabilities_Rule::camera_modes_size() const {
  return camera_modes_.size();
}
inline void Capabilities_Rule::clear_camera_modes() {
  camera_modes_.Clear();
}
inline ::arsdk::camera::CameraMode Capabilities_Rule::camera_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.camera_modes)
  return static_cast< ::arsdk::camera::CameraMode >(camera_modes_.Get(index));
}
inline void Capabilities_Rule::set_camera_modes(int index, ::arsdk::camera::CameraMode value) {
  camera_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.camera_modes)
}
inline void Capabilities_Rule::add_camera_modes(::arsdk::camera::CameraMode value) {
  camera_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.camera_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::camera_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.camera_modes)
  return camera_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_camera_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.camera_modes)
  return &camera_modes_;
}

// repeated .arsdk.camera.PhotoMode photo_modes = 4;
inline int Capabilities_Rule::photo_modes_size() const {
  return photo_modes_.size();
}
inline void Capabilities_Rule::clear_photo_modes() {
  photo_modes_.Clear();
}
inline ::arsdk::camera::PhotoMode Capabilities_Rule::photo_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_modes)
  return static_cast< ::arsdk::camera::PhotoMode >(photo_modes_.Get(index));
}
inline void Capabilities_Rule::set_photo_modes(int index, ::arsdk::camera::PhotoMode value) {
  photo_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_modes)
}
inline void Capabilities_Rule::add_photo_modes(::arsdk::camera::PhotoMode value) {
  photo_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_modes)
  return photo_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_modes)
  return &photo_modes_;
}

// repeated .arsdk.camera.DynamicRange photo_dynamic_ranges = 5;
inline int Capabilities_Rule::photo_dynamic_ranges_size() const {
  return photo_dynamic_ranges_.size();
}
inline void Capabilities_Rule::clear_photo_dynamic_ranges() {
  photo_dynamic_ranges_.Clear();
}
inline ::arsdk::camera::DynamicRange Capabilities_Rule::photo_dynamic_ranges(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_dynamic_ranges)
  return static_cast< ::arsdk::camera::DynamicRange >(photo_dynamic_ranges_.Get(index));
}
inline void Capabilities_Rule::set_photo_dynamic_ranges(int index, ::arsdk::camera::DynamicRange value) {
  photo_dynamic_ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_dynamic_ranges)
}
inline void Capabilities_Rule::add_photo_dynamic_ranges(::arsdk::camera::DynamicRange value) {
  photo_dynamic_ranges_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_dynamic_ranges)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_dynamic_ranges() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_dynamic_ranges)
  return photo_dynamic_ranges_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_dynamic_ranges() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_dynamic_ranges)
  return &photo_dynamic_ranges_;
}

// repeated .arsdk.camera.PhotoResolution photo_resolutions = 6;
inline int Capabilities_Rule::photo_resolutions_size() const {
  return photo_resolutions_.size();
}
inline void Capabilities_Rule::clear_photo_resolutions() {
  photo_resolutions_.Clear();
}
inline ::arsdk::camera::PhotoResolution Capabilities_Rule::photo_resolutions(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_resolutions)
  return static_cast< ::arsdk::camera::PhotoResolution >(photo_resolutions_.Get(index));
}
inline void Capabilities_Rule::set_photo_resolutions(int index, ::arsdk::camera::PhotoResolution value) {
  photo_resolutions_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_resolutions)
}
inline void Capabilities_Rule::add_photo_resolutions(::arsdk::camera::PhotoResolution value) {
  photo_resolutions_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_resolutions)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_resolutions() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_resolutions)
  return photo_resolutions_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_resolutions)
  return &photo_resolutions_;
}

// repeated .arsdk.camera.PhotoFormat photo_formats = 7;
inline int Capabilities_Rule::photo_formats_size() const {
  return photo_formats_.size();
}
inline void Capabilities_Rule::clear_photo_formats() {
  photo_formats_.Clear();
}
inline ::arsdk::camera::PhotoFormat Capabilities_Rule::photo_formats(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_formats)
  return static_cast< ::arsdk::camera::PhotoFormat >(photo_formats_.Get(index));
}
inline void Capabilities_Rule::set_photo_formats(int index, ::arsdk::camera::PhotoFormat value) {
  photo_formats_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_formats)
}
inline void Capabilities_Rule::add_photo_formats(::arsdk::camera::PhotoFormat value) {
  photo_formats_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_formats)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_formats() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_formats)
  return photo_formats_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_formats() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_formats)
  return &photo_formats_;
}

// repeated .arsdk.camera.PhotoFileFormat photo_file_formats = 8;
inline int Capabilities_Rule::photo_file_formats_size() const {
  return photo_file_formats_.size();
}
inline void Capabilities_Rule::clear_photo_file_formats() {
  photo_file_formats_.Clear();
}
inline ::arsdk::camera::PhotoFileFormat Capabilities_Rule::photo_file_formats(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_file_formats)
  return static_cast< ::arsdk::camera::PhotoFileFormat >(photo_file_formats_.Get(index));
}
inline void Capabilities_Rule::set_photo_file_formats(int index, ::arsdk::camera::PhotoFileFormat value) {
  photo_file_formats_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_file_formats)
}
inline void Capabilities_Rule::add_photo_file_formats(::arsdk::camera::PhotoFileFormat value) {
  photo_file_formats_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_file_formats)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_file_formats() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_file_formats)
  return photo_file_formats_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_file_formats() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_file_formats)
  return &photo_file_formats_;
}

// repeated .arsdk.camera.BurstValue photo_burst_values = 9;
inline int Capabilities_Rule::photo_burst_values_size() const {
  return photo_burst_values_.size();
}
inline void Capabilities_Rule::clear_photo_burst_values() {
  photo_burst_values_.Clear();
}
inline ::arsdk::camera::BurstValue Capabilities_Rule::photo_burst_values(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_burst_values)
  return static_cast< ::arsdk::camera::BurstValue >(photo_burst_values_.Get(index));
}
inline void Capabilities_Rule::set_photo_burst_values(int index, ::arsdk::camera::BurstValue value) {
  photo_burst_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_burst_values)
}
inline void Capabilities_Rule::add_photo_burst_values(::arsdk::camera::BurstValue value) {
  photo_burst_values_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_burst_values)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_burst_values() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_burst_values)
  return photo_burst_values_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_burst_values() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_burst_values)
  return &photo_burst_values_;
}

// repeated .arsdk.camera.BracketingPreset photo_bracketing_presets = 10;
inline int Capabilities_Rule::photo_bracketing_presets_size() const {
  return photo_bracketing_presets_.size();
}
inline void Capabilities_Rule::clear_photo_bracketing_presets() {
  photo_bracketing_presets_.Clear();
}
inline ::arsdk::camera::BracketingPreset Capabilities_Rule::photo_bracketing_presets(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_bracketing_presets)
  return static_cast< ::arsdk::camera::BracketingPreset >(photo_bracketing_presets_.Get(index));
}
inline void Capabilities_Rule::set_photo_bracketing_presets(int index, ::arsdk::camera::BracketingPreset value) {
  photo_bracketing_presets_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_bracketing_presets)
}
inline void Capabilities_Rule::add_photo_bracketing_presets(::arsdk::camera::BracketingPreset value) {
  photo_bracketing_presets_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_bracketing_presets)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_bracketing_presets() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_bracketing_presets)
  return photo_bracketing_presets_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_bracketing_presets() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_bracketing_presets)
  return &photo_bracketing_presets_;
}

// .arsdk.camera.DoubleRange photo_time_lapse_interval_range = 11;
inline bool Capabilities_Rule::has_photo_time_lapse_interval_range() const {
  return this != internal_default_instance() && photo_time_lapse_interval_range_ != nullptr;
}
inline void Capabilities_Rule::clear_photo_time_lapse_interval_range() {
  if (GetArenaNoVirtual() == nullptr && photo_time_lapse_interval_range_ != nullptr) {
    delete photo_time_lapse_interval_range_;
  }
  photo_time_lapse_interval_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::photo_time_lapse_interval_range() const {
  const ::arsdk::camera::DoubleRange* p = photo_time_lapse_interval_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_time_lapse_interval_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_photo_time_lapse_interval_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.photo_time_lapse_interval_range)
  
  ::arsdk::camera::DoubleRange* temp = photo_time_lapse_interval_range_;
  photo_time_lapse_interval_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_photo_time_lapse_interval_range() {
  
  if (photo_time_lapse_interval_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    photo_time_lapse_interval_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.photo_time_lapse_interval_range)
  return photo_time_lapse_interval_range_;
}
inline void Capabilities_Rule::set_allocated_photo_time_lapse_interval_range(::arsdk::camera::DoubleRange* photo_time_lapse_interval_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete photo_time_lapse_interval_range_;
  }
  if (photo_time_lapse_interval_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      photo_time_lapse_interval_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo_time_lapse_interval_range, submessage_arena);
    }
    
  } else {
    
  }
  photo_time_lapse_interval_range_ = photo_time_lapse_interval_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.photo_time_lapse_interval_range)
}

// .arsdk.camera.DoubleRange photo_gps_lapse_interval_range = 12;
inline bool Capabilities_Rule::has_photo_gps_lapse_interval_range() const {
  return this != internal_default_instance() && photo_gps_lapse_interval_range_ != nullptr;
}
inline void Capabilities_Rule::clear_photo_gps_lapse_interval_range() {
  if (GetArenaNoVirtual() == nullptr && photo_gps_lapse_interval_range_ != nullptr) {
    delete photo_gps_lapse_interval_range_;
  }
  photo_gps_lapse_interval_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::photo_gps_lapse_interval_range() const {
  const ::arsdk::camera::DoubleRange* p = photo_gps_lapse_interval_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_gps_lapse_interval_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_photo_gps_lapse_interval_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.photo_gps_lapse_interval_range)
  
  ::arsdk::camera::DoubleRange* temp = photo_gps_lapse_interval_range_;
  photo_gps_lapse_interval_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_photo_gps_lapse_interval_range() {
  
  if (photo_gps_lapse_interval_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    photo_gps_lapse_interval_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.photo_gps_lapse_interval_range)
  return photo_gps_lapse_interval_range_;
}
inline void Capabilities_Rule::set_allocated_photo_gps_lapse_interval_range(::arsdk::camera::DoubleRange* photo_gps_lapse_interval_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete photo_gps_lapse_interval_range_;
  }
  if (photo_gps_lapse_interval_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      photo_gps_lapse_interval_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo_gps_lapse_interval_range, submessage_arena);
    }
    
  } else {
    
  }
  photo_gps_lapse_interval_range_ = photo_gps_lapse_interval_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.photo_gps_lapse_interval_range)
}

// repeated .arsdk.camera.PhotoStreamingMode photo_streaming_modes = 13;
inline int Capabilities_Rule::photo_streaming_modes_size() const {
  return photo_streaming_modes_.size();
}
inline void Capabilities_Rule::clear_photo_streaming_modes() {
  photo_streaming_modes_.Clear();
}
inline ::arsdk::camera::PhotoStreamingMode Capabilities_Rule::photo_streaming_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_streaming_modes)
  return static_cast< ::arsdk::camera::PhotoStreamingMode >(photo_streaming_modes_.Get(index));
}
inline void Capabilities_Rule::set_photo_streaming_modes(int index, ::arsdk::camera::PhotoStreamingMode value) {
  photo_streaming_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_streaming_modes)
}
inline void Capabilities_Rule::add_photo_streaming_modes(::arsdk::camera::PhotoStreamingMode value) {
  photo_streaming_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_streaming_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_streaming_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_streaming_modes)
  return photo_streaming_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_streaming_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_streaming_modes)
  return &photo_streaming_modes_;
}

// repeated .arsdk.camera.VideoRecordingMode video_recording_modes = 14;
inline int Capabilities_Rule::video_recording_modes_size() const {
  return video_recording_modes_.size();
}
inline void Capabilities_Rule::clear_video_recording_modes() {
  video_recording_modes_.Clear();
}
inline ::arsdk::camera::VideoRecordingMode Capabilities_Rule::video_recording_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.video_recording_modes)
  return static_cast< ::arsdk::camera::VideoRecordingMode >(video_recording_modes_.Get(index));
}
inline void Capabilities_Rule::set_video_recording_modes(int index, ::arsdk::camera::VideoRecordingMode value) {
  video_recording_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.video_recording_modes)
}
inline void Capabilities_Rule::add_video_recording_modes(::arsdk::camera::VideoRecordingMode value) {
  video_recording_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.video_recording_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::video_recording_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.video_recording_modes)
  return video_recording_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_video_recording_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.video_recording_modes)
  return &video_recording_modes_;
}

// repeated .arsdk.camera.DynamicRange video_recording_dynamic_ranges = 15;
inline int Capabilities_Rule::video_recording_dynamic_ranges_size() const {
  return video_recording_dynamic_ranges_.size();
}
inline void Capabilities_Rule::clear_video_recording_dynamic_ranges() {
  video_recording_dynamic_ranges_.Clear();
}
inline ::arsdk::camera::DynamicRange Capabilities_Rule::video_recording_dynamic_ranges(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.video_recording_dynamic_ranges)
  return static_cast< ::arsdk::camera::DynamicRange >(video_recording_dynamic_ranges_.Get(index));
}
inline void Capabilities_Rule::set_video_recording_dynamic_ranges(int index, ::arsdk::camera::DynamicRange value) {
  video_recording_dynamic_ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.video_recording_dynamic_ranges)
}
inline void Capabilities_Rule::add_video_recording_dynamic_ranges(::arsdk::camera::DynamicRange value) {
  video_recording_dynamic_ranges_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.video_recording_dynamic_ranges)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::video_recording_dynamic_ranges() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.video_recording_dynamic_ranges)
  return video_recording_dynamic_ranges_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_video_recording_dynamic_ranges() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.video_recording_dynamic_ranges)
  return &video_recording_dynamic_ranges_;
}

// repeated .arsdk.camera.VideoCodec video_recording_codecs = 16;
inline int Capabilities_Rule::video_recording_codecs_size() const {
  return video_recording_codecs_.size();
}
inline void Capabilities_Rule::clear_video_recording_codecs() {
  video_recording_codecs_.Clear();
}
inline ::arsdk::camera::VideoCodec Capabilities_Rule::video_recording_codecs(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.video_recording_codecs)
  return static_cast< ::arsdk::camera::VideoCodec >(video_recording_codecs_.Get(index));
}
inline void Capabilities_Rule::set_video_recording_codecs(int index, ::arsdk::camera::VideoCodec value) {
  video_recording_codecs_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.video_recording_codecs)
}
inline void Capabilities_Rule::add_video_recording_codecs(::arsdk::camera::VideoCodec value) {
  video_recording_codecs_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.video_recording_codecs)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::video_recording_codecs() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.video_recording_codecs)
  return video_recording_codecs_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_video_recording_codecs() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.video_recording_codecs)
  return &video_recording_codecs_;
}

// repeated .arsdk.camera.VideoResolution video_recording_resolutions = 17;
inline int Capabilities_Rule::video_recording_resolutions_size() const {
  return video_recording_resolutions_.size();
}
inline void Capabilities_Rule::clear_video_recording_resolutions() {
  video_recording_resolutions_.Clear();
}
inline ::arsdk::camera::VideoResolution Capabilities_Rule::video_recording_resolutions(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.video_recording_resolutions)
  return static_cast< ::arsdk::camera::VideoResolution >(video_recording_resolutions_.Get(index));
}
inline void Capabilities_Rule::set_video_recording_resolutions(int index, ::arsdk::camera::VideoResolution value) {
  video_recording_resolutions_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.video_recording_resolutions)
}
inline void Capabilities_Rule::add_video_recording_resolutions(::arsdk::camera::VideoResolution value) {
  video_recording_resolutions_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.video_recording_resolutions)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::video_recording_resolutions() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.video_recording_resolutions)
  return video_recording_resolutions_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_video_recording_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.video_recording_resolutions)
  return &video_recording_resolutions_;
}

// repeated .arsdk.camera.Framerate video_recording_framerates = 18;
inline int Capabilities_Rule::video_recording_framerates_size() const {
  return video_recording_framerates_.size();
}
inline void Capabilities_Rule::clear_video_recording_framerates() {
  video_recording_framerates_.Clear();
}
inline ::arsdk::camera::Framerate Capabilities_Rule::video_recording_framerates(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.video_recording_framerates)
  return static_cast< ::arsdk::camera::Framerate >(video_recording_framerates_.Get(index));
}
inline void Capabilities_Rule::set_video_recording_framerates(int index, ::arsdk::camera::Framerate value) {
  video_recording_framerates_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.video_recording_framerates)
}
inline void Capabilities_Rule::add_video_recording_framerates(::arsdk::camera::Framerate value) {
  video_recording_framerates_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.video_recording_framerates)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::video_recording_framerates() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.video_recording_framerates)
  return video_recording_framerates_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_video_recording_framerates() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.video_recording_framerates)
  return &video_recording_framerates_;
}

// repeated .arsdk.camera.AudioRecordingMode audio_recording_modes = 20;
inline int Capabilities_Rule::audio_recording_modes_size() const {
  return audio_recording_modes_.size();
}
inline void Capabilities_Rule::clear_audio_recording_modes() {
  audio_recording_modes_.Clear();
}
inline ::arsdk::camera::AudioRecordingMode Capabilities_Rule::audio_recording_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.audio_recording_modes)
  return static_cast< ::arsdk::camera::AudioRecordingMode >(audio_recording_modes_.Get(index));
}
inline void Capabilities_Rule::set_audio_recording_modes(int index, ::arsdk::camera::AudioRecordingMode value) {
  audio_recording_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.audio_recording_modes)
}
inline void Capabilities_Rule::add_audio_recording_modes(::arsdk::camera::AudioRecordingMode value) {
  audio_recording_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.audio_recording_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::audio_recording_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.audio_recording_modes)
  return audio_recording_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_audio_recording_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.audio_recording_modes)
  return &audio_recording_modes_;
}

// repeated .arsdk.camera.ExposureMode exposure_modes = 23;
inline int Capabilities_Rule::exposure_modes_size() const {
  return exposure_modes_.size();
}
inline void Capabilities_Rule::clear_exposure_modes() {
  exposure_modes_.Clear();
}
inline ::arsdk::camera::ExposureMode Capabilities_Rule::exposure_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.exposure_modes)
  return static_cast< ::arsdk::camera::ExposureMode >(exposure_modes_.Get(index));
}
inline void Capabilities_Rule::set_exposure_modes(int index, ::arsdk::camera::ExposureMode value) {
  exposure_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.exposure_modes)
}
inline void Capabilities_Rule::add_exposure_modes(::arsdk::camera::ExposureMode value) {
  exposure_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.exposure_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::exposure_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.exposure_modes)
  return exposure_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_exposure_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.exposure_modes)
  return &exposure_modes_;
}

// repeated .arsdk.camera.ShutterSpeed exposure_manual_shutter_speeds = 24;
inline int Capabilities_Rule::exposure_manual_shutter_speeds_size() const {
  return exposure_manual_shutter_speeds_.size();
}
inline void Capabilities_Rule::clear_exposure_manual_shutter_speeds() {
  exposure_manual_shutter_speeds_.Clear();
}
inline ::arsdk::camera::ShutterSpeed Capabilities_Rule::exposure_manual_shutter_speeds(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.exposure_manual_shutter_speeds)
  return static_cast< ::arsdk::camera::ShutterSpeed >(exposure_manual_shutter_speeds_.Get(index));
}
inline void Capabilities_Rule::set_exposure_manual_shutter_speeds(int index, ::arsdk::camera::ShutterSpeed value) {
  exposure_manual_shutter_speeds_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.exposure_manual_shutter_speeds)
}
inline void Capabilities_Rule::add_exposure_manual_shutter_speeds(::arsdk::camera::ShutterSpeed value) {
  exposure_manual_shutter_speeds_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.exposure_manual_shutter_speeds)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::exposure_manual_shutter_speeds() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.exposure_manual_shutter_speeds)
  return exposure_manual_shutter_speeds_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_exposure_manual_shutter_speeds() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.exposure_manual_shutter_speeds)
  return &exposure_manual_shutter_speeds_;
}

// repeated .arsdk.camera.IsoSensitivity exposure_manual_iso_sensitivities = 25;
inline int Capabilities_Rule::exposure_manual_iso_sensitivities_size() const {
  return exposure_manual_iso_sensitivities_.size();
}
inline void Capabilities_Rule::clear_exposure_manual_iso_sensitivities() {
  exposure_manual_iso_sensitivities_.Clear();
}
inline ::arsdk::camera::IsoSensitivity Capabilities_Rule::exposure_manual_iso_sensitivities(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.exposure_manual_iso_sensitivities)
  return static_cast< ::arsdk::camera::IsoSensitivity >(exposure_manual_iso_sensitivities_.Get(index));
}
inline void Capabilities_Rule::set_exposure_manual_iso_sensitivities(int index, ::arsdk::camera::IsoSensitivity value) {
  exposure_manual_iso_sensitivities_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.exposure_manual_iso_sensitivities)
}
inline void Capabilities_Rule::add_exposure_manual_iso_sensitivities(::arsdk::camera::IsoSensitivity value) {
  exposure_manual_iso_sensitivities_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.exposure_manual_iso_sensitivities)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::exposure_manual_iso_sensitivities() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.exposure_manual_iso_sensitivities)
  return exposure_manual_iso_sensitivities_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_exposure_manual_iso_sensitivities() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.exposure_manual_iso_sensitivities)
  return &exposure_manual_iso_sensitivities_;
}

// repeated .arsdk.camera.IsoSensitivity exposure_maximum_iso_sensitivities = 26;
inline int Capabilities_Rule::exposure_maximum_iso_sensitivities_size() const {
  return exposure_maximum_iso_sensitivities_.size();
}
inline void Capabilities_Rule::clear_exposure_maximum_iso_sensitivities() {
  exposure_maximum_iso_sensitivities_.Clear();
}
inline ::arsdk::camera::IsoSensitivity Capabilities_Rule::exposure_maximum_iso_sensitivities(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.exposure_maximum_iso_sensitivities)
  return static_cast< ::arsdk::camera::IsoSensitivity >(exposure_maximum_iso_sensitivities_.Get(index));
}
inline void Capabilities_Rule::set_exposure_maximum_iso_sensitivities(int index, ::arsdk::camera::IsoSensitivity value) {
  exposure_maximum_iso_sensitivities_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.exposure_maximum_iso_sensitivities)
}
inline void Capabilities_Rule::add_exposure_maximum_iso_sensitivities(::arsdk::camera::IsoSensitivity value) {
  exposure_maximum_iso_sensitivities_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.exposure_maximum_iso_sensitivities)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::exposure_maximum_iso_sensitivities() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.exposure_maximum_iso_sensitivities)
  return exposure_maximum_iso_sensitivities_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_exposure_maximum_iso_sensitivities() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.exposure_maximum_iso_sensitivities)
  return &exposure_maximum_iso_sensitivities_;
}

// repeated .arsdk.camera.WhiteBalanceMode white_balance_modes = 27;
inline int Capabilities_Rule::white_balance_modes_size() const {
  return white_balance_modes_.size();
}
inline void Capabilities_Rule::clear_white_balance_modes() {
  white_balance_modes_.Clear();
}
inline ::arsdk::camera::WhiteBalanceMode Capabilities_Rule::white_balance_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.white_balance_modes)
  return static_cast< ::arsdk::camera::WhiteBalanceMode >(white_balance_modes_.Get(index));
}
inline void Capabilities_Rule::set_white_balance_modes(int index, ::arsdk::camera::WhiteBalanceMode value) {
  white_balance_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.white_balance_modes)
}
inline void Capabilities_Rule::add_white_balance_modes(::arsdk::camera::WhiteBalanceMode value) {
  white_balance_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.white_balance_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::white_balance_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.white_balance_modes)
  return white_balance_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_white_balance_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.white_balance_modes)
  return &white_balance_modes_;
}

// repeated .arsdk.camera.WhiteBalanceTemperature white_balance_temperatures = 28;
inline int Capabilities_Rule::white_balance_temperatures_size() const {
  return white_balance_temperatures_.size();
}
inline void Capabilities_Rule::clear_white_balance_temperatures() {
  white_balance_temperatures_.Clear();
}
inline ::arsdk::camera::WhiteBalanceTemperature Capabilities_Rule::white_balance_temperatures(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.white_balance_temperatures)
  return static_cast< ::arsdk::camera::WhiteBalanceTemperature >(white_balance_temperatures_.Get(index));
}
inline void Capabilities_Rule::set_white_balance_temperatures(int index, ::arsdk::camera::WhiteBalanceTemperature value) {
  white_balance_temperatures_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.white_balance_temperatures)
}
inline void Capabilities_Rule::add_white_balance_temperatures(::arsdk::camera::WhiteBalanceTemperature value) {
  white_balance_temperatures_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.white_balance_temperatures)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::white_balance_temperatures() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.white_balance_temperatures)
  return white_balance_temperatures_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_white_balance_temperatures() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.white_balance_temperatures)
  return &white_balance_temperatures_;
}

// repeated .arsdk.camera.EvCompensation ev_compensations = 29;
inline int Capabilities_Rule::ev_compensations_size() const {
  return ev_compensations_.size();
}
inline void Capabilities_Rule::clear_ev_compensations() {
  ev_compensations_.Clear();
}
inline ::arsdk::camera::EvCompensation Capabilities_Rule::ev_compensations(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.ev_compensations)
  return static_cast< ::arsdk::camera::EvCompensation >(ev_compensations_.Get(index));
}
inline void Capabilities_Rule::set_ev_compensations(int index, ::arsdk::camera::EvCompensation value) {
  ev_compensations_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.ev_compensations)
}
inline void Capabilities_Rule::add_ev_compensations(::arsdk::camera::EvCompensation value) {
  ev_compensations_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.ev_compensations)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::ev_compensations() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.ev_compensations)
  return ev_compensations_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_ev_compensations() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.ev_compensations)
  return &ev_compensations_;
}

// repeated .arsdk.camera.ImageStyle image_styles = 30;
inline int Capabilities_Rule::image_styles_size() const {
  return image_styles_.size();
}
inline void Capabilities_Rule::clear_image_styles() {
  image_styles_.Clear();
}
inline ::arsdk::camera::ImageStyle Capabilities_Rule::image_styles(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.image_styles)
  return static_cast< ::arsdk::camera::ImageStyle >(image_styles_.Get(index));
}
inline void Capabilities_Rule::set_image_styles(int index, ::arsdk::camera::ImageStyle value) {
  image_styles_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.image_styles)
}
inline void Capabilities_Rule::add_image_styles(::arsdk::camera::ImageStyle value) {
  image_styles_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.image_styles)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::image_styles() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.image_styles)
  return image_styles_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_image_styles() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.image_styles)
  return &image_styles_;
}

// .arsdk.camera.DoubleRange image_contrast_range = 31;
inline bool Capabilities_Rule::has_image_contrast_range() const {
  return this != internal_default_instance() && image_contrast_range_ != nullptr;
}
inline void Capabilities_Rule::clear_image_contrast_range() {
  if (GetArenaNoVirtual() == nullptr && image_contrast_range_ != nullptr) {
    delete image_contrast_range_;
  }
  image_contrast_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::image_contrast_range() const {
  const ::arsdk::camera::DoubleRange* p = image_contrast_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.image_contrast_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_image_contrast_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.image_contrast_range)
  
  ::arsdk::camera::DoubleRange* temp = image_contrast_range_;
  image_contrast_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_image_contrast_range() {
  
  if (image_contrast_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    image_contrast_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.image_contrast_range)
  return image_contrast_range_;
}
inline void Capabilities_Rule::set_allocated_image_contrast_range(::arsdk::camera::DoubleRange* image_contrast_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_contrast_range_;
  }
  if (image_contrast_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_contrast_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_contrast_range, submessage_arena);
    }
    
  } else {
    
  }
  image_contrast_range_ = image_contrast_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.image_contrast_range)
}

// .arsdk.camera.DoubleRange image_saturation_range = 32;
inline bool Capabilities_Rule::has_image_saturation_range() const {
  return this != internal_default_instance() && image_saturation_range_ != nullptr;
}
inline void Capabilities_Rule::clear_image_saturation_range() {
  if (GetArenaNoVirtual() == nullptr && image_saturation_range_ != nullptr) {
    delete image_saturation_range_;
  }
  image_saturation_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::image_saturation_range() const {
  const ::arsdk::camera::DoubleRange* p = image_saturation_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.image_saturation_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_image_saturation_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.image_saturation_range)
  
  ::arsdk::camera::DoubleRange* temp = image_saturation_range_;
  image_saturation_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_image_saturation_range() {
  
  if (image_saturation_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    image_saturation_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.image_saturation_range)
  return image_saturation_range_;
}
inline void Capabilities_Rule::set_allocated_image_saturation_range(::arsdk::camera::DoubleRange* image_saturation_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_saturation_range_;
  }
  if (image_saturation_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_saturation_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_saturation_range, submessage_arena);
    }
    
  } else {
    
  }
  image_saturation_range_ = image_saturation_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.image_saturation_range)
}

// .arsdk.camera.DoubleRange image_sharpness_range = 33;
inline bool Capabilities_Rule::has_image_sharpness_range() const {
  return this != internal_default_instance() && image_sharpness_range_ != nullptr;
}
inline void Capabilities_Rule::clear_image_sharpness_range() {
  if (GetArenaNoVirtual() == nullptr && image_sharpness_range_ != nullptr) {
    delete image_sharpness_range_;
  }
  image_sharpness_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::image_sharpness_range() const {
  const ::arsdk::camera::DoubleRange* p = image_sharpness_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.image_sharpness_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_image_sharpness_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.image_sharpness_range)
  
  ::arsdk::camera::DoubleRange* temp = image_sharpness_range_;
  image_sharpness_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_image_sharpness_range() {
  
  if (image_sharpness_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    image_sharpness_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.image_sharpness_range)
  return image_sharpness_range_;
}
inline void Capabilities_Rule::set_allocated_image_sharpness_range(::arsdk::camera::DoubleRange* image_sharpness_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_sharpness_range_;
  }
  if (image_sharpness_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_sharpness_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_sharpness_range, submessage_arena);
    }
    
  } else {
    
  }
  image_sharpness_range_ = image_sharpness_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.image_sharpness_range)
}

// .arsdk.camera.DoubleRange zoom_max_speed_range = 34;
inline bool Capabilities_Rule::has_zoom_max_speed_range() const {
  return this != internal_default_instance() && zoom_max_speed_range_ != nullptr;
}
inline void Capabilities_Rule::clear_zoom_max_speed_range() {
  if (GetArenaNoVirtual() == nullptr && zoom_max_speed_range_ != nullptr) {
    delete zoom_max_speed_range_;
  }
  zoom_max_speed_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::zoom_max_speed_range() const {
  const ::arsdk::camera::DoubleRange* p = zoom_max_speed_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.zoom_max_speed_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_zoom_max_speed_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.zoom_max_speed_range)
  
  ::arsdk::camera::DoubleRange* temp = zoom_max_speed_range_;
  zoom_max_speed_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_zoom_max_speed_range() {
  
  if (zoom_max_speed_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    zoom_max_speed_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.zoom_max_speed_range)
  return zoom_max_speed_range_;
}
inline void Capabilities_Rule::set_allocated_zoom_max_speed_range(::arsdk::camera::DoubleRange* zoom_max_speed_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zoom_max_speed_range_;
  }
  if (zoom_max_speed_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zoom_max_speed_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zoom_max_speed_range, submessage_arena);
    }
    
  } else {
    
  }
  zoom_max_speed_range_ = zoom_max_speed_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.zoom_max_speed_range)
}

// repeated .arsdk.camera.ZoomVelocityControlQualityMode zoom_velocity_control_quality_modes = 35;
inline int Capabilities_Rule::zoom_velocity_control_quality_modes_size() const {
  return zoom_velocity_control_quality_modes_.size();
}
inline void Capabilities_Rule::clear_zoom_velocity_control_quality_modes() {
  zoom_velocity_control_quality_modes_.Clear();
}
inline ::arsdk::camera::ZoomVelocityControlQualityMode Capabilities_Rule::zoom_velocity_control_quality_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.zoom_velocity_control_quality_modes)
  return static_cast< ::arsdk::camera::ZoomVelocityControlQualityMode >(zoom_velocity_control_quality_modes_.Get(index));
}
inline void Capabilities_Rule::set_zoom_velocity_control_quality_modes(int index, ::arsdk::camera::ZoomVelocityControlQualityMode value) {
  zoom_velocity_control_quality_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.zoom_velocity_control_quality_modes)
}
inline void Capabilities_Rule::add_zoom_velocity_control_quality_modes(::arsdk::camera::ZoomVelocityControlQualityMode value) {
  zoom_velocity_control_quality_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.zoom_velocity_control_quality_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::zoom_velocity_control_quality_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.zoom_velocity_control_quality_modes)
  return zoom_velocity_control_quality_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_zoom_velocity_control_quality_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.zoom_velocity_control_quality_modes)
  return &zoom_velocity_control_quality_modes_;
}

// repeated .arsdk.camera.AutoRecordMode auto_record_modes = 36;
inline int Capabilities_Rule::auto_record_modes_size() const {
  return auto_record_modes_.size();
}
inline void Capabilities_Rule::clear_auto_record_modes() {
  auto_record_modes_.Clear();
}
inline ::arsdk::camera::AutoRecordMode Capabilities_Rule::auto_record_modes(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.auto_record_modes)
  return static_cast< ::arsdk::camera::AutoRecordMode >(auto_record_modes_.Get(index));
}
inline void Capabilities_Rule::set_auto_record_modes(int index, ::arsdk::camera::AutoRecordMode value) {
  auto_record_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.auto_record_modes)
}
inline void Capabilities_Rule::add_auto_record_modes(::arsdk::camera::AutoRecordMode value) {
  auto_record_modes_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.auto_record_modes)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::auto_record_modes() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.auto_record_modes)
  return auto_record_modes_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_auto_record_modes() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.auto_record_modes)
  return &auto_record_modes_;
}

// .arsdk.camera.DoubleRange alignment_offset_pitch_range = 37;
inline bool Capabilities_Rule::has_alignment_offset_pitch_range() const {
  return this != internal_default_instance() && alignment_offset_pitch_range_ != nullptr;
}
inline void Capabilities_Rule::clear_alignment_offset_pitch_range() {
  if (GetArenaNoVirtual() == nullptr && alignment_offset_pitch_range_ != nullptr) {
    delete alignment_offset_pitch_range_;
  }
  alignment_offset_pitch_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::alignment_offset_pitch_range() const {
  const ::arsdk::camera::DoubleRange* p = alignment_offset_pitch_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.alignment_offset_pitch_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_alignment_offset_pitch_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.alignment_offset_pitch_range)
  
  ::arsdk::camera::DoubleRange* temp = alignment_offset_pitch_range_;
  alignment_offset_pitch_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_alignment_offset_pitch_range() {
  
  if (alignment_offset_pitch_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    alignment_offset_pitch_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.alignment_offset_pitch_range)
  return alignment_offset_pitch_range_;
}
inline void Capabilities_Rule::set_allocated_alignment_offset_pitch_range(::arsdk::camera::DoubleRange* alignment_offset_pitch_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alignment_offset_pitch_range_;
  }
  if (alignment_offset_pitch_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alignment_offset_pitch_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alignment_offset_pitch_range, submessage_arena);
    }
    
  } else {
    
  }
  alignment_offset_pitch_range_ = alignment_offset_pitch_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.alignment_offset_pitch_range)
}

// .arsdk.camera.DoubleRange alignment_offset_roll_range = 38;
inline bool Capabilities_Rule::has_alignment_offset_roll_range() const {
  return this != internal_default_instance() && alignment_offset_roll_range_ != nullptr;
}
inline void Capabilities_Rule::clear_alignment_offset_roll_range() {
  if (GetArenaNoVirtual() == nullptr && alignment_offset_roll_range_ != nullptr) {
    delete alignment_offset_roll_range_;
  }
  alignment_offset_roll_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::alignment_offset_roll_range() const {
  const ::arsdk::camera::DoubleRange* p = alignment_offset_roll_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.alignment_offset_roll_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_alignment_offset_roll_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.alignment_offset_roll_range)
  
  ::arsdk::camera::DoubleRange* temp = alignment_offset_roll_range_;
  alignment_offset_roll_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_alignment_offset_roll_range() {
  
  if (alignment_offset_roll_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    alignment_offset_roll_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.alignment_offset_roll_range)
  return alignment_offset_roll_range_;
}
inline void Capabilities_Rule::set_allocated_alignment_offset_roll_range(::arsdk::camera::DoubleRange* alignment_offset_roll_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alignment_offset_roll_range_;
  }
  if (alignment_offset_roll_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alignment_offset_roll_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alignment_offset_roll_range, submessage_arena);
    }
    
  } else {
    
  }
  alignment_offset_roll_range_ = alignment_offset_roll_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.alignment_offset_roll_range)
}

// .arsdk.camera.DoubleRange alignment_offset_yaw_range = 39;
inline bool Capabilities_Rule::has_alignment_offset_yaw_range() const {
  return this != internal_default_instance() && alignment_offset_yaw_range_ != nullptr;
}
inline void Capabilities_Rule::clear_alignment_offset_yaw_range() {
  if (GetArenaNoVirtual() == nullptr && alignment_offset_yaw_range_ != nullptr) {
    delete alignment_offset_yaw_range_;
  }
  alignment_offset_yaw_range_ = nullptr;
}
inline const ::arsdk::camera::DoubleRange& Capabilities_Rule::alignment_offset_yaw_range() const {
  const ::arsdk::camera::DoubleRange* p = alignment_offset_yaw_range_;
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.alignment_offset_yaw_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::DoubleRange*>(
      &::arsdk::camera::_DoubleRange_default_instance_);
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::release_alignment_offset_yaw_range() {
  // @@protoc_insertion_point(field_release:arsdk.camera.Capabilities.Rule.alignment_offset_yaw_range)
  
  ::arsdk::camera::DoubleRange* temp = alignment_offset_yaw_range_;
  alignment_offset_yaw_range_ = nullptr;
  return temp;
}
inline ::arsdk::camera::DoubleRange* Capabilities_Rule::mutable_alignment_offset_yaw_range() {
  
  if (alignment_offset_yaw_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::DoubleRange>(GetArenaNoVirtual());
    alignment_offset_yaw_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.Rule.alignment_offset_yaw_range)
  return alignment_offset_yaw_range_;
}
inline void Capabilities_Rule::set_allocated_alignment_offset_yaw_range(::arsdk::camera::DoubleRange* alignment_offset_yaw_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alignment_offset_yaw_range_;
  }
  if (alignment_offset_yaw_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alignment_offset_yaw_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alignment_offset_yaw_range, submessage_arena);
    }
    
  } else {
    
  }
  alignment_offset_yaw_range_ = alignment_offset_yaw_range;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.Capabilities.Rule.alignment_offset_yaw_range)
}

// repeated .arsdk.camera.DigitalSignature photo_signatures = 40;
inline int Capabilities_Rule::photo_signatures_size() const {
  return photo_signatures_.size();
}
inline void Capabilities_Rule::clear_photo_signatures() {
  photo_signatures_.Clear();
}
inline ::arsdk::camera::DigitalSignature Capabilities_Rule::photo_signatures(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.photo_signatures)
  return static_cast< ::arsdk::camera::DigitalSignature >(photo_signatures_.Get(index));
}
inline void Capabilities_Rule::set_photo_signatures(int index, ::arsdk::camera::DigitalSignature value) {
  photo_signatures_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.photo_signatures)
}
inline void Capabilities_Rule::add_photo_signatures(::arsdk::camera::DigitalSignature value) {
  photo_signatures_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.photo_signatures)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::photo_signatures() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.photo_signatures)
  return photo_signatures_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_photo_signatures() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.photo_signatures)
  return &photo_signatures_;
}

// repeated .arsdk.camera.ExposureMetering exposure_meterings = 41;
inline int Capabilities_Rule::exposure_meterings_size() const {
  return exposure_meterings_.size();
}
inline void Capabilities_Rule::clear_exposure_meterings() {
  exposure_meterings_.Clear();
}
inline ::arsdk::camera::ExposureMetering Capabilities_Rule::exposure_meterings(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.exposure_meterings)
  return static_cast< ::arsdk::camera::ExposureMetering >(exposure_meterings_.Get(index));
}
inline void Capabilities_Rule::set_exposure_meterings(int index, ::arsdk::camera::ExposureMetering value) {
  exposure_meterings_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.exposure_meterings)
}
inline void Capabilities_Rule::add_exposure_meterings(::arsdk::camera::ExposureMetering value) {
  exposure_meterings_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.exposure_meterings)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::exposure_meterings() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.exposure_meterings)
  return exposure_meterings_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_exposure_meterings() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.exposure_meterings)
  return &exposure_meterings_;
}

// repeated .arsdk.camera.StoragePolicy storage_policies = 42;
inline int Capabilities_Rule::storage_policies_size() const {
  return storage_policies_.size();
}
inline void Capabilities_Rule::clear_storage_policies() {
  storage_policies_.Clear();
}
inline ::arsdk::camera::StoragePolicy Capabilities_Rule::storage_policies(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.storage_policies)
  return static_cast< ::arsdk::camera::StoragePolicy >(storage_policies_.Get(index));
}
inline void Capabilities_Rule::set_storage_policies(int index, ::arsdk::camera::StoragePolicy value) {
  storage_policies_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.storage_policies)
}
inline void Capabilities_Rule::add_storage_policies(::arsdk::camera::StoragePolicy value) {
  storage_policies_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.storage_policies)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities_Rule::storage_policies() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.storage_policies)
  return storage_policies_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities_Rule::mutable_storage_policies() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.storage_policies)
  return &storage_policies_;
}

// repeated uint32 video_recording_bitrates = 43;
inline int Capabilities_Rule::video_recording_bitrates_size() const {
  return video_recording_bitrates_.size();
}
inline void Capabilities_Rule::clear_video_recording_bitrates() {
  video_recording_bitrates_.Clear();
}
inline ::google::protobuf::uint32 Capabilities_Rule::video_recording_bitrates(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.Rule.video_recording_bitrates)
  return video_recording_bitrates_.Get(index);
}
inline void Capabilities_Rule::set_video_recording_bitrates(int index, ::google::protobuf::uint32 value) {
  video_recording_bitrates_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.camera.Capabilities.Rule.video_recording_bitrates)
}
inline void Capabilities_Rule::add_video_recording_bitrates(::google::protobuf::uint32 value) {
  video_recording_bitrates_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.Rule.video_recording_bitrates)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Capabilities_Rule::video_recording_bitrates() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.Rule.video_recording_bitrates)
  return video_recording_bitrates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Capabilities_Rule::mutable_video_recording_bitrates() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.Rule.video_recording_bitrates)
  return &video_recording_bitrates_;
}

// -------------------------------------------------------------------

// Capabilities

// repeated .arsdk.camera.Capabilities.Rule rules = 1;
inline int Capabilities::rules_size() const {
  return rules_.size();
}
inline void Capabilities::clear_rules() {
  rules_.Clear();
}
inline ::arsdk::camera::Capabilities_Rule* Capabilities::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:arsdk.camera.Capabilities.rules)
  return rules_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::arsdk::camera::Capabilities_Rule >*
Capabilities::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.camera.Capabilities.rules)
  return &rules_;
}
inline const ::arsdk::camera::Capabilities_Rule& Capabilities::rules(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Capabilities.rules)
  return rules_.Get(index);
}
inline ::arsdk::camera::Capabilities_Rule* Capabilities::add_rules() {
  // @@protoc_insertion_point(field_add:arsdk.camera.Capabilities.rules)
  return rules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::arsdk::camera::Capabilities_Rule >&
Capabilities::rules() const {
  // @@protoc_insertion_point(field_list:arsdk.camera.Capabilities.rules)
  return rules_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Config

// map<uint32, .google.protobuf.Empty> selected_fields = 1;
inline int Config::selected_fields_size() const {
  return selected_fields_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
Config::selected_fields() const {
  // @@protoc_insertion_point(field_map:arsdk.camera.Config.selected_fields)
  return selected_fields_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
Config::mutable_selected_fields() {
  // @@protoc_insertion_point(field_mutable_map:arsdk.camera.Config.selected_fields)
  return selected_fields_.MutableMap();
}

// .arsdk.camera.CameraMode camera_mode = 2;
inline void Config::clear_camera_mode() {
  camera_mode_ = 0;
}
inline ::arsdk::camera::CameraMode Config::camera_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.camera_mode)
  return static_cast< ::arsdk::camera::CameraMode >(camera_mode_);
}
inline void Config::set_camera_mode(::arsdk::camera::CameraMode value) {
  
  camera_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.camera_mode)
}

// .arsdk.camera.PhotoMode photo_mode = 3;
inline void Config::clear_photo_mode() {
  photo_mode_ = 0;
}
inline ::arsdk::camera::PhotoMode Config::photo_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_mode)
  return static_cast< ::arsdk::camera::PhotoMode >(photo_mode_);
}
inline void Config::set_photo_mode(::arsdk::camera::PhotoMode value) {
  
  photo_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_mode)
}

// .arsdk.camera.DynamicRange photo_dynamic_range = 4;
inline void Config::clear_photo_dynamic_range() {
  photo_dynamic_range_ = 0;
}
inline ::arsdk::camera::DynamicRange Config::photo_dynamic_range() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_dynamic_range)
  return static_cast< ::arsdk::camera::DynamicRange >(photo_dynamic_range_);
}
inline void Config::set_photo_dynamic_range(::arsdk::camera::DynamicRange value) {
  
  photo_dynamic_range_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_dynamic_range)
}

// .arsdk.camera.PhotoResolution photo_resolution = 5;
inline void Config::clear_photo_resolution() {
  photo_resolution_ = 0;
}
inline ::arsdk::camera::PhotoResolution Config::photo_resolution() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_resolution)
  return static_cast< ::arsdk::camera::PhotoResolution >(photo_resolution_);
}
inline void Config::set_photo_resolution(::arsdk::camera::PhotoResolution value) {
  
  photo_resolution_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_resolution)
}

// .arsdk.camera.PhotoFormat photo_format = 6;
inline void Config::clear_photo_format() {
  photo_format_ = 0;
}
inline ::arsdk::camera::PhotoFormat Config::photo_format() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_format)
  return static_cast< ::arsdk::camera::PhotoFormat >(photo_format_);
}
inline void Config::set_photo_format(::arsdk::camera::PhotoFormat value) {
  
  photo_format_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_format)
}

// .arsdk.camera.PhotoFileFormat photo_file_format = 7;
inline void Config::clear_photo_file_format() {
  photo_file_format_ = 0;
}
inline ::arsdk::camera::PhotoFileFormat Config::photo_file_format() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_file_format)
  return static_cast< ::arsdk::camera::PhotoFileFormat >(photo_file_format_);
}
inline void Config::set_photo_file_format(::arsdk::camera::PhotoFileFormat value) {
  
  photo_file_format_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_file_format)
}

// .arsdk.camera.BurstValue photo_burst_value = 8;
inline void Config::clear_photo_burst_value() {
  photo_burst_value_ = 0;
}
inline ::arsdk::camera::BurstValue Config::photo_burst_value() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_burst_value)
  return static_cast< ::arsdk::camera::BurstValue >(photo_burst_value_);
}
inline void Config::set_photo_burst_value(::arsdk::camera::BurstValue value) {
  
  photo_burst_value_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_burst_value)
}

// .arsdk.camera.BracketingPreset photo_bracketing_preset = 9;
inline void Config::clear_photo_bracketing_preset() {
  photo_bracketing_preset_ = 0;
}
inline ::arsdk::camera::BracketingPreset Config::photo_bracketing_preset() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_bracketing_preset)
  return static_cast< ::arsdk::camera::BracketingPreset >(photo_bracketing_preset_);
}
inline void Config::set_photo_bracketing_preset(::arsdk::camera::BracketingPreset value) {
  
  photo_bracketing_preset_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_bracketing_preset)
}

// double photo_time_lapse_interval = 10;
inline void Config::clear_photo_time_lapse_interval() {
  photo_time_lapse_interval_ = 0;
}
inline double Config::photo_time_lapse_interval() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_time_lapse_interval)
  return photo_time_lapse_interval_;
}
inline void Config::set_photo_time_lapse_interval(double value) {
  
  photo_time_lapse_interval_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_time_lapse_interval)
}

// double photo_gps_lapse_interval = 11;
inline void Config::clear_photo_gps_lapse_interval() {
  photo_gps_lapse_interval_ = 0;
}
inline double Config::photo_gps_lapse_interval() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_gps_lapse_interval)
  return photo_gps_lapse_interval_;
}
inline void Config::set_photo_gps_lapse_interval(double value) {
  
  photo_gps_lapse_interval_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_gps_lapse_interval)
}

// .arsdk.camera.PhotoStreamingMode photo_streaming_mode = 12;
inline void Config::clear_photo_streaming_mode() {
  photo_streaming_mode_ = 0;
}
inline ::arsdk::camera::PhotoStreamingMode Config::photo_streaming_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_streaming_mode)
  return static_cast< ::arsdk::camera::PhotoStreamingMode >(photo_streaming_mode_);
}
inline void Config::set_photo_streaming_mode(::arsdk::camera::PhotoStreamingMode value) {
  
  photo_streaming_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_streaming_mode)
}

// .arsdk.camera.VideoRecordingMode video_recording_mode = 13;
inline void Config::clear_video_recording_mode() {
  video_recording_mode_ = 0;
}
inline ::arsdk::camera::VideoRecordingMode Config::video_recording_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.video_recording_mode)
  return static_cast< ::arsdk::camera::VideoRecordingMode >(video_recording_mode_);
}
inline void Config::set_video_recording_mode(::arsdk::camera::VideoRecordingMode value) {
  
  video_recording_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.video_recording_mode)
}

// .arsdk.camera.DynamicRange video_recording_dynamic_range = 14;
inline void Config::clear_video_recording_dynamic_range() {
  video_recording_dynamic_range_ = 0;
}
inline ::arsdk::camera::DynamicRange Config::video_recording_dynamic_range() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.video_recording_dynamic_range)
  return static_cast< ::arsdk::camera::DynamicRange >(video_recording_dynamic_range_);
}
inline void Config::set_video_recording_dynamic_range(::arsdk::camera::DynamicRange value) {
  
  video_recording_dynamic_range_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.video_recording_dynamic_range)
}

// .arsdk.camera.VideoCodec video_recording_codec = 15;
inline void Config::clear_video_recording_codec() {
  video_recording_codec_ = 0;
}
inline ::arsdk::camera::VideoCodec Config::video_recording_codec() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.video_recording_codec)
  return static_cast< ::arsdk::camera::VideoCodec >(video_recording_codec_);
}
inline void Config::set_video_recording_codec(::arsdk::camera::VideoCodec value) {
  
  video_recording_codec_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.video_recording_codec)
}

// .arsdk.camera.VideoResolution video_recording_resolution = 16;
inline void Config::clear_video_recording_resolution() {
  video_recording_resolution_ = 0;
}
inline ::arsdk::camera::VideoResolution Config::video_recording_resolution() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.video_recording_resolution)
  return static_cast< ::arsdk::camera::VideoResolution >(video_recording_resolution_);
}
inline void Config::set_video_recording_resolution(::arsdk::camera::VideoResolution value) {
  
  video_recording_resolution_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.video_recording_resolution)
}

// .arsdk.camera.Framerate video_recording_framerate = 17;
inline void Config::clear_video_recording_framerate() {
  video_recording_framerate_ = 0;
}
inline ::arsdk::camera::Framerate Config::video_recording_framerate() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.video_recording_framerate)
  return static_cast< ::arsdk::camera::Framerate >(video_recording_framerate_);
}
inline void Config::set_video_recording_framerate(::arsdk::camera::Framerate value) {
  
  video_recording_framerate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.video_recording_framerate)
}

// .arsdk.camera.AudioRecordingMode audio_recording_mode = 19;
inline void Config::clear_audio_recording_mode() {
  audio_recording_mode_ = 0;
}
inline ::arsdk::camera::AudioRecordingMode Config::audio_recording_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.audio_recording_mode)
  return static_cast< ::arsdk::camera::AudioRecordingMode >(audio_recording_mode_);
}
inline void Config::set_audio_recording_mode(::arsdk::camera::AudioRecordingMode value) {
  
  audio_recording_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.audio_recording_mode)
}

// .arsdk.camera.ExposureMode exposure_mode = 22;
inline void Config::clear_exposure_mode() {
  exposure_mode_ = 0;
}
inline ::arsdk::camera::ExposureMode Config::exposure_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.exposure_mode)
  return static_cast< ::arsdk::camera::ExposureMode >(exposure_mode_);
}
inline void Config::set_exposure_mode(::arsdk::camera::ExposureMode value) {
  
  exposure_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.exposure_mode)
}

// .arsdk.camera.ShutterSpeed exposure_manual_shutter_speed = 23;
inline void Config::clear_exposure_manual_shutter_speed() {
  exposure_manual_shutter_speed_ = 0;
}
inline ::arsdk::camera::ShutterSpeed Config::exposure_manual_shutter_speed() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.exposure_manual_shutter_speed)
  return static_cast< ::arsdk::camera::ShutterSpeed >(exposure_manual_shutter_speed_);
}
inline void Config::set_exposure_manual_shutter_speed(::arsdk::camera::ShutterSpeed value) {
  
  exposure_manual_shutter_speed_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.exposure_manual_shutter_speed)
}

// .arsdk.camera.IsoSensitivity exposure_manual_iso_sensitivity = 24;
inline void Config::clear_exposure_manual_iso_sensitivity() {
  exposure_manual_iso_sensitivity_ = 0;
}
inline ::arsdk::camera::IsoSensitivity Config::exposure_manual_iso_sensitivity() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.exposure_manual_iso_sensitivity)
  return static_cast< ::arsdk::camera::IsoSensitivity >(exposure_manual_iso_sensitivity_);
}
inline void Config::set_exposure_manual_iso_sensitivity(::arsdk::camera::IsoSensitivity value) {
  
  exposure_manual_iso_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.exposure_manual_iso_sensitivity)
}

// .arsdk.camera.IsoSensitivity exposure_maximum_iso_sensitivity = 25;
inline void Config::clear_exposure_maximum_iso_sensitivity() {
  exposure_maximum_iso_sensitivity_ = 0;
}
inline ::arsdk::camera::IsoSensitivity Config::exposure_maximum_iso_sensitivity() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.exposure_maximum_iso_sensitivity)
  return static_cast< ::arsdk::camera::IsoSensitivity >(exposure_maximum_iso_sensitivity_);
}
inline void Config::set_exposure_maximum_iso_sensitivity(::arsdk::camera::IsoSensitivity value) {
  
  exposure_maximum_iso_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.exposure_maximum_iso_sensitivity)
}

// .arsdk.camera.WhiteBalanceMode white_balance_mode = 26;
inline void Config::clear_white_balance_mode() {
  white_balance_mode_ = 0;
}
inline ::arsdk::camera::WhiteBalanceMode Config::white_balance_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.white_balance_mode)
  return static_cast< ::arsdk::camera::WhiteBalanceMode >(white_balance_mode_);
}
inline void Config::set_white_balance_mode(::arsdk::camera::WhiteBalanceMode value) {
  
  white_balance_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.white_balance_mode)
}

// .arsdk.camera.WhiteBalanceTemperature white_balance_temperature = 27;
inline void Config::clear_white_balance_temperature() {
  white_balance_temperature_ = 0;
}
inline ::arsdk::camera::WhiteBalanceTemperature Config::white_balance_temperature() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.white_balance_temperature)
  return static_cast< ::arsdk::camera::WhiteBalanceTemperature >(white_balance_temperature_);
}
inline void Config::set_white_balance_temperature(::arsdk::camera::WhiteBalanceTemperature value) {
  
  white_balance_temperature_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.white_balance_temperature)
}

// .arsdk.camera.EvCompensation ev_compensation = 28;
inline void Config::clear_ev_compensation() {
  ev_compensation_ = 0;
}
inline ::arsdk::camera::EvCompensation Config::ev_compensation() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.ev_compensation)
  return static_cast< ::arsdk::camera::EvCompensation >(ev_compensation_);
}
inline void Config::set_ev_compensation(::arsdk::camera::EvCompensation value) {
  
  ev_compensation_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.ev_compensation)
}

// .arsdk.camera.ImageStyle image_style = 29;
inline void Config::clear_image_style() {
  image_style_ = 0;
}
inline ::arsdk::camera::ImageStyle Config::image_style() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.image_style)
  return static_cast< ::arsdk::camera::ImageStyle >(image_style_);
}
inline void Config::set_image_style(::arsdk::camera::ImageStyle value) {
  
  image_style_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.image_style)
}

// double image_contrast = 30;
inline void Config::clear_image_contrast() {
  image_contrast_ = 0;
}
inline double Config::image_contrast() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.image_contrast)
  return image_contrast_;
}
inline void Config::set_image_contrast(double value) {
  
  image_contrast_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.image_contrast)
}

// double image_saturation = 31;
inline void Config::clear_image_saturation() {
  image_saturation_ = 0;
}
inline double Config::image_saturation() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.image_saturation)
  return image_saturation_;
}
inline void Config::set_image_saturation(double value) {
  
  image_saturation_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.image_saturation)
}

// double image_sharpness = 32;
inline void Config::clear_image_sharpness() {
  image_sharpness_ = 0;
}
inline double Config::image_sharpness() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.image_sharpness)
  return image_sharpness_;
}
inline void Config::set_image_sharpness(double value) {
  
  image_sharpness_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.image_sharpness)
}

// double zoom_max_speed = 33;
inline void Config::clear_zoom_max_speed() {
  zoom_max_speed_ = 0;
}
inline double Config::zoom_max_speed() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.zoom_max_speed)
  return zoom_max_speed_;
}
inline void Config::set_zoom_max_speed(double value) {
  
  zoom_max_speed_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.zoom_max_speed)
}

// .arsdk.camera.ZoomVelocityControlQualityMode zoom_velocity_control_quality_mode = 34;
inline void Config::clear_zoom_velocity_control_quality_mode() {
  zoom_velocity_control_quality_mode_ = 0;
}
inline ::arsdk::camera::ZoomVelocityControlQualityMode Config::zoom_velocity_control_quality_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.zoom_velocity_control_quality_mode)
  return static_cast< ::arsdk::camera::ZoomVelocityControlQualityMode >(zoom_velocity_control_quality_mode_);
}
inline void Config::set_zoom_velocity_control_quality_mode(::arsdk::camera::ZoomVelocityControlQualityMode value) {
  
  zoom_velocity_control_quality_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.zoom_velocity_control_quality_mode)
}

// .arsdk.camera.AutoRecordMode auto_record_mode = 35;
inline void Config::clear_auto_record_mode() {
  auto_record_mode_ = 0;
}
inline ::arsdk::camera::AutoRecordMode Config::auto_record_mode() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.auto_record_mode)
  return static_cast< ::arsdk::camera::AutoRecordMode >(auto_record_mode_);
}
inline void Config::set_auto_record_mode(::arsdk::camera::AutoRecordMode value) {
  
  auto_record_mode_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.auto_record_mode)
}

// double alignment_offset_pitch = 36;
inline void Config::clear_alignment_offset_pitch() {
  alignment_offset_pitch_ = 0;
}
inline double Config::alignment_offset_pitch() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.alignment_offset_pitch)
  return alignment_offset_pitch_;
}
inline void Config::set_alignment_offset_pitch(double value) {
  
  alignment_offset_pitch_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.alignment_offset_pitch)
}

// double alignment_offset_roll = 37;
inline void Config::clear_alignment_offset_roll() {
  alignment_offset_roll_ = 0;
}
inline double Config::alignment_offset_roll() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.alignment_offset_roll)
  return alignment_offset_roll_;
}
inline void Config::set_alignment_offset_roll(double value) {
  
  alignment_offset_roll_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.alignment_offset_roll)
}

// double alignment_offset_yaw = 38;
inline void Config::clear_alignment_offset_yaw() {
  alignment_offset_yaw_ = 0;
}
inline double Config::alignment_offset_yaw() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.alignment_offset_yaw)
  return alignment_offset_yaw_;
}
inline void Config::set_alignment_offset_yaw(double value) {
  
  alignment_offset_yaw_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.alignment_offset_yaw)
}

// .arsdk.camera.DigitalSignature photo_signature = 39;
inline void Config::clear_photo_signature() {
  photo_signature_ = 0;
}
inline ::arsdk::camera::DigitalSignature Config::photo_signature() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.photo_signature)
  return static_cast< ::arsdk::camera::DigitalSignature >(photo_signature_);
}
inline void Config::set_photo_signature(::arsdk::camera::DigitalSignature value) {
  
  photo_signature_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.photo_signature)
}

// .arsdk.camera.ExposureMetering exposure_metering = 40;
inline void Config::clear_exposure_metering() {
  exposure_metering_ = 0;
}
inline ::arsdk::camera::ExposureMetering Config::exposure_metering() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.exposure_metering)
  return static_cast< ::arsdk::camera::ExposureMetering >(exposure_metering_);
}
inline void Config::set_exposure_metering(::arsdk::camera::ExposureMetering value) {
  
  exposure_metering_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.exposure_metering)
}

// .arsdk.camera.StoragePolicy storage_policy = 41;
inline void Config::clear_storage_policy() {
  storage_policy_ = 0;
}
inline ::arsdk::camera::StoragePolicy Config::storage_policy() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.storage_policy)
  return static_cast< ::arsdk::camera::StoragePolicy >(storage_policy_);
}
inline void Config::set_storage_policy(::arsdk::camera::StoragePolicy value) {
  
  storage_policy_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.storage_policy)
}

// uint32 video_recording_bitrate = 42;
inline void Config::clear_video_recording_bitrate() {
  video_recording_bitrate_ = 0u;
}
inline ::google::protobuf::uint32 Config::video_recording_bitrate() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.Config.video_recording_bitrate)
  return video_recording_bitrate_;
}
inline void Config::set_video_recording_bitrate(::google::protobuf::uint32 value) {
  
  video_recording_bitrate_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.Config.video_recording_bitrate)
}

// -------------------------------------------------------------------

// DoubleRange

// double min = 1;
inline void DoubleRange::clear_min() {
  min_ = 0;
}
inline double DoubleRange::min() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.DoubleRange.min)
  return min_;
}
inline void DoubleRange::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.DoubleRange.min)
}

// double max = 2;
inline void DoubleRange::clear_max() {
  max_ = 0;
}
inline double DoubleRange::max() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.DoubleRange.max)
  return max_;
}
inline void DoubleRange::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.DoubleRange.max)
}

// -------------------------------------------------------------------

// ExposureRoi_Center

// double x = 1;
inline void ExposureRoi_Center::clear_x() {
  x_ = 0;
}
inline double ExposureRoi_Center::x() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.ExposureRoi.Center.x)
  return x_;
}
inline void ExposureRoi_Center::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.ExposureRoi.Center.x)
}

// double y = 2;
inline void ExposureRoi_Center::clear_y() {
  y_ = 0;
}
inline double ExposureRoi_Center::y() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.ExposureRoi.Center.y)
  return y_;
}
inline void ExposureRoi_Center::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.ExposureRoi.Center.y)
}

// -------------------------------------------------------------------

// ExposureRoi

// .arsdk.camera.ExposureRoi.Center center = 1;
inline bool ExposureRoi::has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline void ExposureRoi::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::arsdk::camera::ExposureRoi_Center& ExposureRoi::center() const {
  const ::arsdk::camera::ExposureRoi_Center* p = center_;
  // @@protoc_insertion_point(field_get:arsdk.camera.ExposureRoi.center)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::camera::ExposureRoi_Center*>(
      &::arsdk::camera::_ExposureRoi_Center_default_instance_);
}
inline ::arsdk::camera::ExposureRoi_Center* ExposureRoi::release_center() {
  // @@protoc_insertion_point(field_release:arsdk.camera.ExposureRoi.center)
  
  ::arsdk::camera::ExposureRoi_Center* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::arsdk::camera::ExposureRoi_Center* ExposureRoi::mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::camera::ExposureRoi_Center>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.camera.ExposureRoi.center)
  return center_;
}
inline void ExposureRoi::set_allocated_center(::arsdk::camera::ExposureRoi_Center* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.ExposureRoi.center)
}

// double width = 2;
inline void ExposureRoi::clear_width() {
  width_ = 0;
}
inline double ExposureRoi::width() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.ExposureRoi.width)
  return width_;
}
inline void ExposureRoi::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.ExposureRoi.width)
}

// double height = 3;
inline void ExposureRoi::clear_height() {
  height_ = 0;
}
inline double ExposureRoi::height() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.ExposureRoi.height)
  return height_;
}
inline void ExposureRoi::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:arsdk.camera.ExposureRoi.height)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MediaMetadata

// map<uint32, .google.protobuf.Empty> selected_fields = 1;
inline int MediaMetadata::selected_fields_size() const {
  return selected_fields_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >&
MediaMetadata::selected_fields() const {
  // @@protoc_insertion_point(field_map:arsdk.camera.MediaMetadata.selected_fields)
  return selected_fields_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::Empty >*
MediaMetadata::mutable_selected_fields() {
  // @@protoc_insertion_point(field_mutable_map:arsdk.camera.MediaMetadata.selected_fields)
  return selected_fields_.MutableMap();
}

// string copyright = 2;
inline void MediaMetadata::clear_copyright() {
  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaMetadata::copyright() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.MediaMetadata.copyright)
  return copyright_.GetNoArena();
}
inline void MediaMetadata::set_copyright(const ::std::string& value) {
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.camera.MediaMetadata.copyright)
}
#if LANG_CXX11
inline void MediaMetadata::set_copyright(::std::string&& value) {
  
  copyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.camera.MediaMetadata.copyright)
}
#endif
inline void MediaMetadata::set_copyright(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.camera.MediaMetadata.copyright)
}
inline void MediaMetadata::set_copyright(const char* value, size_t size) {
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.camera.MediaMetadata.copyright)
}
inline ::std::string* MediaMetadata::mutable_copyright() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.camera.MediaMetadata.copyright)
  return copyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaMetadata::release_copyright() {
  // @@protoc_insertion_point(field_release:arsdk.camera.MediaMetadata.copyright)
  
  return copyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaMetadata::set_allocated_copyright(::std::string* copyright) {
  if (copyright != nullptr) {
    
  } else {
    
  }
  copyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copyright);
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.MediaMetadata.copyright)
}

// string custom_id = 3;
inline void MediaMetadata::clear_custom_id() {
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaMetadata::custom_id() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.MediaMetadata.custom_id)
  return custom_id_.GetNoArena();
}
inline void MediaMetadata::set_custom_id(const ::std::string& value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.camera.MediaMetadata.custom_id)
}
#if LANG_CXX11
inline void MediaMetadata::set_custom_id(::std::string&& value) {
  
  custom_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.camera.MediaMetadata.custom_id)
}
#endif
inline void MediaMetadata::set_custom_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.camera.MediaMetadata.custom_id)
}
inline void MediaMetadata::set_custom_id(const char* value, size_t size) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.camera.MediaMetadata.custom_id)
}
inline ::std::string* MediaMetadata::mutable_custom_id() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.camera.MediaMetadata.custom_id)
  return custom_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaMetadata::release_custom_id() {
  // @@protoc_insertion_point(field_release:arsdk.camera.MediaMetadata.custom_id)
  
  return custom_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaMetadata::set_allocated_custom_id(::std::string* custom_id) {
  if (custom_id != nullptr) {
    
  } else {
    
  }
  custom_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_id);
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.MediaMetadata.custom_id)
}

// string custom_title = 4;
inline void MediaMetadata::clear_custom_title() {
  custom_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaMetadata::custom_title() const {
  // @@protoc_insertion_point(field_get:arsdk.camera.MediaMetadata.custom_title)
  return custom_title_.GetNoArena();
}
inline void MediaMetadata::set_custom_title(const ::std::string& value) {
  
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.camera.MediaMetadata.custom_title)
}
#if LANG_CXX11
inline void MediaMetadata::set_custom_title(::std::string&& value) {
  
  custom_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.camera.MediaMetadata.custom_title)
}
#endif
inline void MediaMetadata::set_custom_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.camera.MediaMetadata.custom_title)
}
inline void MediaMetadata::set_custom_title(const char* value, size_t size) {
  
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.camera.MediaMetadata.custom_title)
}
inline ::std::string* MediaMetadata::mutable_custom_title() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.camera.MediaMetadata.custom_title)
  return custom_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaMetadata::release_custom_title() {
  // @@protoc_insertion_point(field_release:arsdk.camera.MediaMetadata.custom_title)
  
  return custom_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaMetadata::set_allocated_custom_title(::std::string* custom_title) {
  if (custom_title != nullptr) {
    
  } else {
    
  }
  custom_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_title);
  // @@protoc_insertion_point(field_set_allocated:arsdk.camera.MediaMetadata.custom_title)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace camera
}  // namespace arsdk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::arsdk::camera::AudioRecordingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::AudioRecordingMode>() {
  return ::arsdk::camera::AudioRecordingMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::AutoRecordMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::AutoRecordMode>() {
  return ::arsdk::camera::AutoRecordMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::BracketingPreset> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::BracketingPreset>() {
  return ::arsdk::camera::BracketingPreset_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::BurstValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::BurstValue>() {
  return ::arsdk::camera::BurstValue_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::CameraMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::CameraMode>() {
  return ::arsdk::camera::CameraMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::CameraModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::CameraModel>() {
  return ::arsdk::camera::CameraModel_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::DigitalSignature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::DigitalSignature>() {
  return ::arsdk::camera::DigitalSignature_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::DynamicRange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::DynamicRange>() {
  return ::arsdk::camera::DynamicRange_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::EvCompensation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::EvCompensation>() {
  return ::arsdk::camera::EvCompensation_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ExposureLockMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ExposureLockMode>() {
  return ::arsdk::camera::ExposureLockMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ExposureMetering> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ExposureMetering>() {
  return ::arsdk::camera::ExposureMetering_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ExposureMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ExposureMode>() {
  return ::arsdk::camera::ExposureMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::Framerate> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::Framerate>() {
  return ::arsdk::camera::Framerate_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ImageStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ImageStyle>() {
  return ::arsdk::camera::ImageStyle_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::IsoSensitivity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::IsoSensitivity>() {
  return ::arsdk::camera::IsoSensitivity_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoState>() {
  return ::arsdk::camera::PhotoState_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoEvent>() {
  return ::arsdk::camera::PhotoEvent_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoFileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoFileFormat>() {
  return ::arsdk::camera::PhotoFileFormat_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoFormat>() {
  return ::arsdk::camera::PhotoFormat_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoMode>() {
  return ::arsdk::camera::PhotoMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoResolution> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoResolution>() {
  return ::arsdk::camera::PhotoResolution_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoStopReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoStopReason>() {
  return ::arsdk::camera::PhotoStopReason_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::PhotoStreamingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::PhotoStreamingMode>() {
  return ::arsdk::camera::PhotoStreamingMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::RecordingEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::RecordingEvent>() {
  return ::arsdk::camera::RecordingEvent_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::RecordingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::RecordingState>() {
  return ::arsdk::camera::RecordingState_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::RecordingStopReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::RecordingStopReason>() {
  return ::arsdk::camera::RecordingStopReason_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::VideoRecordingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::VideoRecordingMode>() {
  return ::arsdk::camera::VideoRecordingMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ShutterSpeed> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ShutterSpeed>() {
  return ::arsdk::camera::ShutterSpeed_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::StoragePolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::StoragePolicy>() {
  return ::arsdk::camera::StoragePolicy_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::StorageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::StorageType>() {
  return ::arsdk::camera::StorageType_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::VideoCodec> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::VideoCodec>() {
  return ::arsdk::camera::VideoCodec_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::VideoResolution> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::VideoResolution>() {
  return ::arsdk::camera::VideoResolution_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::WhiteBalanceLockMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::WhiteBalanceLockMode>() {
  return ::arsdk::camera::WhiteBalanceLockMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::WhiteBalanceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::WhiteBalanceMode>() {
  return ::arsdk::camera::WhiteBalanceMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::WhiteBalanceTemperature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::WhiteBalanceTemperature>() {
  return ::arsdk::camera::WhiteBalanceTemperature_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ZoomControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ZoomControlMode>() {
  return ::arsdk::camera::ZoomControlMode_descriptor();
}
template <> struct is_proto_enum< ::arsdk::camera::ZoomVelocityControlQualityMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::camera::ZoomVelocityControlQualityMode>() {
  return ::arsdk::camera::ZoomVelocityControlQualityMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fcamera2_2eproto
