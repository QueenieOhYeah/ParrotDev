// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/antenna.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fantenna_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fantenna_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fantenna_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fantenna_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fantenna_2eproto();
namespace arsdk {
namespace antenna {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_GetState;
class Command_GetStateDefaultTypeInternal;
extern Command_GetStateDefaultTypeInternal _Command_GetState_default_instance_;
class Command_SetAntennaType;
class Command_SetAntennaTypeDefaultTypeInternal;
extern Command_SetAntennaTypeDefaultTypeInternal _Command_SetAntennaType_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_State;
class Event_StateDefaultTypeInternal;
extern Event_StateDefaultTypeInternal _Event_State_default_instance_;
}  // namespace antenna
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::antenna::Capabilities* Arena::CreateMaybeMessage<::arsdk::antenna::Capabilities>(Arena*);
template<> ::arsdk::antenna::Command* Arena::CreateMaybeMessage<::arsdk::antenna::Command>(Arena*);
template<> ::arsdk::antenna::Command_GetState* Arena::CreateMaybeMessage<::arsdk::antenna::Command_GetState>(Arena*);
template<> ::arsdk::antenna::Command_SetAntennaType* Arena::CreateMaybeMessage<::arsdk::antenna::Command_SetAntennaType>(Arena*);
template<> ::arsdk::antenna::Event* Arena::CreateMaybeMessage<::arsdk::antenna::Event>(Arena*);
template<> ::arsdk::antenna::Event_State* Arena::CreateMaybeMessage<::arsdk::antenna::Event_State>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace antenna {

enum AntennaType {
  ANTENNA_TYPE_INTERNAL = 0,
  ANTENNA_TYPE_EXTERNAL = 1,
  AntennaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  AntennaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool AntennaType_IsValid(int value);
const AntennaType AntennaType_MIN = ANTENNA_TYPE_INTERNAL;
const AntennaType AntennaType_MAX = ANTENNA_TYPE_EXTERNAL;
const int AntennaType_ARRAYSIZE = AntennaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AntennaType_descriptor();
inline const ::std::string& AntennaType_Name(AntennaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AntennaType_descriptor(), value);
}
inline bool AntennaType_Parse(
    const ::std::string& name, AntennaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AntennaType>(
    AntennaType_descriptor(), name, value);
}
// ===================================================================

class Command_GetState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antenna.Command.GetState) */ {
 public:
  Command_GetState();
  virtual ~Command_GetState();

  Command_GetState(const Command_GetState& from);

  inline Command_GetState& operator=(const Command_GetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_GetState(Command_GetState&& from) noexcept
    : Command_GetState() {
    *this = ::std::move(from);
  }

  inline Command_GetState& operator=(Command_GetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_GetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_GetState* internal_default_instance() {
    return reinterpret_cast<const Command_GetState*>(
               &_Command_GetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_GetState* other);
  friend void swap(Command_GetState& a, Command_GetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_GetState* New() const final {
    return CreateMaybeMessage<Command_GetState>(nullptr);
  }

  Command_GetState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_GetState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_GetState& from);
  void MergeFrom(const Command_GetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_GetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool include_default_capabilities = 1;
  void clear_include_default_capabilities();
  static const int kIncludeDefaultCapabilitiesFieldNumber = 1;
  bool include_default_capabilities() const;
  void set_include_default_capabilities(bool value);

  // @@protoc_insertion_point(class_scope:arsdk.antenna.Command.GetState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_default_capabilities_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fantenna_2eproto;
};
// -------------------------------------------------------------------

class Command_SetAntennaType :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antenna.Command.SetAntennaType) */ {
 public:
  Command_SetAntennaType();
  virtual ~Command_SetAntennaType();

  Command_SetAntennaType(const Command_SetAntennaType& from);

  inline Command_SetAntennaType& operator=(const Command_SetAntennaType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetAntennaType(Command_SetAntennaType&& from) noexcept
    : Command_SetAntennaType() {
    *this = ::std::move(from);
  }

  inline Command_SetAntennaType& operator=(Command_SetAntennaType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetAntennaType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetAntennaType* internal_default_instance() {
    return reinterpret_cast<const Command_SetAntennaType*>(
               &_Command_SetAntennaType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command_SetAntennaType* other);
  friend void swap(Command_SetAntennaType& a, Command_SetAntennaType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetAntennaType* New() const final {
    return CreateMaybeMessage<Command_SetAntennaType>(nullptr);
  }

  Command_SetAntennaType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetAntennaType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetAntennaType& from);
  void MergeFrom(const Command_SetAntennaType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetAntennaType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.antenna.AntennaType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::arsdk::antenna::AntennaType type() const;
  void set_type(::arsdk::antenna::AntennaType value);

  // @@protoc_insertion_point(class_scope:arsdk.antenna.Command.SetAntennaType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fantenna_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antenna.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kGetState = 16,
    kSetAntennaType = 17,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_GetState GetState;
  typedef Command_SetAntennaType SetAntennaType;

  // accessors -------------------------------------------------------

  // .arsdk.antenna.Command.GetState get_state = 16;
  bool has_get_state() const;
  void clear_get_state();
  static const int kGetStateFieldNumber = 16;
  const ::arsdk::antenna::Command_GetState& get_state() const;
  ::arsdk::antenna::Command_GetState* release_get_state();
  ::arsdk::antenna::Command_GetState* mutable_get_state();
  void set_allocated_get_state(::arsdk::antenna::Command_GetState* get_state);

  // .arsdk.antenna.Command.SetAntennaType set_antenna_type = 17;
  bool has_set_antenna_type() const;
  void clear_set_antenna_type();
  static const int kSetAntennaTypeFieldNumber = 17;
  const ::arsdk::antenna::Command_SetAntennaType& set_antenna_type() const;
  ::arsdk::antenna::Command_SetAntennaType* release_set_antenna_type();
  ::arsdk::antenna::Command_SetAntennaType* mutable_set_antenna_type();
  void set_allocated_set_antenna_type(::arsdk::antenna::Command_SetAntennaType* set_antenna_type);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.antenna.Command)
 private:
  class HasBitSetters;
  void set_has_get_state();
  void set_has_set_antenna_type();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::antenna::Command_GetState* get_state_;
    ::arsdk::antenna::Command_SetAntennaType* set_antenna_type_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fantenna_2eproto;
};
// -------------------------------------------------------------------

class Event_State :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antenna.Event.State) */ {
 public:
  Event_State();
  virtual ~Event_State();

  Event_State(const Event_State& from);

  inline Event_State& operator=(const Event_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State(Event_State&& from) noexcept
    : Event_State() {
    *this = ::std::move(from);
  }

  inline Event_State& operator=(Event_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State& default_instance();

  enum OptionalAntennaTypeCase {
    kAntennaType = 2,
    OPTIONAL_ANTENNA_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State* internal_default_instance() {
    return reinterpret_cast<const Event_State*>(
               &_Event_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Event_State* other);
  friend void swap(Event_State& a, Event_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State* New() const final {
    return CreateMaybeMessage<Event_State>(nullptr);
  }

  Event_State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State& from);
  void MergeFrom(const Event_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.antenna.Capabilities default_capabilities = 1;
  bool has_default_capabilities() const;
  void clear_default_capabilities();
  static const int kDefaultCapabilitiesFieldNumber = 1;
  const ::arsdk::antenna::Capabilities& default_capabilities() const;
  ::arsdk::antenna::Capabilities* release_default_capabilities();
  ::arsdk::antenna::Capabilities* mutable_default_capabilities();
  void set_allocated_default_capabilities(::arsdk::antenna::Capabilities* default_capabilities);

  // .arsdk.antenna.AntennaType antenna_type = 2;
  private:
  bool has_antenna_type() const;
  public:
  void clear_antenna_type();
  static const int kAntennaTypeFieldNumber = 2;
  ::arsdk::antenna::AntennaType antenna_type() const;
  void set_antenna_type(::arsdk::antenna::AntennaType value);

  void clear_optional_antenna_type();
  OptionalAntennaTypeCase optional_antenna_type_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.antenna.Event.State)
 private:
  class HasBitSetters;
  void set_has_antenna_type();

  inline bool has_optional_antenna_type() const;
  inline void clear_has_optional_antenna_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::antenna::Capabilities* default_capabilities_;
  union OptionalAntennaTypeUnion {
    OptionalAntennaTypeUnion() {}
    int antenna_type_;
  } optional_antenna_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fantenna_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antenna.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kState = 16,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_State State;

  // accessors -------------------------------------------------------

  // .arsdk.antenna.Event.State state = 16;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 16;
  const ::arsdk::antenna::Event_State& state() const;
  ::arsdk::antenna::Event_State* release_state();
  ::arsdk::antenna::Event_State* mutable_state();
  void set_allocated_state(::arsdk::antenna::Event_State* state);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.antenna.Event)
 private:
  class HasBitSetters;
  void set_has_state();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::antenna::Event_State* state_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fantenna_2eproto;
};
// -------------------------------------------------------------------

class Capabilities :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.antenna.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Capabilities* other);
  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities* New() const final {
    return CreateMaybeMessage<Capabilities>(nullptr);
  }

  Capabilities* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .arsdk.antenna.AntennaType supported_antenna_types = 1;
  int supported_antenna_types_size() const;
  void clear_supported_antenna_types();
  static const int kSupportedAntennaTypesFieldNumber = 1;
  ::arsdk::antenna::AntennaType supported_antenna_types(int index) const;
  void set_supported_antenna_types(int index, ::arsdk::antenna::AntennaType value);
  void add_supported_antenna_types(::arsdk::antenna::AntennaType value);
  const ::google::protobuf::RepeatedField<int>& supported_antenna_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_antenna_types();

  // @@protoc_insertion_point(class_scope:arsdk.antenna.Capabilities)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supported_antenna_types_;
  mutable std::atomic<int> _supported_antenna_types_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fantenna_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_GetState

// bool include_default_capabilities = 1;
inline void Command_GetState::clear_include_default_capabilities() {
  include_default_capabilities_ = false;
}
inline bool Command_GetState::include_default_capabilities() const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Command.GetState.include_default_capabilities)
  return include_default_capabilities_;
}
inline void Command_GetState::set_include_default_capabilities(bool value) {
  
  include_default_capabilities_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antenna.Command.GetState.include_default_capabilities)
}

// -------------------------------------------------------------------

// Command_SetAntennaType

// .arsdk.antenna.AntennaType type = 1;
inline void Command_SetAntennaType::clear_type() {
  type_ = 0;
}
inline ::arsdk::antenna::AntennaType Command_SetAntennaType::type() const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Command.SetAntennaType.type)
  return static_cast< ::arsdk::antenna::AntennaType >(type_);
}
inline void Command_SetAntennaType::set_type(::arsdk::antenna::AntennaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antenna.Command.SetAntennaType.type)
}

// -------------------------------------------------------------------

// Command

// .arsdk.antenna.Command.GetState get_state = 16;
inline bool Command::has_get_state() const {
  return id_case() == kGetState;
}
inline void Command::set_has_get_state() {
  _oneof_case_[0] = kGetState;
}
inline void Command::clear_get_state() {
  if (has_get_state()) {
    delete id_.get_state_;
    clear_has_id();
  }
}
inline ::arsdk::antenna::Command_GetState* Command::release_get_state() {
  // @@protoc_insertion_point(field_release:arsdk.antenna.Command.get_state)
  if (has_get_state()) {
    clear_has_id();
      ::arsdk::antenna::Command_GetState* temp = id_.get_state_;
    id_.get_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::antenna::Command_GetState& Command::get_state() const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Command.get_state)
  return has_get_state()
      ? *id_.get_state_
      : *reinterpret_cast< ::arsdk::antenna::Command_GetState*>(&::arsdk::antenna::_Command_GetState_default_instance_);
}
inline ::arsdk::antenna::Command_GetState* Command::mutable_get_state() {
  if (!has_get_state()) {
    clear_id();
    set_has_get_state();
    id_.get_state_ = CreateMaybeMessage< ::arsdk::antenna::Command_GetState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antenna.Command.get_state)
  return id_.get_state_;
}

// .arsdk.antenna.Command.SetAntennaType set_antenna_type = 17;
inline bool Command::has_set_antenna_type() const {
  return id_case() == kSetAntennaType;
}
inline void Command::set_has_set_antenna_type() {
  _oneof_case_[0] = kSetAntennaType;
}
inline void Command::clear_set_antenna_type() {
  if (has_set_antenna_type()) {
    delete id_.set_antenna_type_;
    clear_has_id();
  }
}
inline ::arsdk::antenna::Command_SetAntennaType* Command::release_set_antenna_type() {
  // @@protoc_insertion_point(field_release:arsdk.antenna.Command.set_antenna_type)
  if (has_set_antenna_type()) {
    clear_has_id();
      ::arsdk::antenna::Command_SetAntennaType* temp = id_.set_antenna_type_;
    id_.set_antenna_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::antenna::Command_SetAntennaType& Command::set_antenna_type() const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Command.set_antenna_type)
  return has_set_antenna_type()
      ? *id_.set_antenna_type_
      : *reinterpret_cast< ::arsdk::antenna::Command_SetAntennaType*>(&::arsdk::antenna::_Command_SetAntennaType_default_instance_);
}
inline ::arsdk::antenna::Command_SetAntennaType* Command::mutable_set_antenna_type() {
  if (!has_set_antenna_type()) {
    clear_id();
    set_has_set_antenna_type();
    id_.set_antenna_type_ = CreateMaybeMessage< ::arsdk::antenna::Command_SetAntennaType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antenna.Command.set_antenna_type)
  return id_.set_antenna_type_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_State

// .arsdk.antenna.Capabilities default_capabilities = 1;
inline bool Event_State::has_default_capabilities() const {
  return this != internal_default_instance() && default_capabilities_ != nullptr;
}
inline void Event_State::clear_default_capabilities() {
  if (GetArenaNoVirtual() == nullptr && default_capabilities_ != nullptr) {
    delete default_capabilities_;
  }
  default_capabilities_ = nullptr;
}
inline const ::arsdk::antenna::Capabilities& Event_State::default_capabilities() const {
  const ::arsdk::antenna::Capabilities* p = default_capabilities_;
  // @@protoc_insertion_point(field_get:arsdk.antenna.Event.State.default_capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::antenna::Capabilities*>(
      &::arsdk::antenna::_Capabilities_default_instance_);
}
inline ::arsdk::antenna::Capabilities* Event_State::release_default_capabilities() {
  // @@protoc_insertion_point(field_release:arsdk.antenna.Event.State.default_capabilities)
  
  ::arsdk::antenna::Capabilities* temp = default_capabilities_;
  default_capabilities_ = nullptr;
  return temp;
}
inline ::arsdk::antenna::Capabilities* Event_State::mutable_default_capabilities() {
  
  if (default_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::antenna::Capabilities>(GetArenaNoVirtual());
    default_capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antenna.Event.State.default_capabilities)
  return default_capabilities_;
}
inline void Event_State::set_allocated_default_capabilities(::arsdk::antenna::Capabilities* default_capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_capabilities_;
  }
  if (default_capabilities) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  default_capabilities_ = default_capabilities;
  // @@protoc_insertion_point(field_set_allocated:arsdk.antenna.Event.State.default_capabilities)
}

// .arsdk.antenna.AntennaType antenna_type = 2;
inline bool Event_State::has_antenna_type() const {
  return optional_antenna_type_case() == kAntennaType;
}
inline void Event_State::set_has_antenna_type() {
  _oneof_case_[0] = kAntennaType;
}
inline void Event_State::clear_antenna_type() {
  if (has_antenna_type()) {
    optional_antenna_type_.antenna_type_ = 0;
    clear_has_optional_antenna_type();
  }
}
inline ::arsdk::antenna::AntennaType Event_State::antenna_type() const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Event.State.antenna_type)
  if (has_antenna_type()) {
    return static_cast< ::arsdk::antenna::AntennaType >(optional_antenna_type_.antenna_type_);
  }
  return static_cast< ::arsdk::antenna::AntennaType >(0);
}
inline void Event_State::set_antenna_type(::arsdk::antenna::AntennaType value) {
  if (!has_antenna_type()) {
    clear_optional_antenna_type();
    set_has_antenna_type();
  }
  optional_antenna_type_.antenna_type_ = value;
  // @@protoc_insertion_point(field_set:arsdk.antenna.Event.State.antenna_type)
}

inline bool Event_State::has_optional_antenna_type() const {
  return optional_antenna_type_case() != OPTIONAL_ANTENNA_TYPE_NOT_SET;
}
inline void Event_State::clear_has_optional_antenna_type() {
  _oneof_case_[0] = OPTIONAL_ANTENNA_TYPE_NOT_SET;
}
inline Event_State::OptionalAntennaTypeCase Event_State::optional_antenna_type_case() const {
  return Event_State::OptionalAntennaTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .arsdk.antenna.Event.State state = 16;
inline bool Event::has_state() const {
  return id_case() == kState;
}
inline void Event::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Event::clear_state() {
  if (has_state()) {
    delete id_.state_;
    clear_has_id();
  }
}
inline ::arsdk::antenna::Event_State* Event::release_state() {
  // @@protoc_insertion_point(field_release:arsdk.antenna.Event.state)
  if (has_state()) {
    clear_has_id();
      ::arsdk::antenna::Event_State* temp = id_.state_;
    id_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::antenna::Event_State& Event::state() const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Event.state)
  return has_state()
      ? *id_.state_
      : *reinterpret_cast< ::arsdk::antenna::Event_State*>(&::arsdk::antenna::_Event_State_default_instance_);
}
inline ::arsdk::antenna::Event_State* Event::mutable_state() {
  if (!has_state()) {
    clear_id();
    set_has_state();
    id_.state_ = CreateMaybeMessage< ::arsdk::antenna::Event_State >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.antenna.Event.state)
  return id_.state_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Capabilities

// repeated .arsdk.antenna.AntennaType supported_antenna_types = 1;
inline int Capabilities::supported_antenna_types_size() const {
  return supported_antenna_types_.size();
}
inline void Capabilities::clear_supported_antenna_types() {
  supported_antenna_types_.Clear();
}
inline ::arsdk::antenna::AntennaType Capabilities::supported_antenna_types(int index) const {
  // @@protoc_insertion_point(field_get:arsdk.antenna.Capabilities.supported_antenna_types)
  return static_cast< ::arsdk::antenna::AntennaType >(supported_antenna_types_.Get(index));
}
inline void Capabilities::set_supported_antenna_types(int index, ::arsdk::antenna::AntennaType value) {
  supported_antenna_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:arsdk.antenna.Capabilities.supported_antenna_types)
}
inline void Capabilities::add_supported_antenna_types(::arsdk::antenna::AntennaType value) {
  supported_antenna_types_.Add(value);
  // @@protoc_insertion_point(field_add:arsdk.antenna.Capabilities.supported_antenna_types)
}
inline const ::google::protobuf::RepeatedField<int>&
Capabilities::supported_antenna_types() const {
  // @@protoc_insertion_point(field_list:arsdk.antenna.Capabilities.supported_antenna_types)
  return supported_antenna_types_;
}
inline ::google::protobuf::RepeatedField<int>*
Capabilities::mutable_supported_antenna_types() {
  // @@protoc_insertion_point(field_mutable_list:arsdk.antenna.Capabilities.supported_antenna_types)
  return &supported_antenna_types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace antenna
}  // namespace arsdk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::arsdk::antenna::AntennaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arsdk::antenna::AntennaType>() {
  return ::arsdk::antenna::AntennaType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fantenna_2eproto
