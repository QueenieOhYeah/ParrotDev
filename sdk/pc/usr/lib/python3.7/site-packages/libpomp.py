# -*- coding: utf-8 -*-
#
# TARGET arch is: ['-target', 'x86_64', '', '-I/usr/lib/gcc/x86_64-linux-gnu/9/include', '-I/usr/local/include', '-I/usr/include/x86_64-linux-gnu', '-I/usr/include', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/out/anafi2-pc_airsdk/build/libpomp', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/packages/libpomp', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/packages/ulog/libulog/include', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/packages/libpomp/include', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/out/anafi2-pc_airsdk/staging/usr/include/x86_64-linux-gnu', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/out/anafi2-pc_airsdk/staging/usr/include', '-pipe', '-O2', '-g', '-ffunction-sections', '-DALCHEMY_BUILD', '-m64', '-fPIC', '-msse', '-msse2', '-mssse3', '-fvisibility=hidden', '-DPOMP_API_EXPORTS', '-DBUILD_LIBULOG', '-D__PYBINDING_MACRO__=1', '-fno-unsigned-char', '']
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes


class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        for (field, *_) in cls._fields_:  # noqa
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                if not hasattr(type_, "as_dict"):
                    value = [v for v in value]
                else:
                    type_ = type_._type_
                    value = [type_.as_dict(v) for v in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    # use a closure to capture the callback from the loop scope
                    fields[name] = (
                        type_((lambda callback: lambda *args: callback(*args))(
                            bound_fields[name]))
                    )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



_libraries = {}
_libraries['libpomp.so'] = ctypes.CDLL('libpomp.so')
# if local wordsize is same as target, keep ctypes pointer function.
if ctypes.sizeof(ctypes.c_void_p) == 8:
    POINTER_T = ctypes.POINTER
else:
    # required to access _ctypes
    import _ctypes
    # Emulate a pointer class using the approriate c_int32/c_int64 type
    # The new class should have :
    # ['__module__', 'from_param', '_type_', '__dict__', '__weakref__', '__doc__']
    # but the class should be submitted to a unique instance for each base type
    # to that if A == B, POINTER_T(A) == POINTER_T(B)
    ctypes._pointer_t_type_cache = {}
    def POINTER_T(pointee):
        # a pointer should have the same length as LONG
        fake_ptr_base_type = ctypes.c_uint64 
        # specific case for c_void_p
        if pointee is None: # VOID pointer type. c_void_p.
            pointee = type(None) # ctypes.c_void_p # ctypes.c_ulong
            clsname = 'c_void'
        else:
            clsname = pointee.__name__
        if clsname in ctypes._pointer_t_type_cache:
            return ctypes._pointer_t_type_cache[clsname]
        # make template
        class _T(_ctypes._SimpleCData,):
            _type_ = 'L'
            _subtype_ = pointee
            def _sub_addr_(self):
                return self.value
            def __repr__(self):
                return '%s(%d)'%(clsname, self.value)
            def contents(self):
                raise TypeError('This is not a ctypes pointer.')
            def __init__(self, **args):
                raise TypeError('This is not a ctypes pointer. It is not instanciable.')
        _class = type('LP_%d_%s'%(8, clsname), (_T,),{}) 
        ctypes._pointer_t_type_cache[clsname] = _class
        return _class

def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, POINTER_T(ctypes.c_char))



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16



class struct_pomp_ctx(Structure):
    pass

class struct_pomp_conn(Structure):
    pass

class struct_pomp_buffer(Structure):
    pass

class struct_pomp_msg(Structure):
    pass

class struct_pomp_loop(Structure):
    pass

class struct_pomp_evt(Structure):
    pass

class struct_pomp_timer(Structure):
    pass

class struct_pomp_sockaddr_storage(Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('__data', ctypes.c_char * 128),
     ]


# values for enumeration 'pomp_event'
pomp_event__enumvalues = {
    0: 'POMP_EVENT_CONNECTED',
    1: 'POMP_EVENT_DISCONNECTED',
    2: 'POMP_EVENT_MSG',
}
POMP_EVENT_CONNECTED = 0
POMP_EVENT_DISCONNECTED = 1
POMP_EVENT_MSG = 2
pomp_event = ctypes.c_int # enum
pomp_event_str = _libraries['libpomp.so'].pomp_event_str
pomp_event_str.restype = POINTER_T(ctypes.c_char)
pomp_event_str.argtypes = [pomp_event]

# values for enumeration 'pomp_fd_event'
pomp_fd_event__enumvalues = {
    1: 'POMP_FD_EVENT_IN',
    2: 'POMP_FD_EVENT_PRI',
    4: 'POMP_FD_EVENT_OUT',
    8: 'POMP_FD_EVENT_ERR',
    16: 'POMP_FD_EVENT_HUP',
}
POMP_FD_EVENT_IN = 1
POMP_FD_EVENT_PRI = 2
POMP_FD_EVENT_OUT = 4
POMP_FD_EVENT_ERR = 8
POMP_FD_EVENT_HUP = 16
pomp_fd_event = ctypes.c_int # enum

# values for enumeration 'pomp_socket_kind'
pomp_socket_kind__enumvalues = {
    0: 'POMP_SOCKET_KIND_SERVER',
    1: 'POMP_SOCKET_KIND_PEER',
    2: 'POMP_SOCKET_KIND_CLIENT',
    3: 'POMP_SOCKET_KIND_DGRAM',
}
POMP_SOCKET_KIND_SERVER = 0
POMP_SOCKET_KIND_PEER = 1
POMP_SOCKET_KIND_CLIENT = 2
POMP_SOCKET_KIND_DGRAM = 3
pomp_socket_kind = ctypes.c_int # enum
pomp_socket_kind_str = _libraries['libpomp.so'].pomp_socket_kind_str
pomp_socket_kind_str.restype = POINTER_T(ctypes.c_char)
pomp_socket_kind_str.argtypes = [pomp_socket_kind]

# values for enumeration 'pomp_send_status'
pomp_send_status__enumvalues = {
    1: 'POMP_SEND_STATUS_OK',
    2: 'POMP_SEND_STATUS_ERROR',
    4: 'POMP_SEND_STATUS_ABORTED',
    8: 'POMP_SEND_STATUS_QUEUE_EMPTY',
}
POMP_SEND_STATUS_OK = 1
POMP_SEND_STATUS_ERROR = 2
POMP_SEND_STATUS_ABORTED = 4
POMP_SEND_STATUS_QUEUE_EMPTY = 8
pomp_send_status = ctypes.c_int # enum
class struct_pomp_cred(Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('pid', ctypes.c_uint32),
    ('uid', ctypes.c_uint32),
    ('gid', ctypes.c_uint32),
     ]

pomp_event_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_ctx), pomp_event, POINTER_T(struct_pomp_conn), POINTER_T(struct_pomp_msg), POINTER_T(None))
pomp_ctx_raw_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_conn), POINTER_T(struct_pomp_buffer), POINTER_T(None))
pomp_socket_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_ctx), ctypes.c_int32, pomp_socket_kind, POINTER_T(None))
pomp_send_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_conn), POINTER_T(struct_pomp_buffer), ctypes.c_uint32, POINTER_T(None), POINTER_T(None))
pomp_fd_event_cb_t = ctypes.CFUNCTYPE(None, ctypes.c_int32, ctypes.c_uint32, POINTER_T(None))
pomp_evt_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_evt), POINTER_T(None))
pomp_timer_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_timer), POINTER_T(None))
pomp_idle_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(None))
pomp_watchdog_cb_t = ctypes.CFUNCTYPE(None, POINTER_T(struct_pomp_loop), POINTER_T(None))
pomp_ctx_new = _libraries['libpomp.so'].pomp_ctx_new
pomp_ctx_new.restype = POINTER_T(struct_pomp_ctx)
pomp_ctx_new.argtypes = [pomp_event_cb_t, POINTER_T(None)]
pomp_ctx_new_with_loop = _libraries['libpomp.so'].pomp_ctx_new_with_loop
pomp_ctx_new_with_loop.restype = POINTER_T(struct_pomp_ctx)
pomp_ctx_new_with_loop.argtypes = [pomp_event_cb_t, POINTER_T(None), POINTER_T(struct_pomp_loop)]
pomp_ctx_set_raw = _libraries['libpomp.so'].pomp_ctx_set_raw
pomp_ctx_set_raw.restype = ctypes.c_int32
pomp_ctx_set_raw.argtypes = [POINTER_T(struct_pomp_ctx), pomp_ctx_raw_cb_t]
pomp_ctx_set_socket_cb = _libraries['libpomp.so'].pomp_ctx_set_socket_cb
pomp_ctx_set_socket_cb.restype = ctypes.c_int32
pomp_ctx_set_socket_cb.argtypes = [POINTER_T(struct_pomp_ctx), pomp_socket_cb_t]
pomp_ctx_set_send_cb = _libraries['libpomp.so'].pomp_ctx_set_send_cb
pomp_ctx_set_send_cb.restype = ctypes.c_int32
pomp_ctx_set_send_cb.argtypes = [POINTER_T(struct_pomp_ctx), pomp_send_cb_t]
pomp_ctx_setup_keepalive = _libraries['libpomp.so'].pomp_ctx_setup_keepalive
pomp_ctx_setup_keepalive.restype = ctypes.c_int32
pomp_ctx_setup_keepalive.argtypes = [POINTER_T(struct_pomp_ctx), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
pomp_ctx_destroy = _libraries['libpomp.so'].pomp_ctx_destroy
pomp_ctx_destroy.restype = ctypes.c_int32
pomp_ctx_destroy.argtypes = [POINTER_T(struct_pomp_ctx)]
class struct_sockaddr(Structure):
    pass

uint32_t = ctypes.c_uint32
pomp_ctx_listen = _libraries['libpomp.so'].pomp_ctx_listen
pomp_ctx_listen.restype = ctypes.c_int32
pomp_ctx_listen.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_sockaddr), uint32_t]
pomp_ctx_listen_with_access_mode = _libraries['libpomp.so'].pomp_ctx_listen_with_access_mode
pomp_ctx_listen_with_access_mode.restype = ctypes.c_int32
pomp_ctx_listen_with_access_mode.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_sockaddr), uint32_t, uint32_t]
pomp_ctx_connect = _libraries['libpomp.so'].pomp_ctx_connect
pomp_ctx_connect.restype = ctypes.c_int32
pomp_ctx_connect.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_sockaddr), uint32_t]
pomp_ctx_bind = _libraries['libpomp.so'].pomp_ctx_bind
pomp_ctx_bind.restype = ctypes.c_int32
pomp_ctx_bind.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_sockaddr), uint32_t]
pomp_ctx_stop = _libraries['libpomp.so'].pomp_ctx_stop
pomp_ctx_stop.restype = ctypes.c_int32
pomp_ctx_stop.argtypes = [POINTER_T(struct_pomp_ctx)]
pomp_ctx_get_loop = _libraries['libpomp.so'].pomp_ctx_get_loop
pomp_ctx_get_loop.restype = POINTER_T(struct_pomp_loop)
pomp_ctx_get_loop.argtypes = [POINTER_T(struct_pomp_ctx)]
intptr_t = ctypes.c_int64
pomp_ctx_get_fd = _libraries['libpomp.so'].pomp_ctx_get_fd
pomp_ctx_get_fd.restype = intptr_t
pomp_ctx_get_fd.argtypes = [POINTER_T(struct_pomp_ctx)]
pomp_ctx_process_fd = _libraries['libpomp.so'].pomp_ctx_process_fd
pomp_ctx_process_fd.restype = ctypes.c_int32
pomp_ctx_process_fd.argtypes = [POINTER_T(struct_pomp_ctx)]
pomp_ctx_wait_and_process = _libraries['libpomp.so'].pomp_ctx_wait_and_process
pomp_ctx_wait_and_process.restype = ctypes.c_int32
pomp_ctx_wait_and_process.argtypes = [POINTER_T(struct_pomp_ctx), ctypes.c_int32]
pomp_ctx_wakeup = _libraries['libpomp.so'].pomp_ctx_wakeup
pomp_ctx_wakeup.restype = ctypes.c_int32
pomp_ctx_wakeup.argtypes = [POINTER_T(struct_pomp_ctx)]
pomp_ctx_get_next_conn = _libraries['libpomp.so'].pomp_ctx_get_next_conn
pomp_ctx_get_next_conn.restype = POINTER_T(struct_pomp_conn)
pomp_ctx_get_next_conn.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_conn)]
pomp_ctx_get_conn = _libraries['libpomp.so'].pomp_ctx_get_conn
pomp_ctx_get_conn.restype = POINTER_T(struct_pomp_conn)
pomp_ctx_get_conn.argtypes = [POINTER_T(struct_pomp_ctx)]
pomp_ctx_get_local_addr = _libraries['libpomp.so'].pomp_ctx_get_local_addr
pomp_ctx_get_local_addr.restype = POINTER_T(struct_sockaddr)
pomp_ctx_get_local_addr.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(ctypes.c_uint32)]
pomp_ctx_send_msg = _libraries['libpomp.so'].pomp_ctx_send_msg
pomp_ctx_send_msg.restype = ctypes.c_int32
pomp_ctx_send_msg.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_msg)]
pomp_ctx_send_msg_to = _libraries['libpomp.so'].pomp_ctx_send_msg_to
pomp_ctx_send_msg_to.restype = ctypes.c_int32
pomp_ctx_send_msg_to.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_msg), POINTER_T(struct_sockaddr), uint32_t]
pomp_ctx_send = _libraries['libpomp.so'].pomp_ctx_send
pomp_ctx_send.restype = ctypes.c_int32
pomp_ctx_send.argtypes = [POINTER_T(struct_pomp_ctx), uint32_t, POINTER_T(ctypes.c_char)]
class struct___va_list_tag(Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('gp_offset', ctypes.c_uint32),
    ('fp_offset', ctypes.c_uint32),
    ('overflow_arg_area', POINTER_T(None)),
    ('reg_save_area', POINTER_T(None)),
     ]

va_list = struct___va_list_tag * 1
pomp_ctx_sendv = _libraries['libpomp.so'].pomp_ctx_sendv
pomp_ctx_sendv.restype = ctypes.c_int32
pomp_ctx_sendv.argtypes = [POINTER_T(struct_pomp_ctx), uint32_t, POINTER_T(ctypes.c_char), va_list]
pomp_ctx_send_raw_buf = _libraries['libpomp.so'].pomp_ctx_send_raw_buf
pomp_ctx_send_raw_buf.restype = ctypes.c_int32
pomp_ctx_send_raw_buf.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_buffer)]
pomp_ctx_send_raw_buf_to = _libraries['libpomp.so'].pomp_ctx_send_raw_buf_to
pomp_ctx_send_raw_buf_to.restype = ctypes.c_int32
pomp_ctx_send_raw_buf_to.argtypes = [POINTER_T(struct_pomp_ctx), POINTER_T(struct_pomp_buffer), POINTER_T(struct_sockaddr), uint32_t]
size_t = ctypes.c_uint64
pomp_ctx_set_read_buffer_len = _libraries['libpomp.so'].pomp_ctx_set_read_buffer_len
pomp_ctx_set_read_buffer_len.restype = ctypes.c_int32
pomp_ctx_set_read_buffer_len.argtypes = [POINTER_T(struct_pomp_ctx), size_t]
pomp_conn_disconnect = _libraries['libpomp.so'].pomp_conn_disconnect
pomp_conn_disconnect.restype = ctypes.c_int32
pomp_conn_disconnect.argtypes = [POINTER_T(struct_pomp_conn)]
pomp_conn_get_local_addr = _libraries['libpomp.so'].pomp_conn_get_local_addr
pomp_conn_get_local_addr.restype = POINTER_T(struct_sockaddr)
pomp_conn_get_local_addr.argtypes = [POINTER_T(struct_pomp_conn), POINTER_T(ctypes.c_uint32)]
pomp_conn_get_peer_addr = _libraries['libpomp.so'].pomp_conn_get_peer_addr
pomp_conn_get_peer_addr.restype = POINTER_T(struct_sockaddr)
pomp_conn_get_peer_addr.argtypes = [POINTER_T(struct_pomp_conn), POINTER_T(ctypes.c_uint32)]
pomp_conn_get_peer_cred = _libraries['libpomp.so'].pomp_conn_get_peer_cred
pomp_conn_get_peer_cred.restype = POINTER_T(struct_pomp_cred)
pomp_conn_get_peer_cred.argtypes = [POINTER_T(struct_pomp_conn)]
pomp_conn_get_fd = _libraries['libpomp.so'].pomp_conn_get_fd
pomp_conn_get_fd.restype = ctypes.c_int32
pomp_conn_get_fd.argtypes = [POINTER_T(struct_pomp_conn)]
pomp_conn_suspend_read = _libraries['libpomp.so'].pomp_conn_suspend_read
pomp_conn_suspend_read.restype = ctypes.c_int32
pomp_conn_suspend_read.argtypes = [POINTER_T(struct_pomp_conn)]
pomp_conn_resume_read = _libraries['libpomp.so'].pomp_conn_resume_read
pomp_conn_resume_read.restype = ctypes.c_int32
pomp_conn_resume_read.argtypes = [POINTER_T(struct_pomp_conn)]
pomp_conn_send_msg = _libraries['libpomp.so'].pomp_conn_send_msg
pomp_conn_send_msg.restype = ctypes.c_int32
pomp_conn_send_msg.argtypes = [POINTER_T(struct_pomp_conn), POINTER_T(struct_pomp_msg)]
pomp_conn_send = _libraries['libpomp.so'].pomp_conn_send
pomp_conn_send.restype = ctypes.c_int32
pomp_conn_send.argtypes = [POINTER_T(struct_pomp_conn), uint32_t, POINTER_T(ctypes.c_char)]
pomp_conn_sendv = _libraries['libpomp.so'].pomp_conn_sendv
pomp_conn_sendv.restype = ctypes.c_int32
pomp_conn_sendv.argtypes = [POINTER_T(struct_pomp_conn), uint32_t, POINTER_T(ctypes.c_char), va_list]
pomp_conn_send_raw_buf = _libraries['libpomp.so'].pomp_conn_send_raw_buf
pomp_conn_send_raw_buf.restype = ctypes.c_int32
pomp_conn_send_raw_buf.argtypes = [POINTER_T(struct_pomp_conn), POINTER_T(struct_pomp_buffer)]
pomp_conn_set_read_buffer_len = _libraries['libpomp.so'].pomp_conn_set_read_buffer_len
pomp_conn_set_read_buffer_len.restype = ctypes.c_int32
pomp_conn_set_read_buffer_len.argtypes = [POINTER_T(struct_pomp_conn), size_t]
pomp_buffer_new = _libraries['libpomp.so'].pomp_buffer_new
pomp_buffer_new.restype = POINTER_T(struct_pomp_buffer)
pomp_buffer_new.argtypes = [size_t]
pomp_buffer_new_copy = _libraries['libpomp.so'].pomp_buffer_new_copy
pomp_buffer_new_copy.restype = POINTER_T(struct_pomp_buffer)
pomp_buffer_new_copy.argtypes = [POINTER_T(struct_pomp_buffer)]
pomp_buffer_new_with_data = _libraries['libpomp.so'].pomp_buffer_new_with_data
pomp_buffer_new_with_data.restype = POINTER_T(struct_pomp_buffer)
pomp_buffer_new_with_data.argtypes = [POINTER_T(None), size_t]
pomp_buffer_new_get_data = _libraries['libpomp.so'].pomp_buffer_new_get_data
pomp_buffer_new_get_data.restype = POINTER_T(struct_pomp_buffer)
pomp_buffer_new_get_data.argtypes = [size_t, POINTER_T(POINTER_T(None))]
pomp_buffer_ref = _libraries['libpomp.so'].pomp_buffer_ref
pomp_buffer_ref.restype = None
pomp_buffer_ref.argtypes = [POINTER_T(struct_pomp_buffer)]
pomp_buffer_unref = _libraries['libpomp.so'].pomp_buffer_unref
pomp_buffer_unref.restype = None
pomp_buffer_unref.argtypes = [POINTER_T(struct_pomp_buffer)]
pomp_buffer_is_shared = _libraries['libpomp.so'].pomp_buffer_is_shared
pomp_buffer_is_shared.restype = ctypes.c_int32
pomp_buffer_is_shared.argtypes = [POINTER_T(struct_pomp_buffer)]
pomp_buffer_set_capacity = _libraries['libpomp.so'].pomp_buffer_set_capacity
pomp_buffer_set_capacity.restype = ctypes.c_int32
pomp_buffer_set_capacity.argtypes = [POINTER_T(struct_pomp_buffer), size_t]
pomp_buffer_ensure_capacity = _libraries['libpomp.so'].pomp_buffer_ensure_capacity
pomp_buffer_ensure_capacity.restype = ctypes.c_int32
pomp_buffer_ensure_capacity.argtypes = [POINTER_T(struct_pomp_buffer), size_t]
pomp_buffer_set_len = _libraries['libpomp.so'].pomp_buffer_set_len
pomp_buffer_set_len.restype = ctypes.c_int32
pomp_buffer_set_len.argtypes = [POINTER_T(struct_pomp_buffer), size_t]
pomp_buffer_get_data = _libraries['libpomp.so'].pomp_buffer_get_data
pomp_buffer_get_data.restype = ctypes.c_int32
pomp_buffer_get_data.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(POINTER_T(None)), POINTER_T(ctypes.c_uint64), POINTER_T(ctypes.c_uint64)]
pomp_buffer_get_cdata = _libraries['libpomp.so'].pomp_buffer_get_cdata
pomp_buffer_get_cdata.restype = ctypes.c_int32
pomp_buffer_get_cdata.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(POINTER_T(None)), POINTER_T(ctypes.c_uint64), POINTER_T(ctypes.c_uint64)]
pomp_buffer_append_data = _libraries['libpomp.so'].pomp_buffer_append_data
pomp_buffer_append_data.restype = ctypes.c_int32
pomp_buffer_append_data.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(None), size_t]
pomp_buffer_append_buffer = _libraries['libpomp.so'].pomp_buffer_append_buffer
pomp_buffer_append_buffer.restype = ctypes.c_int32
pomp_buffer_append_buffer.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(struct_pomp_buffer)]
pomp_buffer_write = _libraries['libpomp.so'].pomp_buffer_write
pomp_buffer_write.restype = ctypes.c_int32
pomp_buffer_write.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(ctypes.c_uint64), POINTER_T(None), size_t]
pomp_buffer_read = _libraries['libpomp.so'].pomp_buffer_read
pomp_buffer_read.restype = ctypes.c_int32
pomp_buffer_read.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(ctypes.c_uint64), POINTER_T(None), size_t]
pomp_buffer_cread = _libraries['libpomp.so'].pomp_buffer_cread
pomp_buffer_cread.restype = ctypes.c_int32
pomp_buffer_cread.argtypes = [POINTER_T(struct_pomp_buffer), POINTER_T(ctypes.c_uint64), POINTER_T(POINTER_T(None)), size_t]
pomp_msg_new = _libraries['libpomp.so'].pomp_msg_new
pomp_msg_new.restype = POINTER_T(struct_pomp_msg)
pomp_msg_new.argtypes = []
pomp_msg_new_copy = _libraries['libpomp.so'].pomp_msg_new_copy
pomp_msg_new_copy.restype = POINTER_T(struct_pomp_msg)
pomp_msg_new_copy.argtypes = [POINTER_T(struct_pomp_msg)]
pomp_msg_new_with_buffer = _libraries['libpomp.so'].pomp_msg_new_with_buffer
pomp_msg_new_with_buffer.restype = POINTER_T(struct_pomp_msg)
pomp_msg_new_with_buffer.argtypes = [POINTER_T(struct_pomp_buffer)]
pomp_msg_destroy = _libraries['libpomp.so'].pomp_msg_destroy
pomp_msg_destroy.restype = ctypes.c_int32
pomp_msg_destroy.argtypes = [POINTER_T(struct_pomp_msg)]
pomp_msg_get_id = _libraries['libpomp.so'].pomp_msg_get_id
pomp_msg_get_id.restype = uint32_t
pomp_msg_get_id.argtypes = [POINTER_T(struct_pomp_msg)]
pomp_msg_get_buffer = _libraries['libpomp.so'].pomp_msg_get_buffer
pomp_msg_get_buffer.restype = POINTER_T(struct_pomp_buffer)
pomp_msg_get_buffer.argtypes = [POINTER_T(struct_pomp_msg)]
pomp_msg_write = _libraries['libpomp.so'].pomp_msg_write
pomp_msg_write.restype = ctypes.c_int32
pomp_msg_write.argtypes = [POINTER_T(struct_pomp_msg), uint32_t, POINTER_T(ctypes.c_char)]
pomp_msg_writev = _libraries['libpomp.so'].pomp_msg_writev
pomp_msg_writev.restype = ctypes.c_int32
pomp_msg_writev.argtypes = [POINTER_T(struct_pomp_msg), uint32_t, POINTER_T(ctypes.c_char), va_list]
pomp_msg_write_argv = _libraries['libpomp.so'].pomp_msg_write_argv
pomp_msg_write_argv.restype = ctypes.c_int32
pomp_msg_write_argv.argtypes = [POINTER_T(struct_pomp_msg), uint32_t, POINTER_T(ctypes.c_char), ctypes.c_int32, POINTER_T(POINTER_T(ctypes.c_char))]
pomp_msg_read = _libraries['libpomp.so'].pomp_msg_read
pomp_msg_read.restype = ctypes.c_int32
pomp_msg_read.argtypes = [POINTER_T(struct_pomp_msg), POINTER_T(ctypes.c_char)]
pomp_msg_readv = _libraries['libpomp.so'].pomp_msg_readv
pomp_msg_readv.restype = ctypes.c_int32
pomp_msg_readv.argtypes = [POINTER_T(struct_pomp_msg), POINTER_T(ctypes.c_char), va_list]
pomp_msg_dump = _libraries['libpomp.so'].pomp_msg_dump
pomp_msg_dump.restype = ctypes.c_int32
pomp_msg_dump.argtypes = [POINTER_T(struct_pomp_msg), POINTER_T(ctypes.c_char), uint32_t]
pomp_msg_adump = _libraries['libpomp.so'].pomp_msg_adump
pomp_msg_adump.restype = ctypes.c_int32
pomp_msg_adump.argtypes = [POINTER_T(struct_pomp_msg), POINTER_T(POINTER_T(ctypes.c_char))]
pomp_loop_new = _libraries['libpomp.so'].pomp_loop_new
pomp_loop_new.restype = POINTER_T(struct_pomp_loop)
pomp_loop_new.argtypes = []
pomp_loop_destroy = _libraries['libpomp.so'].pomp_loop_destroy
pomp_loop_destroy.restype = ctypes.c_int32
pomp_loop_destroy.argtypes = [POINTER_T(struct_pomp_loop)]
pomp_loop_add = _libraries['libpomp.so'].pomp_loop_add
pomp_loop_add.restype = ctypes.c_int32
pomp_loop_add.argtypes = [POINTER_T(struct_pomp_loop), ctypes.c_int32, uint32_t, pomp_fd_event_cb_t, POINTER_T(None)]
pomp_loop_update = _libraries['libpomp.so'].pomp_loop_update
pomp_loop_update.restype = ctypes.c_int32
pomp_loop_update.argtypes = [POINTER_T(struct_pomp_loop), ctypes.c_int32, uint32_t]
pomp_loop_update2 = _libraries['libpomp.so'].pomp_loop_update2
pomp_loop_update2.restype = ctypes.c_int32
pomp_loop_update2.argtypes = [POINTER_T(struct_pomp_loop), ctypes.c_int32, uint32_t, uint32_t]
pomp_loop_remove = _libraries['libpomp.so'].pomp_loop_remove
pomp_loop_remove.restype = ctypes.c_int32
pomp_loop_remove.argtypes = [POINTER_T(struct_pomp_loop), ctypes.c_int32]
pomp_loop_has_fd = _libraries['libpomp.so'].pomp_loop_has_fd
pomp_loop_has_fd.restype = ctypes.c_int32
pomp_loop_has_fd.argtypes = [POINTER_T(struct_pomp_loop), ctypes.c_int32]
pomp_loop_get_fd = _libraries['libpomp.so'].pomp_loop_get_fd
pomp_loop_get_fd.restype = intptr_t
pomp_loop_get_fd.argtypes = [POINTER_T(struct_pomp_loop)]
pomp_loop_process_fd = _libraries['libpomp.so'].pomp_loop_process_fd
pomp_loop_process_fd.restype = ctypes.c_int32
pomp_loop_process_fd.argtypes = [POINTER_T(struct_pomp_loop)]
pomp_loop_wait_and_process = _libraries['libpomp.so'].pomp_loop_wait_and_process
pomp_loop_wait_and_process.restype = ctypes.c_int32
pomp_loop_wait_and_process.argtypes = [POINTER_T(struct_pomp_loop), ctypes.c_int32]
pomp_loop_wakeup = _libraries['libpomp.so'].pomp_loop_wakeup
pomp_loop_wakeup.restype = ctypes.c_int32
pomp_loop_wakeup.argtypes = [POINTER_T(struct_pomp_loop)]
pomp_loop_idle_add = _libraries['libpomp.so'].pomp_loop_idle_add
pomp_loop_idle_add.restype = ctypes.c_int32
pomp_loop_idle_add.argtypes = [POINTER_T(struct_pomp_loop), pomp_idle_cb_t, POINTER_T(None)]
pomp_loop_idle_add_with_cookie = _libraries['libpomp.so'].pomp_loop_idle_add_with_cookie
pomp_loop_idle_add_with_cookie.restype = ctypes.c_int32
pomp_loop_idle_add_with_cookie.argtypes = [POINTER_T(struct_pomp_loop), pomp_idle_cb_t, POINTER_T(None), POINTER_T(None)]
pomp_loop_idle_remove = _libraries['libpomp.so'].pomp_loop_idle_remove
pomp_loop_idle_remove.restype = ctypes.c_int32
pomp_loop_idle_remove.argtypes = [POINTER_T(struct_pomp_loop), pomp_idle_cb_t, POINTER_T(None)]
pomp_loop_idle_remove_by_cookie = _libraries['libpomp.so'].pomp_loop_idle_remove_by_cookie
pomp_loop_idle_remove_by_cookie.restype = ctypes.c_int32
pomp_loop_idle_remove_by_cookie.argtypes = [POINTER_T(struct_pomp_loop), POINTER_T(None)]
pomp_loop_idle_flush = _libraries['libpomp.so'].pomp_loop_idle_flush
pomp_loop_idle_flush.restype = ctypes.c_int32
pomp_loop_idle_flush.argtypes = [POINTER_T(struct_pomp_loop)]
pomp_loop_idle_flush_by_cookie = _libraries['libpomp.so'].pomp_loop_idle_flush_by_cookie
pomp_loop_idle_flush_by_cookie.restype = ctypes.c_int32
pomp_loop_idle_flush_by_cookie.argtypes = [POINTER_T(struct_pomp_loop), POINTER_T(None)]
pomp_loop_watchdog_enable = _libraries['libpomp.so'].pomp_loop_watchdog_enable
pomp_loop_watchdog_enable.restype = ctypes.c_int32
pomp_loop_watchdog_enable.argtypes = [POINTER_T(struct_pomp_loop), uint32_t, pomp_watchdog_cb_t, POINTER_T(None)]
pomp_loop_watchdog_disable = _libraries['libpomp.so'].pomp_loop_watchdog_disable
pomp_loop_watchdog_disable.restype = ctypes.c_int32
pomp_loop_watchdog_disable.argtypes = [POINTER_T(struct_pomp_loop)]
pomp_evt_new = _libraries['libpomp.so'].pomp_evt_new
pomp_evt_new.restype = POINTER_T(struct_pomp_evt)
pomp_evt_new.argtypes = []
pomp_evt_destroy = _libraries['libpomp.so'].pomp_evt_destroy
pomp_evt_destroy.restype = ctypes.c_int32
pomp_evt_destroy.argtypes = [POINTER_T(struct_pomp_evt)]
pomp_evt_attach_to_loop = _libraries['libpomp.so'].pomp_evt_attach_to_loop
pomp_evt_attach_to_loop.restype = ctypes.c_int32
pomp_evt_attach_to_loop.argtypes = [POINTER_T(struct_pomp_evt), POINTER_T(struct_pomp_loop), pomp_evt_cb_t, POINTER_T(None)]
pomp_evt_detach_from_loop = _libraries['libpomp.so'].pomp_evt_detach_from_loop
pomp_evt_detach_from_loop.restype = ctypes.c_int32
pomp_evt_detach_from_loop.argtypes = [POINTER_T(struct_pomp_evt), POINTER_T(struct_pomp_loop)]
pomp_evt_is_attached = _libraries['libpomp.so'].pomp_evt_is_attached
pomp_evt_is_attached.restype = ctypes.c_int32
pomp_evt_is_attached.argtypes = [POINTER_T(struct_pomp_evt), POINTER_T(struct_pomp_loop)]
pomp_evt_signal = _libraries['libpomp.so'].pomp_evt_signal
pomp_evt_signal.restype = ctypes.c_int32
pomp_evt_signal.argtypes = [POINTER_T(struct_pomp_evt)]
pomp_evt_clear = _libraries['libpomp.so'].pomp_evt_clear
pomp_evt_clear.restype = ctypes.c_int32
pomp_evt_clear.argtypes = [POINTER_T(struct_pomp_evt)]
pomp_timer_new = _libraries['libpomp.so'].pomp_timer_new
pomp_timer_new.restype = POINTER_T(struct_pomp_timer)
pomp_timer_new.argtypes = [POINTER_T(struct_pomp_loop), pomp_timer_cb_t, POINTER_T(None)]
pomp_timer_destroy = _libraries['libpomp.so'].pomp_timer_destroy
pomp_timer_destroy.restype = ctypes.c_int32
pomp_timer_destroy.argtypes = [POINTER_T(struct_pomp_timer)]
pomp_timer_set = _libraries['libpomp.so'].pomp_timer_set
pomp_timer_set.restype = ctypes.c_int32
pomp_timer_set.argtypes = [POINTER_T(struct_pomp_timer), uint32_t]
pomp_timer_set_periodic = _libraries['libpomp.so'].pomp_timer_set_periodic
pomp_timer_set_periodic.restype = ctypes.c_int32
pomp_timer_set_periodic.argtypes = [POINTER_T(struct_pomp_timer), uint32_t, uint32_t]
pomp_timer_clear = _libraries['libpomp.so'].pomp_timer_clear
pomp_timer_clear.restype = ctypes.c_int32
pomp_timer_clear.argtypes = [POINTER_T(struct_pomp_timer)]
pomp_addr_parse = _libraries['libpomp.so'].pomp_addr_parse
pomp_addr_parse.restype = ctypes.c_int32
pomp_addr_parse.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(struct_sockaddr), POINTER_T(ctypes.c_uint32)]
pomp_addr_format = _libraries['libpomp.so'].pomp_addr_format
pomp_addr_format.restype = ctypes.c_int32
pomp_addr_format.argtypes = [POINTER_T(ctypes.c_char), uint32_t, POINTER_T(struct_sockaddr), uint32_t]
pomp_addr_is_unix = _libraries['libpomp.so'].pomp_addr_is_unix
pomp_addr_is_unix.restype = ctypes.c_int32
pomp_addr_is_unix.argtypes = [POINTER_T(struct_sockaddr), uint32_t]
pomp_addr_get_real_addr = _libraries['libpomp.so'].pomp_addr_get_real_addr
pomp_addr_get_real_addr.restype = ctypes.c_int32
pomp_addr_get_real_addr.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(POINTER_T(ctypes.c_char))]
class struct_pomp_encoder(Structure):
    pass

class struct_pomp_decoder(Structure):
    pass

class struct_pomp_prot(Structure):
    pass

pomp_msg_init = _libraries['libpomp.so'].pomp_msg_init
pomp_msg_init.restype = ctypes.c_int32
pomp_msg_init.argtypes = [POINTER_T(struct_pomp_msg), uint32_t]
pomp_msg_finish = _libraries['libpomp.so'].pomp_msg_finish
pomp_msg_finish.restype = ctypes.c_int32
pomp_msg_finish.argtypes = [POINTER_T(struct_pomp_msg)]
pomp_msg_clear = _libraries['libpomp.so'].pomp_msg_clear
pomp_msg_clear.restype = ctypes.c_int32
pomp_msg_clear.argtypes = [POINTER_T(struct_pomp_msg)]
pomp_encoder_new = _libraries['libpomp.so'].pomp_encoder_new
pomp_encoder_new.restype = POINTER_T(struct_pomp_encoder)
pomp_encoder_new.argtypes = []
pomp_encoder_destroy = _libraries['libpomp.so'].pomp_encoder_destroy
pomp_encoder_destroy.restype = ctypes.c_int32
pomp_encoder_destroy.argtypes = [POINTER_T(struct_pomp_encoder)]
pomp_encoder_init = _libraries['libpomp.so'].pomp_encoder_init
pomp_encoder_init.restype = ctypes.c_int32
pomp_encoder_init.argtypes = [POINTER_T(struct_pomp_encoder), POINTER_T(struct_pomp_msg)]
pomp_encoder_clear = _libraries['libpomp.so'].pomp_encoder_clear
pomp_encoder_clear.restype = ctypes.c_int32
pomp_encoder_clear.argtypes = [POINTER_T(struct_pomp_encoder)]
pomp_encoder_write = _libraries['libpomp.so'].pomp_encoder_write
pomp_encoder_write.restype = ctypes.c_int32
pomp_encoder_write.argtypes = [POINTER_T(struct_pomp_encoder), POINTER_T(ctypes.c_char)]
pomp_encoder_writev = _libraries['libpomp.so'].pomp_encoder_writev
pomp_encoder_writev.restype = ctypes.c_int32
pomp_encoder_writev.argtypes = [POINTER_T(struct_pomp_encoder), POINTER_T(ctypes.c_char), va_list]
pomp_encoder_write_argv = _libraries['libpomp.so'].pomp_encoder_write_argv
pomp_encoder_write_argv.restype = ctypes.c_int32
pomp_encoder_write_argv.argtypes = [POINTER_T(struct_pomp_encoder), POINTER_T(ctypes.c_char), ctypes.c_int32, POINTER_T(POINTER_T(ctypes.c_char))]
int8_t = ctypes.c_int8
pomp_encoder_write_i8 = _libraries['libpomp.so'].pomp_encoder_write_i8
pomp_encoder_write_i8.restype = ctypes.c_int32
pomp_encoder_write_i8.argtypes = [POINTER_T(struct_pomp_encoder), int8_t]
uint8_t = ctypes.c_uint8
pomp_encoder_write_u8 = _libraries['libpomp.so'].pomp_encoder_write_u8
pomp_encoder_write_u8.restype = ctypes.c_int32
pomp_encoder_write_u8.argtypes = [POINTER_T(struct_pomp_encoder), uint8_t]
int16_t = ctypes.c_int16
pomp_encoder_write_i16 = _libraries['libpomp.so'].pomp_encoder_write_i16
pomp_encoder_write_i16.restype = ctypes.c_int32
pomp_encoder_write_i16.argtypes = [POINTER_T(struct_pomp_encoder), int16_t]
uint16_t = ctypes.c_uint16
pomp_encoder_write_u16 = _libraries['libpomp.so'].pomp_encoder_write_u16
pomp_encoder_write_u16.restype = ctypes.c_int32
pomp_encoder_write_u16.argtypes = [POINTER_T(struct_pomp_encoder), uint16_t]
int32_t = ctypes.c_int32
pomp_encoder_write_i32 = _libraries['libpomp.so'].pomp_encoder_write_i32
pomp_encoder_write_i32.restype = ctypes.c_int32
pomp_encoder_write_i32.argtypes = [POINTER_T(struct_pomp_encoder), int32_t]
pomp_encoder_write_u32 = _libraries['libpomp.so'].pomp_encoder_write_u32
pomp_encoder_write_u32.restype = ctypes.c_int32
pomp_encoder_write_u32.argtypes = [POINTER_T(struct_pomp_encoder), uint32_t]
int64_t = ctypes.c_int64
pomp_encoder_write_i64 = _libraries['libpomp.so'].pomp_encoder_write_i64
pomp_encoder_write_i64.restype = ctypes.c_int32
pomp_encoder_write_i64.argtypes = [POINTER_T(struct_pomp_encoder), int64_t]
uint64_t = ctypes.c_uint64
pomp_encoder_write_u64 = _libraries['libpomp.so'].pomp_encoder_write_u64
pomp_encoder_write_u64.restype = ctypes.c_int32
pomp_encoder_write_u64.argtypes = [POINTER_T(struct_pomp_encoder), uint64_t]
pomp_encoder_write_str = _libraries['libpomp.so'].pomp_encoder_write_str
pomp_encoder_write_str.restype = ctypes.c_int32
pomp_encoder_write_str.argtypes = [POINTER_T(struct_pomp_encoder), POINTER_T(ctypes.c_char)]
pomp_encoder_write_buf = _libraries['libpomp.so'].pomp_encoder_write_buf
pomp_encoder_write_buf.restype = ctypes.c_int32
pomp_encoder_write_buf.argtypes = [POINTER_T(struct_pomp_encoder), POINTER_T(None), uint32_t]
pomp_encoder_write_f32 = _libraries['libpomp.so'].pomp_encoder_write_f32
pomp_encoder_write_f32.restype = ctypes.c_int32
pomp_encoder_write_f32.argtypes = [POINTER_T(struct_pomp_encoder), ctypes.c_float]
pomp_encoder_write_f64 = _libraries['libpomp.so'].pomp_encoder_write_f64
pomp_encoder_write_f64.restype = ctypes.c_int32
pomp_encoder_write_f64.argtypes = [POINTER_T(struct_pomp_encoder), ctypes.c_double]
pomp_encoder_write_fd = _libraries['libpomp.so'].pomp_encoder_write_fd
pomp_encoder_write_fd.restype = ctypes.c_int32
pomp_encoder_write_fd.argtypes = [POINTER_T(struct_pomp_encoder), ctypes.c_int32]
pomp_decoder_new = _libraries['libpomp.so'].pomp_decoder_new
pomp_decoder_new.restype = POINTER_T(struct_pomp_decoder)
pomp_decoder_new.argtypes = []
pomp_decoder_destroy = _libraries['libpomp.so'].pomp_decoder_destroy
pomp_decoder_destroy.restype = ctypes.c_int32
pomp_decoder_destroy.argtypes = [POINTER_T(struct_pomp_decoder)]
pomp_decoder_init = _libraries['libpomp.so'].pomp_decoder_init
pomp_decoder_init.restype = ctypes.c_int32
pomp_decoder_init.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(struct_pomp_msg)]
pomp_decoder_clear = _libraries['libpomp.so'].pomp_decoder_clear
pomp_decoder_clear.restype = ctypes.c_int32
pomp_decoder_clear.argtypes = [POINTER_T(struct_pomp_decoder)]
pomp_decoder_read = _libraries['libpomp.so'].pomp_decoder_read
pomp_decoder_read.restype = ctypes.c_int32
pomp_decoder_read.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_char)]
pomp_decoder_readv = _libraries['libpomp.so'].pomp_decoder_readv
pomp_decoder_readv.restype = ctypes.c_int32
pomp_decoder_readv.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_char), va_list]
pomp_decoder_dump = _libraries['libpomp.so'].pomp_decoder_dump
pomp_decoder_dump.restype = ctypes.c_int32
pomp_decoder_dump.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_char), uint32_t]
pomp_decoder_adump = _libraries['libpomp.so'].pomp_decoder_adump
pomp_decoder_adump.restype = ctypes.c_int32
pomp_decoder_adump.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(POINTER_T(ctypes.c_char))]
pomp_decoder_read_i8 = _libraries['libpomp.so'].pomp_decoder_read_i8
pomp_decoder_read_i8.restype = ctypes.c_int32
pomp_decoder_read_i8.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_byte)]
pomp_decoder_read_u8 = _libraries['libpomp.so'].pomp_decoder_read_u8
pomp_decoder_read_u8.restype = ctypes.c_int32
pomp_decoder_read_u8.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_ubyte)]
pomp_decoder_read_i16 = _libraries['libpomp.so'].pomp_decoder_read_i16
pomp_decoder_read_i16.restype = ctypes.c_int32
pomp_decoder_read_i16.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_int16)]
pomp_decoder_read_u16 = _libraries['libpomp.so'].pomp_decoder_read_u16
pomp_decoder_read_u16.restype = ctypes.c_int32
pomp_decoder_read_u16.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_uint16)]
pomp_decoder_read_i32 = _libraries['libpomp.so'].pomp_decoder_read_i32
pomp_decoder_read_i32.restype = ctypes.c_int32
pomp_decoder_read_i32.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_int32)]
pomp_decoder_read_u32 = _libraries['libpomp.so'].pomp_decoder_read_u32
pomp_decoder_read_u32.restype = ctypes.c_int32
pomp_decoder_read_u32.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_uint32)]
pomp_decoder_read_i64 = _libraries['libpomp.so'].pomp_decoder_read_i64
pomp_decoder_read_i64.restype = ctypes.c_int32
pomp_decoder_read_i64.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_int64)]
pomp_decoder_read_u64 = _libraries['libpomp.so'].pomp_decoder_read_u64
pomp_decoder_read_u64.restype = ctypes.c_int32
pomp_decoder_read_u64.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_uint64)]
pomp_decoder_read_str = _libraries['libpomp.so'].pomp_decoder_read_str
pomp_decoder_read_str.restype = ctypes.c_int32
pomp_decoder_read_str.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(POINTER_T(ctypes.c_char))]
pomp_decoder_read_cstr = _libraries['libpomp.so'].pomp_decoder_read_cstr
pomp_decoder_read_cstr.restype = ctypes.c_int32
pomp_decoder_read_cstr.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(POINTER_T(ctypes.c_char))]
pomp_decoder_read_buf = _libraries['libpomp.so'].pomp_decoder_read_buf
pomp_decoder_read_buf.restype = ctypes.c_int32
pomp_decoder_read_buf.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(POINTER_T(None)), POINTER_T(ctypes.c_uint32)]
pomp_decoder_read_cbuf = _libraries['libpomp.so'].pomp_decoder_read_cbuf
pomp_decoder_read_cbuf.restype = ctypes.c_int32
pomp_decoder_read_cbuf.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(POINTER_T(None)), POINTER_T(ctypes.c_uint32)]
pomp_decoder_read_f32 = _libraries['libpomp.so'].pomp_decoder_read_f32
pomp_decoder_read_f32.restype = ctypes.c_int32
pomp_decoder_read_f32.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_float)]
pomp_decoder_read_f64 = _libraries['libpomp.so'].pomp_decoder_read_f64
pomp_decoder_read_f64.restype = ctypes.c_int32
pomp_decoder_read_f64.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_double)]
pomp_decoder_read_fd = _libraries['libpomp.so'].pomp_decoder_read_fd
pomp_decoder_read_fd.restype = ctypes.c_int32
pomp_decoder_read_fd.argtypes = [POINTER_T(struct_pomp_decoder), POINTER_T(ctypes.c_int32)]
pomp_prot_new = _libraries['libpomp.so'].pomp_prot_new
pomp_prot_new.restype = POINTER_T(struct_pomp_prot)
pomp_prot_new.argtypes = []
pomp_prot_destroy = _libraries['libpomp.so'].pomp_prot_destroy
pomp_prot_destroy.restype = ctypes.c_int32
pomp_prot_destroy.argtypes = [POINTER_T(struct_pomp_prot)]
pomp_prot_decode_msg = _libraries['libpomp.so'].pomp_prot_decode_msg
pomp_prot_decode_msg.restype = ctypes.c_int32
pomp_prot_decode_msg.argtypes = [POINTER_T(struct_pomp_prot), POINTER_T(None), size_t, POINTER_T(POINTER_T(struct_pomp_msg))]
pomp_prot_release_msg = _libraries['libpomp.so'].pomp_prot_release_msg
pomp_prot_release_msg.restype = ctypes.c_int32
pomp_prot_release_msg.argtypes = [POINTER_T(struct_pomp_prot), POINTER_T(struct_pomp_msg)]

# values for enumeration 'pomp_loop_impl'
pomp_loop_impl__enumvalues = {
    0: 'POMP_LOOP_IMPL_EPOLL',
    1: 'POMP_LOOP_IMPL_POLL',
    2: 'POMP_LOOP_IMPL_WIN32',
}
POMP_LOOP_IMPL_EPOLL = 0
POMP_LOOP_IMPL_POLL = 1
POMP_LOOP_IMPL_WIN32 = 2
pomp_loop_impl = ctypes.c_int # enum

# values for enumeration 'pomp_timer_impl'
pomp_timer_impl__enumvalues = {
    0: 'POMP_TIMER_IMPL_TIMER_FD',
    1: 'POMP_TIMER_IMPL_KQUEUE',
    2: 'POMP_TIMER_IMPL_POSIX',
    3: 'POMP_TIMER_IMPL_WIN32',
}
POMP_TIMER_IMPL_TIMER_FD = 0
POMP_TIMER_IMPL_KQUEUE = 1
POMP_TIMER_IMPL_POSIX = 2
POMP_TIMER_IMPL_WIN32 = 3
pomp_timer_impl = ctypes.c_int # enum
pomp_internal_set_loop_impl = _libraries['libpomp.so'].pomp_internal_set_loop_impl
pomp_internal_set_loop_impl.restype = ctypes.c_int32
pomp_internal_set_loop_impl.argtypes = [pomp_loop_impl]
pomp_internal_set_timer_impl = _libraries['libpomp.so'].pomp_internal_set_timer_impl
pomp_internal_set_timer_impl.restype = ctypes.c_int32
pomp_internal_set_timer_impl.argtypes = [pomp_timer_impl]
__all__ = \
    ['POMP_EVENT_CONNECTED', 'POMP_EVENT_DISCONNECTED',
    'POMP_EVENT_MSG', 'POMP_FD_EVENT_ERR', 'POMP_FD_EVENT_HUP',
    'POMP_FD_EVENT_IN', 'POMP_FD_EVENT_OUT', 'POMP_FD_EVENT_PRI',
    'POMP_LOOP_IMPL_EPOLL', 'POMP_LOOP_IMPL_POLL',
    'POMP_LOOP_IMPL_WIN32', 'POMP_SEND_STATUS_ABORTED',
    'POMP_SEND_STATUS_ERROR', 'POMP_SEND_STATUS_OK',
    'POMP_SEND_STATUS_QUEUE_EMPTY', 'POMP_SOCKET_KIND_CLIENT',
    'POMP_SOCKET_KIND_DGRAM', 'POMP_SOCKET_KIND_PEER',
    'POMP_SOCKET_KIND_SERVER', 'POMP_TIMER_IMPL_KQUEUE',
    'POMP_TIMER_IMPL_POSIX', 'POMP_TIMER_IMPL_TIMER_FD',
    'POMP_TIMER_IMPL_WIN32', 'int16_t', 'int32_t', 'int64_t',
    'int8_t', 'intptr_t', 'pomp_addr_format',
    'pomp_addr_get_real_addr', 'pomp_addr_is_unix', 'pomp_addr_parse',
    'pomp_buffer_append_buffer', 'pomp_buffer_append_data',
    'pomp_buffer_cread', 'pomp_buffer_ensure_capacity',
    'pomp_buffer_get_cdata', 'pomp_buffer_get_data',
    'pomp_buffer_is_shared', 'pomp_buffer_new',
    'pomp_buffer_new_copy', 'pomp_buffer_new_get_data',
    'pomp_buffer_new_with_data', 'pomp_buffer_read',
    'pomp_buffer_ref', 'pomp_buffer_set_capacity',
    'pomp_buffer_set_len', 'pomp_buffer_unref', 'pomp_buffer_write',
    'pomp_conn_disconnect', 'pomp_conn_get_fd',
    'pomp_conn_get_local_addr', 'pomp_conn_get_peer_addr',
    'pomp_conn_get_peer_cred', 'pomp_conn_resume_read',
    'pomp_conn_send', 'pomp_conn_send_msg', 'pomp_conn_send_raw_buf',
    'pomp_conn_sendv', 'pomp_conn_set_read_buffer_len',
    'pomp_conn_suspend_read', 'pomp_ctx_bind', 'pomp_ctx_connect',
    'pomp_ctx_destroy', 'pomp_ctx_get_conn', 'pomp_ctx_get_fd',
    'pomp_ctx_get_local_addr', 'pomp_ctx_get_loop',
    'pomp_ctx_get_next_conn', 'pomp_ctx_listen',
    'pomp_ctx_listen_with_access_mode', 'pomp_ctx_new',
    'pomp_ctx_new_with_loop', 'pomp_ctx_process_fd',
    'pomp_ctx_raw_cb_t', 'pomp_ctx_send', 'pomp_ctx_send_msg',
    'pomp_ctx_send_msg_to', 'pomp_ctx_send_raw_buf',
    'pomp_ctx_send_raw_buf_to', 'pomp_ctx_sendv', 'pomp_ctx_set_raw',
    'pomp_ctx_set_read_buffer_len', 'pomp_ctx_set_send_cb',
    'pomp_ctx_set_socket_cb', 'pomp_ctx_setup_keepalive',
    'pomp_ctx_stop', 'pomp_ctx_wait_and_process', 'pomp_ctx_wakeup',
    'pomp_decoder_adump', 'pomp_decoder_clear',
    'pomp_decoder_destroy', 'pomp_decoder_dump', 'pomp_decoder_init',
    'pomp_decoder_new', 'pomp_decoder_read', 'pomp_decoder_read_buf',
    'pomp_decoder_read_cbuf', 'pomp_decoder_read_cstr',
    'pomp_decoder_read_f32', 'pomp_decoder_read_f64',
    'pomp_decoder_read_fd', 'pomp_decoder_read_i16',
    'pomp_decoder_read_i32', 'pomp_decoder_read_i64',
    'pomp_decoder_read_i8', 'pomp_decoder_read_str',
    'pomp_decoder_read_u16', 'pomp_decoder_read_u32',
    'pomp_decoder_read_u64', 'pomp_decoder_read_u8',
    'pomp_decoder_readv', 'pomp_encoder_clear',
    'pomp_encoder_destroy', 'pomp_encoder_init', 'pomp_encoder_new',
    'pomp_encoder_write', 'pomp_encoder_write_argv',
    'pomp_encoder_write_buf', 'pomp_encoder_write_f32',
    'pomp_encoder_write_f64', 'pomp_encoder_write_fd',
    'pomp_encoder_write_i16', 'pomp_encoder_write_i32',
    'pomp_encoder_write_i64', 'pomp_encoder_write_i8',
    'pomp_encoder_write_str', 'pomp_encoder_write_u16',
    'pomp_encoder_write_u32', 'pomp_encoder_write_u64',
    'pomp_encoder_write_u8', 'pomp_encoder_writev', 'pomp_event',
    'pomp_event_cb_t', 'pomp_event_str', 'pomp_evt_attach_to_loop',
    'pomp_evt_cb_t', 'pomp_evt_clear', 'pomp_evt_destroy',
    'pomp_evt_detach_from_loop', 'pomp_evt_is_attached',
    'pomp_evt_new', 'pomp_evt_signal', 'pomp_fd_event',
    'pomp_fd_event_cb_t', 'pomp_idle_cb_t',
    'pomp_internal_set_loop_impl', 'pomp_internal_set_timer_impl',
    'pomp_loop_add', 'pomp_loop_destroy', 'pomp_loop_get_fd',
    'pomp_loop_has_fd', 'pomp_loop_idle_add',
    'pomp_loop_idle_add_with_cookie', 'pomp_loop_idle_flush',
    'pomp_loop_idle_flush_by_cookie', 'pomp_loop_idle_remove',
    'pomp_loop_idle_remove_by_cookie', 'pomp_loop_impl',
    'pomp_loop_new', 'pomp_loop_process_fd', 'pomp_loop_remove',
    'pomp_loop_update', 'pomp_loop_update2',
    'pomp_loop_wait_and_process', 'pomp_loop_wakeup',
    'pomp_loop_watchdog_disable', 'pomp_loop_watchdog_enable',
    'pomp_msg_adump', 'pomp_msg_clear', 'pomp_msg_destroy',
    'pomp_msg_dump', 'pomp_msg_finish', 'pomp_msg_get_buffer',
    'pomp_msg_get_id', 'pomp_msg_init', 'pomp_msg_new',
    'pomp_msg_new_copy', 'pomp_msg_new_with_buffer', 'pomp_msg_read',
    'pomp_msg_readv', 'pomp_msg_write', 'pomp_msg_write_argv',
    'pomp_msg_writev', 'pomp_prot_decode_msg', 'pomp_prot_destroy',
    'pomp_prot_new', 'pomp_prot_release_msg', 'pomp_send_cb_t',
    'pomp_send_status', 'pomp_socket_cb_t', 'pomp_socket_kind',
    'pomp_socket_kind_str', 'pomp_timer_cb_t', 'pomp_timer_clear',
    'pomp_timer_destroy', 'pomp_timer_impl', 'pomp_timer_new',
    'pomp_timer_set', 'pomp_timer_set_periodic', 'pomp_watchdog_cb_t',
    'size_t', 'struct___va_list_tag', 'struct_pomp_buffer',
    'struct_pomp_conn', 'struct_pomp_cred', 'struct_pomp_ctx',
    'struct_pomp_decoder', 'struct_pomp_encoder', 'struct_pomp_evt',
    'struct_pomp_loop', 'struct_pomp_msg', 'struct_pomp_prot',
    'struct_pomp_sockaddr_storage', 'struct_pomp_timer',
    'struct_sockaddr', 'uint16_t', 'uint32_t', 'uint64_t', 'uint8_t',
    'va_list']
