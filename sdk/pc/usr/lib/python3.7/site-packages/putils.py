# -*- coding: utf-8 -*-
#
# TARGET arch is: ['-target', 'x86_64', '', '-I/usr/lib/gcc/x86_64-linux-gnu/9/include', '-I/usr/local/include', '-I/usr/include/x86_64-linux-gnu', '-I/usr/include', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/out/anafi2-pc_airsdk/build/libputils', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/packages/libputils', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/packages/ulog/libulog/include', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/packages/libputils/include', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/out/anafi2-pc_airsdk/staging/usr/include/x86_64-linux-gnu', '-I/data/jenkins/jobs/anafi2-airsdk-release/workspace/out/anafi2-pc_airsdk/staging/usr/include', '-pipe', '-O2', '-g', '-ffunction-sections', '-DALCHEMY_BUILD', '-m64', '-fPIC', '-msse', '-msse2', '-mssse3', '-DBUILD_LIBULOG', '-D__PYBINDING_MACRO__=1', '-fno-unsigned-char', '']
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes


_libraries = {}
_libraries['libputils.so'] = ctypes.CDLL('libputils.so')
# if local wordsize is same as target, keep ctypes pointer function.
if ctypes.sizeof(ctypes.c_void_p) == 8:
    POINTER_T = ctypes.POINTER
else:
    # required to access _ctypes
    import _ctypes
    # Emulate a pointer class using the approriate c_int32/c_int64 type
    # The new class should have :
    # ['__module__', 'from_param', '_type_', '__dict__', '__weakref__', '__doc__']
    # but the class should be submitted to a unique instance for each base type
    # to that if A == B, POINTER_T(A) == POINTER_T(B)
    ctypes._pointer_t_type_cache = {}
    def POINTER_T(pointee):
        # a pointer should have the same length as LONG
        fake_ptr_base_type = ctypes.c_uint64 
        # specific case for c_void_p
        if pointee is None: # VOID pointer type. c_void_p.
            pointee = type(None) # ctypes.c_void_p # ctypes.c_ulong
            clsname = 'c_void'
        else:
            clsname = pointee.__name__
        if clsname in ctypes._pointer_t_type_cache:
            return ctypes._pointer_t_type_cache[clsname]
        # make template
        class _T(_ctypes._SimpleCData,):
            _type_ = 'L'
            _subtype_ = pointee
            def _sub_addr_(self):
                return self.value
            def __repr__(self):
                return '%s(%d)'%(clsname, self.value)
            def contents(self):
                raise TypeError('This is not a ctypes pointer.')
            def __init__(self, **args):
                raise TypeError('This is not a ctypes pointer. It is not instanciable.')
        _class = type('LP_%d_%s'%(8, clsname), (_T,),{}) 
        ctypes._pointer_t_type_cache[clsname] = _class
        return _class

def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, POINTER_T(ctypes.c_char))



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16



sys_prop_is_available = _libraries['libputils.so'].sys_prop_is_available
sys_prop_is_available.restype = ctypes.c_int32
sys_prop_is_available.argtypes = []
sys_prop_get = _libraries['libputils.so'].sys_prop_get
sys_prop_get.restype = ctypes.c_int32
sys_prop_get.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char)]
sys_prop_set = _libraries['libputils.so'].sys_prop_set
sys_prop_set.restype = ctypes.c_int32
sys_prop_set.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char)]
sys_prop_update = _libraries['libputils.so'].sys_prop_update
sys_prop_update.restype = ctypes.c_int32
sys_prop_update.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char)]
sys_prop_cmpxchg = _libraries['libputils.so'].sys_prop_cmpxchg
sys_prop_cmpxchg.restype = ctypes.c_int32
sys_prop_cmpxchg.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char)]
sys_prop_list = _libraries['libputils.so'].sys_prop_list
sys_prop_list.restype = None
sys_prop_list.argtypes = [ctypes.CFUNCTYPE(None, POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(None)), POINTER_T(None)]
sys_prop_wait = _libraries['libputils.so'].sys_prop_wait
sys_prop_wait.restype = None
sys_prop_wait.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), ctypes.c_int32]
sys_prop_wait_value = _libraries['libputils.so'].sys_prop_wait_value
sys_prop_wait_value.restype = ctypes.c_int32
sys_prop_wait_value.argtypes = [POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), ctypes.c_int32]
__all__ = \
    ['sys_prop_cmpxchg', 'sys_prop_get', 'sys_prop_is_available',
    'sys_prop_list', 'sys_prop_set', 'sys_prop_update',
    'sys_prop_wait', 'sys_prop_wait_value']
