// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/netdebuglog.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fnetdebuglog_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fnetdebuglog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fnetdebuglog_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fnetdebuglog_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fnetdebuglog_2eproto();
namespace arsdk {
namespace netdebuglog {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_Log;
class Event_LogDefaultTypeInternal;
extern Event_LogDefaultTypeInternal _Event_Log_default_instance_;
}  // namespace netdebuglog
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::netdebuglog::Event* Arena::CreateMaybeMessage<::arsdk::netdebuglog::Event>(Arena*);
template<> ::arsdk::netdebuglog::Event_Log* Arena::CreateMaybeMessage<::arsdk::netdebuglog::Event_Log>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace netdebuglog {

// ===================================================================

class Event_Log :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.netdebuglog.Event.Log) */ {
 public:
  Event_Log();
  virtual ~Event_Log();

  Event_Log(const Event_Log& from);

  inline Event_Log& operator=(const Event_Log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Log(Event_Log&& from) noexcept
    : Event_Log() {
    *this = ::std::move(from);
  }

  inline Event_Log& operator=(Event_Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Log* internal_default_instance() {
    return reinterpret_cast<const Event_Log*>(
               &_Event_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Event_Log* other);
  friend void swap(Event_Log& a, Event_Log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Log* New() const final {
    return CreateMaybeMessage<Event_Log>(nullptr);
  }

  Event_Log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_Log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_Log& from);
  void MergeFrom(const Event_Log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  #if LANG_CXX11
  void set_serial(::std::string&& value);
  #endif
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:arsdk.netdebuglog.Event.Log)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fnetdebuglog_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.netdebuglog.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kLog = 17,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_Log Log;

  // accessors -------------------------------------------------------

  // .arsdk.netdebuglog.Event.Log log = 17;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 17;
  const ::arsdk::netdebuglog::Event_Log& log() const;
  ::arsdk::netdebuglog::Event_Log* release_log();
  ::arsdk::netdebuglog::Event_Log* mutable_log();
  void set_allocated_log(::arsdk::netdebuglog::Event_Log* log);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.netdebuglog.Event)
 private:
  class HasBitSetters;
  void set_has_log();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::netdebuglog::Event_Log* log_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fnetdebuglog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_Log

// string serial = 1;
inline void Event_Log::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event_Log::serial() const {
  // @@protoc_insertion_point(field_get:arsdk.netdebuglog.Event.Log.serial)
  return serial_.GetNoArena();
}
inline void Event_Log::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.netdebuglog.Event.Log.serial)
}
#if LANG_CXX11
inline void Event_Log::set_serial(::std::string&& value) {
  
  serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.netdebuglog.Event.Log.serial)
}
#endif
inline void Event_Log::set_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.netdebuglog.Event.Log.serial)
}
inline void Event_Log::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.netdebuglog.Event.Log.serial)
}
inline ::std::string* Event_Log::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.netdebuglog.Event.Log.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Log::release_serial() {
  // @@protoc_insertion_point(field_release:arsdk.netdebuglog.Event.Log.serial)
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Log::set_allocated_serial(::std::string* serial) {
  if (serial != nullptr) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:arsdk.netdebuglog.Event.Log.serial)
}

// string msg = 2;
inline void Event_Log::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event_Log::msg() const {
  // @@protoc_insertion_point(field_get:arsdk.netdebuglog.Event.Log.msg)
  return msg_.GetNoArena();
}
inline void Event_Log::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arsdk.netdebuglog.Event.Log.msg)
}
#if LANG_CXX11
inline void Event_Log::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arsdk.netdebuglog.Event.Log.msg)
}
#endif
inline void Event_Log::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arsdk.netdebuglog.Event.Log.msg)
}
inline void Event_Log::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arsdk.netdebuglog.Event.Log.msg)
}
inline ::std::string* Event_Log::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:arsdk.netdebuglog.Event.Log.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Log::release_msg() {
  // @@protoc_insertion_point(field_release:arsdk.netdebuglog.Event.Log.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Log::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:arsdk.netdebuglog.Event.Log.msg)
}

// -------------------------------------------------------------------

// Event

// .arsdk.netdebuglog.Event.Log log = 17;
inline bool Event::has_log() const {
  return id_case() == kLog;
}
inline void Event::set_has_log() {
  _oneof_case_[0] = kLog;
}
inline void Event::clear_log() {
  if (has_log()) {
    delete id_.log_;
    clear_has_id();
  }
}
inline ::arsdk::netdebuglog::Event_Log* Event::release_log() {
  // @@protoc_insertion_point(field_release:arsdk.netdebuglog.Event.log)
  if (has_log()) {
    clear_has_id();
      ::arsdk::netdebuglog::Event_Log* temp = id_.log_;
    id_.log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::netdebuglog::Event_Log& Event::log() const {
  // @@protoc_insertion_point(field_get:arsdk.netdebuglog.Event.log)
  return has_log()
      ? *id_.log_
      : *reinterpret_cast< ::arsdk::netdebuglog::Event_Log*>(&::arsdk::netdebuglog::_Event_Log_default_instance_);
}
inline ::arsdk::netdebuglog::Event_Log* Event::mutable_log() {
  if (!has_log()) {
    clear_id();
    set_has_log();
    id_.log_ = CreateMaybeMessage< ::arsdk::netdebuglog::Event_Log >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.netdebuglog.Event.log)
  return id_.log_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace netdebuglog
}  // namespace arsdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fnetdebuglog_2eproto
