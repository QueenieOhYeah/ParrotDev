// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/controller_network.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fcontroller_5fnetwork_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fcontroller_5fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "parrot/protobuf/extensions.pb.h"
#include "arsdk/network.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fcontroller_5fnetwork_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fcontroller_5fnetwork_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fcontroller_5fnetwork_2eproto();
namespace arsdk {
namespace controllernetwork {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_GetState;
class Command_GetStateDefaultTypeInternal;
extern Command_GetStateDefaultTypeInternal _Command_GetState_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_State;
class Event_StateDefaultTypeInternal;
extern Event_StateDefaultTypeInternal _Event_State_default_instance_;
}  // namespace controllernetwork
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::controllernetwork::Command* Arena::CreateMaybeMessage<::arsdk::controllernetwork::Command>(Arena*);
template<> ::arsdk::controllernetwork::Command_GetState* Arena::CreateMaybeMessage<::arsdk::controllernetwork::Command_GetState>(Arena*);
template<> ::arsdk::controllernetwork::Event* Arena::CreateMaybeMessage<::arsdk::controllernetwork::Event>(Arena*);
template<> ::arsdk::controllernetwork::Event_State* Arena::CreateMaybeMessage<::arsdk::controllernetwork::Event_State>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace controllernetwork {

// ===================================================================

class Command_GetState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.controllernetwork.Command.GetState) */ {
 public:
  Command_GetState();
  virtual ~Command_GetState();

  Command_GetState(const Command_GetState& from);

  inline Command_GetState& operator=(const Command_GetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_GetState(Command_GetState&& from) noexcept
    : Command_GetState() {
    *this = ::std::move(from);
  }

  inline Command_GetState& operator=(Command_GetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_GetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_GetState* internal_default_instance() {
    return reinterpret_cast<const Command_GetState*>(
               &_Command_GetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_GetState* other);
  friend void swap(Command_GetState& a, Command_GetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_GetState* New() const final {
    return CreateMaybeMessage<Command_GetState>(nullptr);
  }

  Command_GetState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_GetState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_GetState& from);
  void MergeFrom(const Command_GetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_GetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:arsdk.controllernetwork.Command.GetState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcontroller_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.controllernetwork.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kGetState = 16,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_GetState GetState;

  // accessors -------------------------------------------------------

  // .arsdk.controllernetwork.Command.GetState get_state = 16;
  bool has_get_state() const;
  void clear_get_state();
  static const int kGetStateFieldNumber = 16;
  const ::arsdk::controllernetwork::Command_GetState& get_state() const;
  ::arsdk::controllernetwork::Command_GetState* release_get_state();
  ::arsdk::controllernetwork::Command_GetState* mutable_get_state();
  void set_allocated_get_state(::arsdk::controllernetwork::Command_GetState* get_state);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.controllernetwork.Command)
 private:
  class HasBitSetters;
  void set_has_get_state();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::controllernetwork::Command_GetState* get_state_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fcontroller_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Event_State :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.controllernetwork.Event.State) */ {
 public:
  Event_State();
  virtual ~Event_State();

  Event_State(const Event_State& from);

  inline Event_State& operator=(const Event_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_State(Event_State&& from) noexcept
    : Event_State() {
    *this = ::std::move(from);
  }

  inline Event_State& operator=(Event_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_State* internal_default_instance() {
    return reinterpret_cast<const Event_State*>(
               &_Event_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Event_State* other);
  friend void swap(Event_State& a, Event_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_State* New() const final {
    return CreateMaybeMessage<Event_State>(nullptr);
  }

  Event_State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_State& from);
  void MergeFrom(const Event_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .arsdk.network.LinksStatus links_status = 4;
  bool has_links_status() const;
  void clear_links_status();
  static const int kLinksStatusFieldNumber = 4;
  const ::arsdk::network::LinksStatus& links_status() const;
  ::arsdk::network::LinksStatus* release_links_status();
  ::arsdk::network::LinksStatus* mutable_links_status();
  void set_allocated_links_status(::arsdk::network::LinksStatus* links_status);

  // @@protoc_insertion_point(class_scope:arsdk.controllernetwork.Event.State)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arsdk::network::LinksStatus* links_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fcontroller_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.controllernetwork.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kState = 16,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_State State;

  // accessors -------------------------------------------------------

  // .arsdk.controllernetwork.Event.State state = 16;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 16;
  const ::arsdk::controllernetwork::Event_State& state() const;
  ::arsdk::controllernetwork::Event_State* release_state();
  ::arsdk::controllernetwork::Event_State* mutable_state();
  void set_allocated_state(::arsdk::controllernetwork::Event_State* state);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.controllernetwork.Event)
 private:
  class HasBitSetters;
  void set_has_state();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::controllernetwork::Event_State* state_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fcontroller_5fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_GetState

// -------------------------------------------------------------------

// Command

// .arsdk.controllernetwork.Command.GetState get_state = 16;
inline bool Command::has_get_state() const {
  return id_case() == kGetState;
}
inline void Command::set_has_get_state() {
  _oneof_case_[0] = kGetState;
}
inline void Command::clear_get_state() {
  if (has_get_state()) {
    delete id_.get_state_;
    clear_has_id();
  }
}
inline ::arsdk::controllernetwork::Command_GetState* Command::release_get_state() {
  // @@protoc_insertion_point(field_release:arsdk.controllernetwork.Command.get_state)
  if (has_get_state()) {
    clear_has_id();
      ::arsdk::controllernetwork::Command_GetState* temp = id_.get_state_;
    id_.get_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::controllernetwork::Command_GetState& Command::get_state() const {
  // @@protoc_insertion_point(field_get:arsdk.controllernetwork.Command.get_state)
  return has_get_state()
      ? *id_.get_state_
      : *reinterpret_cast< ::arsdk::controllernetwork::Command_GetState*>(&::arsdk::controllernetwork::_Command_GetState_default_instance_);
}
inline ::arsdk::controllernetwork::Command_GetState* Command::mutable_get_state() {
  if (!has_get_state()) {
    clear_id();
    set_has_get_state();
    id_.get_state_ = CreateMaybeMessage< ::arsdk::controllernetwork::Command_GetState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.controllernetwork.Command.get_state)
  return id_.get_state_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_State

// .arsdk.network.LinksStatus links_status = 4;
inline bool Event_State::has_links_status() const {
  return this != internal_default_instance() && links_status_ != nullptr;
}
inline const ::arsdk::network::LinksStatus& Event_State::links_status() const {
  const ::arsdk::network::LinksStatus* p = links_status_;
  // @@protoc_insertion_point(field_get:arsdk.controllernetwork.Event.State.links_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::arsdk::network::LinksStatus*>(
      &::arsdk::network::_LinksStatus_default_instance_);
}
inline ::arsdk::network::LinksStatus* Event_State::release_links_status() {
  // @@protoc_insertion_point(field_release:arsdk.controllernetwork.Event.State.links_status)
  
  ::arsdk::network::LinksStatus* temp = links_status_;
  links_status_ = nullptr;
  return temp;
}
inline ::arsdk::network::LinksStatus* Event_State::mutable_links_status() {
  
  if (links_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::arsdk::network::LinksStatus>(GetArenaNoVirtual());
    links_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:arsdk.controllernetwork.Event.State.links_status)
  return links_status_;
}
inline void Event_State::set_allocated_links_status(::arsdk::network::LinksStatus* links_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(links_status_);
  }
  if (links_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      links_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, links_status, submessage_arena);
    }
    
  } else {
    
  }
  links_status_ = links_status;
  // @@protoc_insertion_point(field_set_allocated:arsdk.controllernetwork.Event.State.links_status)
}

// -------------------------------------------------------------------

// Event

// .arsdk.controllernetwork.Event.State state = 16;
inline bool Event::has_state() const {
  return id_case() == kState;
}
inline void Event::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Event::clear_state() {
  if (has_state()) {
    delete id_.state_;
    clear_has_id();
  }
}
inline ::arsdk::controllernetwork::Event_State* Event::release_state() {
  // @@protoc_insertion_point(field_release:arsdk.controllernetwork.Event.state)
  if (has_state()) {
    clear_has_id();
      ::arsdk::controllernetwork::Event_State* temp = id_.state_;
    id_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::controllernetwork::Event_State& Event::state() const {
  // @@protoc_insertion_point(field_get:arsdk.controllernetwork.Event.state)
  return has_state()
      ? *id_.state_
      : *reinterpret_cast< ::arsdk::controllernetwork::Event_State*>(&::arsdk::controllernetwork::_Event_State_default_instance_);
}
inline ::arsdk::controllernetwork::Event_State* Event::mutable_state() {
  if (!has_state()) {
    clear_id();
    set_has_state();
    id_.state_ = CreateMaybeMessage< ::arsdk::controllernetwork::Event_State >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.controllernetwork.Event.state)
  return id_.state_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace controllernetwork
}  // namespace arsdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fcontroller_5fnetwork_2eproto
