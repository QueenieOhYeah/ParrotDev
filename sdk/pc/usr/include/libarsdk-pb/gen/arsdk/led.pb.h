// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arsdk/led.proto

#ifndef PROTOBUF_INCLUDED_arsdk_2fled_2eproto
#define PROTOBUF_INCLUDED_arsdk_2fled_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "parrot/protobuf/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arsdk_2fled_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_arsdk_2fled_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_arsdk_2fled_2eproto();
namespace arsdk {
namespace led {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_SetLuminosity;
class Command_SetLuminosityDefaultTypeInternal;
extern Command_SetLuminosityDefaultTypeInternal _Command_SetLuminosity_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_Luminosity;
class Event_LuminosityDefaultTypeInternal;
extern Event_LuminosityDefaultTypeInternal _Event_Luminosity_default_instance_;
}  // namespace led
}  // namespace arsdk
namespace google {
namespace protobuf {
template<> ::arsdk::led::Command* Arena::CreateMaybeMessage<::arsdk::led::Command>(Arena*);
template<> ::arsdk::led::Command_SetLuminosity* Arena::CreateMaybeMessage<::arsdk::led::Command_SetLuminosity>(Arena*);
template<> ::arsdk::led::Event* Arena::CreateMaybeMessage<::arsdk::led::Event>(Arena*);
template<> ::arsdk::led::Event_Luminosity* Arena::CreateMaybeMessage<::arsdk::led::Event_Luminosity>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace arsdk {
namespace led {

// ===================================================================

class Command_SetLuminosity :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.led.Command.SetLuminosity) */ {
 public:
  Command_SetLuminosity();
  virtual ~Command_SetLuminosity();

  Command_SetLuminosity(const Command_SetLuminosity& from);

  inline Command_SetLuminosity& operator=(const Command_SetLuminosity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_SetLuminosity(Command_SetLuminosity&& from) noexcept
    : Command_SetLuminosity() {
    *this = ::std::move(from);
  }

  inline Command_SetLuminosity& operator=(Command_SetLuminosity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command_SetLuminosity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_SetLuminosity* internal_default_instance() {
    return reinterpret_cast<const Command_SetLuminosity*>(
               &_Command_SetLuminosity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_SetLuminosity* other);
  friend void swap(Command_SetLuminosity& a, Command_SetLuminosity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_SetLuminosity* New() const final {
    return CreateMaybeMessage<Command_SetLuminosity>(nullptr);
  }

  Command_SetLuminosity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_SetLuminosity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_SetLuminosity& from);
  void MergeFrom(const Command_SetLuminosity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SetLuminosity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:arsdk.led.Command.SetLuminosity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fled_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.led.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kGetLuminosity = 16,
    kSetLuminosity = 17,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_SetLuminosity SetLuminosity;

  // accessors -------------------------------------------------------

  // .google.protobuf.Empty get_luminosity = 16;
  bool has_get_luminosity() const;
  void clear_get_luminosity();
  static const int kGetLuminosityFieldNumber = 16;
  const ::google::protobuf::Empty& get_luminosity() const;
  ::google::protobuf::Empty* release_get_luminosity();
  ::google::protobuf::Empty* mutable_get_luminosity();
  void set_allocated_get_luminosity(::google::protobuf::Empty* get_luminosity);

  // .arsdk.led.Command.SetLuminosity set_luminosity = 17;
  bool has_set_luminosity() const;
  void clear_set_luminosity();
  static const int kSetLuminosityFieldNumber = 17;
  const ::arsdk::led::Command_SetLuminosity& set_luminosity() const;
  ::arsdk::led::Command_SetLuminosity* release_set_luminosity();
  ::arsdk::led::Command_SetLuminosity* mutable_set_luminosity();
  void set_allocated_set_luminosity(::arsdk::led::Command_SetLuminosity* set_luminosity);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.led.Command)
 private:
  class HasBitSetters;
  void set_has_get_luminosity();
  void set_has_set_luminosity();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::Empty* get_luminosity_;
    ::arsdk::led::Command_SetLuminosity* set_luminosity_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fled_2eproto;
};
// -------------------------------------------------------------------

class Event_Luminosity :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.led.Event.Luminosity) */ {
 public:
  Event_Luminosity();
  virtual ~Event_Luminosity();

  Event_Luminosity(const Event_Luminosity& from);

  inline Event_Luminosity& operator=(const Event_Luminosity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Luminosity(Event_Luminosity&& from) noexcept
    : Event_Luminosity() {
    *this = ::std::move(from);
  }

  inline Event_Luminosity& operator=(Event_Luminosity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event_Luminosity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Luminosity* internal_default_instance() {
    return reinterpret_cast<const Event_Luminosity*>(
               &_Event_Luminosity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Event_Luminosity* other);
  friend void swap(Event_Luminosity& a, Event_Luminosity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Luminosity* New() const final {
    return CreateMaybeMessage<Event_Luminosity>(nullptr);
  }

  Event_Luminosity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event_Luminosity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event_Luminosity& from);
  void MergeFrom(const Event_Luminosity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Luminosity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:arsdk.led.Event.Luminosity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arsdk_2fled_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arsdk.led.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kLuminosity = 16,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_Luminosity Luminosity;

  // accessors -------------------------------------------------------

  // .arsdk.led.Event.Luminosity luminosity = 16;
  bool has_luminosity() const;
  void clear_luminosity();
  static const int kLuminosityFieldNumber = 16;
  const ::arsdk::led::Event_Luminosity& luminosity() const;
  ::arsdk::led::Event_Luminosity* release_luminosity();
  ::arsdk::led::Event_Luminosity* mutable_luminosity();
  void set_allocated_luminosity(::arsdk::led::Event_Luminosity* luminosity);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:arsdk.led.Event)
 private:
  class HasBitSetters;
  void set_has_luminosity();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::arsdk::led::Event_Luminosity* luminosity_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arsdk_2fled_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_SetLuminosity

// uint32 value = 1;
inline void Command_SetLuminosity::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 Command_SetLuminosity::value() const {
  // @@protoc_insertion_point(field_get:arsdk.led.Command.SetLuminosity.value)
  return value_;
}
inline void Command_SetLuminosity::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:arsdk.led.Command.SetLuminosity.value)
}

// -------------------------------------------------------------------

// Command

// .google.protobuf.Empty get_luminosity = 16;
inline bool Command::has_get_luminosity() const {
  return id_case() == kGetLuminosity;
}
inline void Command::set_has_get_luminosity() {
  _oneof_case_[0] = kGetLuminosity;
}
inline ::google::protobuf::Empty* Command::release_get_luminosity() {
  // @@protoc_insertion_point(field_release:arsdk.led.Command.get_luminosity)
  if (has_get_luminosity()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.get_luminosity_;
    id_.get_luminosity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::get_luminosity() const {
  // @@protoc_insertion_point(field_get:arsdk.led.Command.get_luminosity)
  return has_get_luminosity()
      ? *id_.get_luminosity_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_get_luminosity() {
  if (!has_get_luminosity()) {
    clear_id();
    set_has_get_luminosity();
    id_.get_luminosity_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.led.Command.get_luminosity)
  return id_.get_luminosity_;
}

// .arsdk.led.Command.SetLuminosity set_luminosity = 17;
inline bool Command::has_set_luminosity() const {
  return id_case() == kSetLuminosity;
}
inline void Command::set_has_set_luminosity() {
  _oneof_case_[0] = kSetLuminosity;
}
inline void Command::clear_set_luminosity() {
  if (has_set_luminosity()) {
    delete id_.set_luminosity_;
    clear_has_id();
  }
}
inline ::arsdk::led::Command_SetLuminosity* Command::release_set_luminosity() {
  // @@protoc_insertion_point(field_release:arsdk.led.Command.set_luminosity)
  if (has_set_luminosity()) {
    clear_has_id();
      ::arsdk::led::Command_SetLuminosity* temp = id_.set_luminosity_;
    id_.set_luminosity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::led::Command_SetLuminosity& Command::set_luminosity() const {
  // @@protoc_insertion_point(field_get:arsdk.led.Command.set_luminosity)
  return has_set_luminosity()
      ? *id_.set_luminosity_
      : *reinterpret_cast< ::arsdk::led::Command_SetLuminosity*>(&::arsdk::led::_Command_SetLuminosity_default_instance_);
}
inline ::arsdk::led::Command_SetLuminosity* Command::mutable_set_luminosity() {
  if (!has_set_luminosity()) {
    clear_id();
    set_has_set_luminosity();
    id_.set_luminosity_ = CreateMaybeMessage< ::arsdk::led::Command_SetLuminosity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.led.Command.set_luminosity)
  return id_.set_luminosity_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_Luminosity

// uint32 value = 1;
inline void Event_Luminosity::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 Event_Luminosity::value() const {
  // @@protoc_insertion_point(field_get:arsdk.led.Event.Luminosity.value)
  return value_;
}
inline void Event_Luminosity::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:arsdk.led.Event.Luminosity.value)
}

// -------------------------------------------------------------------

// Event

// .arsdk.led.Event.Luminosity luminosity = 16;
inline bool Event::has_luminosity() const {
  return id_case() == kLuminosity;
}
inline void Event::set_has_luminosity() {
  _oneof_case_[0] = kLuminosity;
}
inline void Event::clear_luminosity() {
  if (has_luminosity()) {
    delete id_.luminosity_;
    clear_has_id();
  }
}
inline ::arsdk::led::Event_Luminosity* Event::release_luminosity() {
  // @@protoc_insertion_point(field_release:arsdk.led.Event.luminosity)
  if (has_luminosity()) {
    clear_has_id();
      ::arsdk::led::Event_Luminosity* temp = id_.luminosity_;
    id_.luminosity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arsdk::led::Event_Luminosity& Event::luminosity() const {
  // @@protoc_insertion_point(field_get:arsdk.led.Event.luminosity)
  return has_luminosity()
      ? *id_.luminosity_
      : *reinterpret_cast< ::arsdk::led::Event_Luminosity*>(&::arsdk::led::_Event_Luminosity_default_instance_);
}
inline ::arsdk::led::Event_Luminosity* Event::mutable_luminosity() {
  if (!has_luminosity()) {
    clear_id();
    set_has_luminosity();
    id_.luminosity_ = CreateMaybeMessage< ::arsdk::led::Event_Luminosity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:arsdk.led.Event.luminosity)
  return id_.luminosity_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace led
}  // namespace arsdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_arsdk_2fled_2eproto
