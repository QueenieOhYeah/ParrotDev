/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: arsdk/network.proto */

#ifndef PROTOBUF_C_arsdk_2fnetwork_2eproto__INCLUDED
#define PROTOBUF_C_arsdk_2fnetwork_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "parrot/protobuf/extensions.pb-c.h"

typedef struct _Arsdk__Network__Command Arsdk__Network__Command;
typedef struct _Arsdk__Network__Command__GetState Arsdk__Network__Command__GetState;
typedef struct _Arsdk__Network__Command__SetRoutingPolicy Arsdk__Network__Command__SetRoutingPolicy;
typedef struct _Arsdk__Network__Command__SetCellularMaxBitrate Arsdk__Network__Command__SetCellularMaxBitrate;
typedef struct _Arsdk__Network__Command__SetDirectConnection Arsdk__Network__Command__SetDirectConnection;
typedef struct _Arsdk__Network__Event Arsdk__Network__Event;
typedef struct _Arsdk__Network__Event__State Arsdk__Network__Event__State;
typedef struct _Arsdk__Network__Capabilities Arsdk__Network__Capabilities;
typedef struct _Arsdk__Network__RoutingInfo Arsdk__Network__RoutingInfo;
typedef struct _Arsdk__Network__GlobalLinkQuality Arsdk__Network__GlobalLinkQuality;
typedef struct _Arsdk__Network__LinksStatus Arsdk__Network__LinksStatus;
typedef struct _Arsdk__Network__LinksStatus__LinkInfo Arsdk__Network__LinksStatus__LinkInfo;
typedef struct _Arsdk__Network__CellularMaxBitrate Arsdk__Network__CellularMaxBitrate;


/* --- enums --- */

/*
 * Routing policy. 
 */
typedef enum _Arsdk__Network__RoutingPolicy {
  /*
   * Broadcast to all links. 
   */
  ARSDK__NETWORK__ROUTING_POLICY__ROUTING_POLICY_ALL = 0,
  /*
   * Use Wlan link if available, otherwise broadcast. 
   */
  ARSDK__NETWORK__ROUTING_POLICY__ROUTING_POLICY_WLAN = 1,
  /*
   * Use Cellular link if available, otherwise broadcast. 
   */
  ARSDK__NETWORK__ROUTING_POLICY__ROUTING_POLICY_CELLULAR = 2,
  /*
   * Select best link. 
   */
  ARSDK__NETWORK__ROUTING_POLICY__ROUTING_POLICY_HYBRID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__ROUTING_POLICY)
} Arsdk__Network__RoutingPolicy;
/*
 * Routing link. 
 */
typedef enum _Arsdk__Network__RoutingLink {
  /*
   * Unspecified link. 
   */
  ARSDK__NETWORK__ROUTING_LINK__ROUTING_LINK_ANY = 0,
  /*
   * Wlan link. 
   */
  ARSDK__NETWORK__ROUTING_LINK__ROUTING_LINK_WLAN = 1,
  /*
   * Cellular link. 
   */
  ARSDK__NETWORK__ROUTING_LINK__ROUTING_LINK_CELLULAR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__ROUTING_LINK)
} Arsdk__Network__RoutingLink;
/*
 * Link status. 
 */
typedef enum _Arsdk__Network__LinkStatus {
  /*
   * Interface is down. 
   */
  ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_DOWN = 0,
  /*
   * Interface is up with IP connectivity. 
   */
  ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_UP = 1,
  /*
   * Starfish session established on the link. 
   */
  ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_RUNNING = 2,
  /*
   * Link is ready to connect or accept connections. 
   */
  ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_READY = 3,
  /*
   * Connection in progress. 
   */
  ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_CONNECTING = 4,
  /*
   * Link error, see LinkError value. 
   */
  ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_ERROR = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__LINK_STATUS)
} Arsdk__Network__LinkStatus;
/*
 * Link type. 
 */
typedef enum _Arsdk__Network__LinkType {
  /*
   * Unknown. 
   */
  ARSDK__NETWORK__LINK_TYPE__LINK_TYPE_UNKNOWN = 0,
  /*
   * Reserved. 
   */
  ARSDK__NETWORK__LINK_TYPE__LINK_TYPE_LO = 1,
  /*
   * Reserved. 
   */
  ARSDK__NETWORK__LINK_TYPE__LINK_TYPE_LAN = 2,
  /*
   * Wlan (Wi-Fi) interface. 
   */
  ARSDK__NETWORK__LINK_TYPE__LINK_TYPE_WLAN = 3,
  /*
   * Cellular (4G) interface. 
   */
  ARSDK__NETWORK__LINK_TYPE__LINK_TYPE_CELLULAR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__LINK_TYPE)
} Arsdk__Network__LinkType;
/*
 * Link error. 
 */
typedef enum _Arsdk__Network__LinkError {
  /*
   * No error. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_NONE = 0,
  /*
   * Failed to resolve DNS address. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_DNS = 1,
  /*
   * Failed to connect to SIP server. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_CONNECT = 2,
  /*
   * Failed to authenticate to server. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_AUTHENTICATION = 3,
  /*
   * Failed to publish drone status. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_PUBLISH = 4,
  /*
   * Failed to establish communication link. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_COMM_LINK = 5,
  /*
   * Lost connection with peer. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_TIMEOUT = 6,
  /*
   * Failed to invite drone. 
   */
  ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_INVITE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__LINK_ERROR)
} Arsdk__Network__LinkError;
/*
 * Direct connection mode 
 */
typedef enum _Arsdk__Network__DirectConnectionMode {
  /*
   * Legacy mode: secure connection is not mandatory. 
   */
  ARSDK__NETWORK__DIRECT_CONNECTION_MODE__DIRECT_CONNECTION_MODE_LEGACY = 0,
  /*
   * Only secure connections are authorized. 
   */
  ARSDK__NETWORK__DIRECT_CONNECTION_MODE__DIRECT_CONNECTION_MODE_SECURE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__DIRECT_CONNECTION_MODE)
} Arsdk__Network__DirectConnectionMode;

/* --- messages --- */

/*
 * Get current state. 
 */
struct  _Arsdk__Network__Command__GetState
{
  ProtobufCMessage base;
  /*
   * Include default_capabilities in response. 
   */
  protobuf_c_boolean include_default_capabilities;
};
#define ARSDK__NETWORK__COMMAND__GET_STATE__INCLUDE_DEFAULT_CAPABILITIES__FIELD_NUMBER 1
#define ARSDK__NETWORK__COMMAND__GET_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__command__get_state__descriptor) \
    , 0 }


/*
 * Set routing policy. 
 */
struct  _Arsdk__Network__Command__SetRoutingPolicy
{
  ProtobufCMessage base;
  /*
   * Routing policy. 
   */
  Arsdk__Network__RoutingPolicy policy;
};
#define ARSDK__NETWORK__COMMAND__SET_ROUTING_POLICY__POLICY__FIELD_NUMBER 1
#define ARSDK__NETWORK__COMMAND__SET_ROUTING_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__command__set_routing_policy__descriptor) \
    , ARSDK__NETWORK__ROUTING_POLICY__ROUTING_POLICY_ALL }


/*
 * Change Cellular Max bitrate. 
 */
struct  _Arsdk__Network__Command__SetCellularMaxBitrate
{
  ProtobufCMessage base;
  /*
   * Maximum bitrate in Kbps (0 for default value) 
   */
  int32_t max_bitrate;
};
#define ARSDK__NETWORK__COMMAND__SET_CELLULAR_MAX_BITRATE__MAX_BITRATE__FIELD_NUMBER 1
#define ARSDK__NETWORK__COMMAND__SET_CELLULAR_MAX_BITRATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__command__set_cellular_max_bitrate__descriptor) \
    , 0 }


/*
 * Set direct connection mode
 * State is sent afterwards. 
 */
struct  _Arsdk__Network__Command__SetDirectConnection
{
  ProtobufCMessage base;
  Arsdk__Network__DirectConnectionMode mode;
};
#define ARSDK__NETWORK__COMMAND__SET_DIRECT_CONNECTION__MODE__FIELD_NUMBER 1
#define ARSDK__NETWORK__COMMAND__SET_DIRECT_CONNECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__command__set_direct_connection__descriptor) \
    , ARSDK__NETWORK__DIRECT_CONNECTION_MODE__DIRECT_CONNECTION_MODE_LEGACY }


typedef enum {
  ARSDK__NETWORK__COMMAND__ID__NOT_SET = 0,
  ARSDK__NETWORK__COMMAND__ID_GET_STATE = 16,
  ARSDK__NETWORK__COMMAND__ID_SET_ROUTING_POLICY = 17,
  ARSDK__NETWORK__COMMAND__ID_SET_CELLULAR_MAX_BITRATE = 18,
  ARSDK__NETWORK__COMMAND__ID_SET_DIRECT_CONNECTION = 19
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__COMMAND__ID)
} Arsdk__Network__Command__IdCase;

/*
 * This is the entry point to send messages to the drone. 
 */
struct  _Arsdk__Network__Command
{
  ProtobufCMessage base;
  Arsdk__Network__Command__IdCase id_case;
  union {
    Arsdk__Network__Command__GetState *get_state;
    Arsdk__Network__Command__SetRoutingPolicy *set_routing_policy;
    Arsdk__Network__Command__SetCellularMaxBitrate *set_cellular_max_bitrate;
    Arsdk__Network__Command__SetDirectConnection *set_direct_connection;
  };
};
#define ARSDK__NETWORK__COMMAND__GET_STATE__FIELD_NUMBER 16
#define ARSDK__NETWORK__COMMAND__SET_ROUTING_POLICY__FIELD_NUMBER 17
#define ARSDK__NETWORK__COMMAND__SET_CELLULAR_MAX_BITRATE__FIELD_NUMBER 18
#define ARSDK__NETWORK__COMMAND__SET_DIRECT_CONNECTION__FIELD_NUMBER 19
#define ARSDK__NETWORK__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__command__descriptor) \
    , ARSDK__NETWORK__COMMAND__ID__NOT_SET, {0} }


/*
 * Current state. 
 */
struct  _Arsdk__Network__Event__State
{
  ProtobufCMessage base;
  Arsdk__Network__Capabilities *default_capabilities;
  Arsdk__Network__RoutingInfo *routing_info;
  Arsdk__Network__GlobalLinkQuality *global_link_quality;
  Arsdk__Network__LinksStatus *links_status;
  Arsdk__Network__CellularMaxBitrate *cellular_max_bitrate;
  Arsdk__Network__DirectConnectionMode direct_connection_mode;
};
#define ARSDK__NETWORK__EVENT__STATE__DEFAULT_CAPABILITIES__FIELD_NUMBER 1
#define ARSDK__NETWORK__EVENT__STATE__ROUTING_INFO__FIELD_NUMBER 2
#define ARSDK__NETWORK__EVENT__STATE__GLOBAL_LINK_QUALITY__FIELD_NUMBER 3
#define ARSDK__NETWORK__EVENT__STATE__LINKS_STATUS__FIELD_NUMBER 4
#define ARSDK__NETWORK__EVENT__STATE__CELLULAR_MAX_BITRATE__FIELD_NUMBER 5
#define ARSDK__NETWORK__EVENT__STATE__DIRECT_CONNECTION_MODE__FIELD_NUMBER 6
#define ARSDK__NETWORK__EVENT__STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__event__state__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, ARSDK__NETWORK__DIRECT_CONNECTION_MODE__DIRECT_CONNECTION_MODE_LEGACY }


typedef enum {
  ARSDK__NETWORK__EVENT__ID__NOT_SET = 0,
  ARSDK__NETWORK__EVENT__ID_STATE = 19
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__NETWORK__EVENT__ID)
} Arsdk__Network__Event__IdCase;

/*
 * This is the entry point to receive messages from the drone. 
 */
struct  _Arsdk__Network__Event
{
  ProtobufCMessage base;
  Arsdk__Network__Event__IdCase id_case;
  union {
    Arsdk__Network__Event__State *state;
  };
};
#define ARSDK__NETWORK__EVENT__STATE__FIELD_NUMBER 19
#define ARSDK__NETWORK__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__event__descriptor) \
    , ARSDK__NETWORK__EVENT__ID__NOT_SET, {0} }


/*
 * Capabilities. 
 */
struct  _Arsdk__Network__Capabilities
{
  ProtobufCMessage base;
  /*
   * Minimum bitrate of cellular link in Kbps. 
   */
  int32_t cellular_min_bitrate;
  /*
   * Maximum bitrate of cellular link in Kbps. 
   */
  int32_t cellular_max_bitrate;
  /*
   * DirectConnectionMode supported 
   */
  size_t n_supported_direct_connection_modes;
  Arsdk__Network__DirectConnectionMode *supported_direct_connection_modes;
};
#define ARSDK__NETWORK__CAPABILITIES__CELLULAR_MIN_BITRATE__FIELD_NUMBER 1
#define ARSDK__NETWORK__CAPABILITIES__CELLULAR_MAX_BITRATE__FIELD_NUMBER 2
#define ARSDK__NETWORK__CAPABILITIES__SUPPORTED_DIRECT_CONNECTION_MODES__FIELD_NUMBER 3
#define ARSDK__NETWORK__CAPABILITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__capabilities__descriptor) \
    , 0, 0, 0,NULL }


/*
 * Routing information. 
 */
struct  _Arsdk__Network__RoutingInfo
{
  ProtobufCMessage base;
  /*
   * Routing policy. 
   */
  Arsdk__Network__RoutingPolicy policy;
  /*
   * Current selected link. 
   */
  Arsdk__Network__RoutingLink current_link;
};
#define ARSDK__NETWORK__ROUTING_INFO__POLICY__FIELD_NUMBER 1
#define ARSDK__NETWORK__ROUTING_INFO__CURRENT_LINK__FIELD_NUMBER 2
#define ARSDK__NETWORK__ROUTING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__routing_info__descriptor) \
    , ARSDK__NETWORK__ROUTING_POLICY__ROUTING_POLICY_ALL, ARSDK__NETWORK__ROUTING_LINK__ROUTING_LINK_ANY }


/*
 * Global link quality. 
 */
struct  _Arsdk__Network__GlobalLinkQuality
{
  ProtobufCMessage base;
  /*
   * Link quality indication: 1 (lower) to 5 (better),
   * 0 if not available. 
   */
  int32_t quality;
};
#define ARSDK__NETWORK__GLOBAL_LINK_QUALITY__QUALITY__FIELD_NUMBER 1
#define ARSDK__NETWORK__GLOBAL_LINK_QUALITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__global_link_quality__descriptor) \
    , 0 }


struct  _Arsdk__Network__LinksStatus__LinkInfo
{
  ProtobufCMessage base;
  /*
   * Type of link. 
   */
  Arsdk__Network__LinkType type;
  /*
   * Link status. 
   */
  Arsdk__Network__LinkStatus status;
  /*
   * Link quality indication. (see GlobalLinkQuality) 
   */
  int32_t quality;
  /*
   * Link error. 
   */
  Arsdk__Network__LinkError error;
};
#define ARSDK__NETWORK__LINKS_STATUS__LINK_INFO__TYPE__FIELD_NUMBER 1
#define ARSDK__NETWORK__LINKS_STATUS__LINK_INFO__STATUS__FIELD_NUMBER 2
#define ARSDK__NETWORK__LINKS_STATUS__LINK_INFO__QUALITY__FIELD_NUMBER 3
#define ARSDK__NETWORK__LINKS_STATUS__LINK_INFO__ERROR__FIELD_NUMBER 4
#define ARSDK__NETWORK__LINKS_STATUS__LINK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__links_status__link_info__descriptor) \
    , ARSDK__NETWORK__LINK_TYPE__LINK_TYPE_UNKNOWN, ARSDK__NETWORK__LINK_STATUS__LINK_STATUS_DOWN, 0, ARSDK__NETWORK__LINK_ERROR__LINK_ERROR_NONE }


/*
 * Links status. 
 */
struct  _Arsdk__Network__LinksStatus
{
  ProtobufCMessage base;
  size_t n_links;
  Arsdk__Network__LinksStatus__LinkInfo **links;
};
#define ARSDK__NETWORK__LINKS_STATUS__LINKS__FIELD_NUMBER 1
#define ARSDK__NETWORK__LINKS_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__links_status__descriptor) \
    , 0,NULL }


/*
 * Cellular Max bitrate. 
 */
struct  _Arsdk__Network__CellularMaxBitrate
{
  ProtobufCMessage base;
  /*
   * Maximum bitrate in Kbps. (0 for default value) 
   */
  int32_t max_bitrate;
};
#define ARSDK__NETWORK__CELLULAR_MAX_BITRATE__MAX_BITRATE__FIELD_NUMBER 1
#define ARSDK__NETWORK__CELLULAR_MAX_BITRATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__network__cellular_max_bitrate__descriptor) \
    , 0 }


/* Arsdk__Network__Command__GetState methods */
void   arsdk__network__command__get_state__init
                     (Arsdk__Network__Command__GetState         *message);
/* Arsdk__Network__Command__SetRoutingPolicy methods */
void   arsdk__network__command__set_routing_policy__init
                     (Arsdk__Network__Command__SetRoutingPolicy         *message);
/* Arsdk__Network__Command__SetCellularMaxBitrate methods */
void   arsdk__network__command__set_cellular_max_bitrate__init
                     (Arsdk__Network__Command__SetCellularMaxBitrate         *message);
/* Arsdk__Network__Command__SetDirectConnection methods */
void   arsdk__network__command__set_direct_connection__init
                     (Arsdk__Network__Command__SetDirectConnection         *message);
/* Arsdk__Network__Command methods */
void   arsdk__network__command__init
                     (Arsdk__Network__Command         *message);
size_t arsdk__network__command__get_packed_size
                     (const Arsdk__Network__Command   *message);
size_t arsdk__network__command__pack
                     (const Arsdk__Network__Command   *message,
                      uint8_t             *out);
size_t arsdk__network__command__pack_to_buffer
                     (const Arsdk__Network__Command   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__Command *
       arsdk__network__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__command__free_unpacked
                     (Arsdk__Network__Command *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Network__Event__State methods */
void   arsdk__network__event__state__init
                     (Arsdk__Network__Event__State         *message);
/* Arsdk__Network__Event methods */
void   arsdk__network__event__init
                     (Arsdk__Network__Event         *message);
size_t arsdk__network__event__get_packed_size
                     (const Arsdk__Network__Event   *message);
size_t arsdk__network__event__pack
                     (const Arsdk__Network__Event   *message,
                      uint8_t             *out);
size_t arsdk__network__event__pack_to_buffer
                     (const Arsdk__Network__Event   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__Event *
       arsdk__network__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__event__free_unpacked
                     (Arsdk__Network__Event *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Network__Capabilities methods */
void   arsdk__network__capabilities__init
                     (Arsdk__Network__Capabilities         *message);
size_t arsdk__network__capabilities__get_packed_size
                     (const Arsdk__Network__Capabilities   *message);
size_t arsdk__network__capabilities__pack
                     (const Arsdk__Network__Capabilities   *message,
                      uint8_t             *out);
size_t arsdk__network__capabilities__pack_to_buffer
                     (const Arsdk__Network__Capabilities   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__Capabilities *
       arsdk__network__capabilities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__capabilities__free_unpacked
                     (Arsdk__Network__Capabilities *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Network__RoutingInfo methods */
void   arsdk__network__routing_info__init
                     (Arsdk__Network__RoutingInfo         *message);
size_t arsdk__network__routing_info__get_packed_size
                     (const Arsdk__Network__RoutingInfo   *message);
size_t arsdk__network__routing_info__pack
                     (const Arsdk__Network__RoutingInfo   *message,
                      uint8_t             *out);
size_t arsdk__network__routing_info__pack_to_buffer
                     (const Arsdk__Network__RoutingInfo   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__RoutingInfo *
       arsdk__network__routing_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__routing_info__free_unpacked
                     (Arsdk__Network__RoutingInfo *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Network__GlobalLinkQuality methods */
void   arsdk__network__global_link_quality__init
                     (Arsdk__Network__GlobalLinkQuality         *message);
size_t arsdk__network__global_link_quality__get_packed_size
                     (const Arsdk__Network__GlobalLinkQuality   *message);
size_t arsdk__network__global_link_quality__pack
                     (const Arsdk__Network__GlobalLinkQuality   *message,
                      uint8_t             *out);
size_t arsdk__network__global_link_quality__pack_to_buffer
                     (const Arsdk__Network__GlobalLinkQuality   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__GlobalLinkQuality *
       arsdk__network__global_link_quality__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__global_link_quality__free_unpacked
                     (Arsdk__Network__GlobalLinkQuality *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Network__LinksStatus__LinkInfo methods */
void   arsdk__network__links_status__link_info__init
                     (Arsdk__Network__LinksStatus__LinkInfo         *message);
/* Arsdk__Network__LinksStatus methods */
void   arsdk__network__links_status__init
                     (Arsdk__Network__LinksStatus         *message);
size_t arsdk__network__links_status__get_packed_size
                     (const Arsdk__Network__LinksStatus   *message);
size_t arsdk__network__links_status__pack
                     (const Arsdk__Network__LinksStatus   *message,
                      uint8_t             *out);
size_t arsdk__network__links_status__pack_to_buffer
                     (const Arsdk__Network__LinksStatus   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__LinksStatus *
       arsdk__network__links_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__links_status__free_unpacked
                     (Arsdk__Network__LinksStatus *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Network__CellularMaxBitrate methods */
void   arsdk__network__cellular_max_bitrate__init
                     (Arsdk__Network__CellularMaxBitrate         *message);
size_t arsdk__network__cellular_max_bitrate__get_packed_size
                     (const Arsdk__Network__CellularMaxBitrate   *message);
size_t arsdk__network__cellular_max_bitrate__pack
                     (const Arsdk__Network__CellularMaxBitrate   *message,
                      uint8_t             *out);
size_t arsdk__network__cellular_max_bitrate__pack_to_buffer
                     (const Arsdk__Network__CellularMaxBitrate   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Network__CellularMaxBitrate *
       arsdk__network__cellular_max_bitrate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__network__cellular_max_bitrate__free_unpacked
                     (Arsdk__Network__CellularMaxBitrate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Arsdk__Network__Command__GetState_Closure)
                 (const Arsdk__Network__Command__GetState *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Command__SetRoutingPolicy_Closure)
                 (const Arsdk__Network__Command__SetRoutingPolicy *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Command__SetCellularMaxBitrate_Closure)
                 (const Arsdk__Network__Command__SetCellularMaxBitrate *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Command__SetDirectConnection_Closure)
                 (const Arsdk__Network__Command__SetDirectConnection *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Command_Closure)
                 (const Arsdk__Network__Command *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Event__State_Closure)
                 (const Arsdk__Network__Event__State *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Event_Closure)
                 (const Arsdk__Network__Event *message,
                  void *closure_data);
typedef void (*Arsdk__Network__Capabilities_Closure)
                 (const Arsdk__Network__Capabilities *message,
                  void *closure_data);
typedef void (*Arsdk__Network__RoutingInfo_Closure)
                 (const Arsdk__Network__RoutingInfo *message,
                  void *closure_data);
typedef void (*Arsdk__Network__GlobalLinkQuality_Closure)
                 (const Arsdk__Network__GlobalLinkQuality *message,
                  void *closure_data);
typedef void (*Arsdk__Network__LinksStatus__LinkInfo_Closure)
                 (const Arsdk__Network__LinksStatus__LinkInfo *message,
                  void *closure_data);
typedef void (*Arsdk__Network__LinksStatus_Closure)
                 (const Arsdk__Network__LinksStatus *message,
                  void *closure_data);
typedef void (*Arsdk__Network__CellularMaxBitrate_Closure)
                 (const Arsdk__Network__CellularMaxBitrate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    arsdk__network__routing_policy__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__network__routing_link__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__network__link_status__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__network__link_type__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__network__link_error__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__network__direct_connection_mode__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__command__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__command__get_state__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__command__set_routing_policy__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__command__set_cellular_max_bitrate__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__command__set_direct_connection__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__event__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__event__state__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__capabilities__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__routing_info__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__global_link_quality__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__links_status__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__links_status__link_info__descriptor;
extern const ProtobufCMessageDescriptor arsdk__network__cellular_max_bitrate__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_arsdk_2fnetwork_2eproto__INCLUDED */
