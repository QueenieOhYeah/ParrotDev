/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: arsdk/microhard.proto */

#ifndef PROTOBUF_C_arsdk_2fmicrohard_2eproto__INCLUDED
#define PROTOBUF_C_arsdk_2fmicrohard_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "parrot/protobuf/extensions.pb-c.h"

typedef struct _Arsdk__Microhard__Command Arsdk__Microhard__Command;
typedef struct _Arsdk__Microhard__Command__GetState Arsdk__Microhard__Command__GetState;
typedef struct _Arsdk__Microhard__Command__PowerOn Arsdk__Microhard__Command__PowerOn;
typedef struct _Arsdk__Microhard__Command__ShutDown Arsdk__Microhard__Command__ShutDown;
typedef struct _Arsdk__Microhard__Command__PairDevice Arsdk__Microhard__Command__PairDevice;
typedef struct _Arsdk__Microhard__Event Arsdk__Microhard__Event;
typedef struct _Arsdk__Microhard__Event__State Arsdk__Microhard__Event__State;
typedef struct _Arsdk__Microhard__Event__HardwareError Arsdk__Microhard__Event__HardwareError;
typedef struct _Arsdk__Microhard__Event__Pairing Arsdk__Microhard__Event__Pairing;
typedef struct _Arsdk__Microhard__Capabilities Arsdk__Microhard__Capabilities;
typedef struct _Arsdk__Microhard__ConnectionParameters Arsdk__Microhard__ConnectionParameters;
typedef struct _Arsdk__Microhard__State Arsdk__Microhard__State;
typedef struct _Arsdk__Microhard__State__Offline Arsdk__Microhard__State__Offline;
typedef struct _Arsdk__Microhard__State__Booting Arsdk__Microhard__State__Booting;
typedef struct _Arsdk__Microhard__State__Idle Arsdk__Microhard__State__Idle;
typedef struct _Arsdk__Microhard__State__Pairing Arsdk__Microhard__State__Pairing;
typedef struct _Arsdk__Microhard__State__Connecting Arsdk__Microhard__State__Connecting;
typedef struct _Arsdk__Microhard__State__Connected Arsdk__Microhard__State__Connected;
typedef struct _Arsdk__Microhard__PairingParameters Arsdk__Microhard__PairingParameters;
typedef struct _Arsdk__Microhard__PairingStatus Arsdk__Microhard__PairingStatus;
typedef struct _Arsdk__Microhard__PairingStatus__Failure Arsdk__Microhard__PairingStatus__Failure;
typedef struct _Arsdk__Microhard__PairingStatus__Success Arsdk__Microhard__PairingStatus__Success;


/* --- enums --- */

typedef enum _Arsdk__Microhard__Bandwidth {
  ARSDK__MICROHARD__BANDWIDTH__BANDWIDTH_1MHZ = 0,
  ARSDK__MICROHARD__BANDWIDTH__BANDWIDTH_2MHZ = 1,
  ARSDK__MICROHARD__BANDWIDTH__BANDWIDTH_4MHZ = 2,
  ARSDK__MICROHARD__BANDWIDTH__BANDWIDTH_8MHZ = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__BANDWIDTH)
} Arsdk__Microhard__Bandwidth;
typedef enum _Arsdk__Microhard__Encryption {
  ARSDK__MICROHARD__ENCRYPTION__ENCRYPTION_NONE = 0,
  ARSDK__MICROHARD__ENCRYPTION__ENCRYPTION_AES128 = 1,
  ARSDK__MICROHARD__ENCRYPTION__ENCRYPTION_AES256 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__ENCRYPTION)
} Arsdk__Microhard__Encryption;
typedef enum _Arsdk__Microhard__HardwareErrorCause {
  ARSDK__MICROHARD__HARDWARE_ERROR_CAUSE__HARDWARE_ERROR_CAUSE_INTERNAL = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__HARDWARE_ERROR_CAUSE)
} Arsdk__Microhard__HardwareErrorCause;
typedef enum _Arsdk__Microhard__PairingFailureReason {
  ARSDK__MICROHARD__PAIRING_FAILURE_REASON__PAIRING_FAILURE_REASON_INTERNAL_ERROR = 0,
  ARSDK__MICROHARD__PAIRING_FAILURE_REASON__PAIRING_FAILURE_REASON_ALREADY_PAIRED = 1,
  ARSDK__MICROHARD__PAIRING_FAILURE_REASON__PAIRING_FAILURE_REASON_DEVICE_NOT_REACHABLE = 2,
  ARSDK__MICROHARD__PAIRING_FAILURE_REASON__PAIRING_FAILURE_REASON_INVALID_STATE = 3,
  ARSDK__MICROHARD__PAIRING_FAILURE_REASON__PAIRING_FAILURE_REASON_INVALID_CONFIG = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__PAIRING_FAILURE_REASON)
} Arsdk__Microhard__PairingFailureReason;

/* --- messages --- */

struct  _Arsdk__Microhard__Command__GetState
{
  ProtobufCMessage base;
  protobuf_c_boolean include_default_capabilities;
};
#define ARSDK__MICROHARD__COMMAND__GET_STATE__INCLUDE_DEFAULT_CAPABILITIES__FIELD_NUMBER 1
#define ARSDK__MICROHARD__COMMAND__GET_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__command__get_state__descriptor) \
    , 0 }


struct  _Arsdk__Microhard__Command__PowerOn
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__COMMAND__POWER_ON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__command__power_on__descriptor) \
     }


struct  _Arsdk__Microhard__Command__ShutDown
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__COMMAND__SHUT_DOWN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__command__shut_down__descriptor) \
     }


struct  _Arsdk__Microhard__Command__PairDevice
{
  ProtobufCMessage base;
  char *network_id;
  char *encryption_key;
  Arsdk__Microhard__PairingParameters *pairing_parameters;
  Arsdk__Microhard__ConnectionParameters *connection_parameters;
};
#define ARSDK__MICROHARD__COMMAND__PAIR_DEVICE__NETWORK_ID__FIELD_NUMBER 1
#define ARSDK__MICROHARD__COMMAND__PAIR_DEVICE__ENCRYPTION_KEY__FIELD_NUMBER 2
#define ARSDK__MICROHARD__COMMAND__PAIR_DEVICE__PAIRING_PARAMETERS__FIELD_NUMBER 3
#define ARSDK__MICROHARD__COMMAND__PAIR_DEVICE__CONNECTION_PARAMETERS__FIELD_NUMBER 4
#define ARSDK__MICROHARD__COMMAND__PAIR_DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__command__pair_device__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, NULL }


typedef enum {
  ARSDK__MICROHARD__COMMAND__ID__NOT_SET = 0,
  ARSDK__MICROHARD__COMMAND__ID_GET_STATE = 16,
  ARSDK__MICROHARD__COMMAND__ID_POWER_ON = 17,
  ARSDK__MICROHARD__COMMAND__ID_SHUTDOWN = 18,
  ARSDK__MICROHARD__COMMAND__ID_PAIR_DEVICE = 19
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__COMMAND__ID)
} Arsdk__Microhard__Command__IdCase;

/*
 * This is the entry point to send messages to the device
 */
struct  _Arsdk__Microhard__Command
{
  ProtobufCMessage base;
  Arsdk__Microhard__Command__IdCase id_case;
  union {
    Arsdk__Microhard__Command__GetState *get_state;
    Arsdk__Microhard__Command__PowerOn *power_on;
    Arsdk__Microhard__Command__ShutDown *shutdown;
    Arsdk__Microhard__Command__PairDevice *pair_device;
  };
};
#define ARSDK__MICROHARD__COMMAND__GET_STATE__FIELD_NUMBER 16
#define ARSDK__MICROHARD__COMMAND__POWER_ON__FIELD_NUMBER 17
#define ARSDK__MICROHARD__COMMAND__SHUTDOWN__FIELD_NUMBER 18
#define ARSDK__MICROHARD__COMMAND__PAIR_DEVICE__FIELD_NUMBER 19
#define ARSDK__MICROHARD__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__command__descriptor) \
    , ARSDK__MICROHARD__COMMAND__ID__NOT_SET, {0} }


typedef enum {
  ARSDK__MICROHARD__EVENT__STATE__STATE__NOT_SET = 0,
  ARSDK__MICROHARD__EVENT__STATE__STATE_OFFLINE = 2,
  ARSDK__MICROHARD__EVENT__STATE__STATE_BOOTING = 3,
  ARSDK__MICROHARD__EVENT__STATE__STATE_IDLE = 4,
  ARSDK__MICROHARD__EVENT__STATE__STATE_PAIRING = 5,
  ARSDK__MICROHARD__EVENT__STATE__STATE_CONNECTING = 6,
  ARSDK__MICROHARD__EVENT__STATE__STATE_CONNECTED = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__EVENT__STATE__STATE)
} Arsdk__Microhard__Event__State__StateCase;

struct  _Arsdk__Microhard__Event__State
{
  ProtobufCMessage base;
  Arsdk__Microhard__Capabilities *default_capabilities;
  Arsdk__Microhard__Event__State__StateCase state_case;
  union {
    Arsdk__Microhard__State__Offline *offline;
    Arsdk__Microhard__State__Booting *booting;
    Arsdk__Microhard__State__Idle *idle;
    Arsdk__Microhard__State__Pairing *pairing;
    Arsdk__Microhard__State__Connecting *connecting;
    Arsdk__Microhard__State__Connected *connected;
  };
};
#define ARSDK__MICROHARD__EVENT__STATE__DEFAULT_CAPABILITIES__FIELD_NUMBER 1
#define ARSDK__MICROHARD__EVENT__STATE__OFFLINE__FIELD_NUMBER 2
#define ARSDK__MICROHARD__EVENT__STATE__BOOTING__FIELD_NUMBER 3
#define ARSDK__MICROHARD__EVENT__STATE__IDLE__FIELD_NUMBER 4
#define ARSDK__MICROHARD__EVENT__STATE__PAIRING__FIELD_NUMBER 5
#define ARSDK__MICROHARD__EVENT__STATE__CONNECTING__FIELD_NUMBER 6
#define ARSDK__MICROHARD__EVENT__STATE__CONNECTED__FIELD_NUMBER 7
#define ARSDK__MICROHARD__EVENT__STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__event__state__descriptor) \
    , NULL, ARSDK__MICROHARD__EVENT__STATE__STATE__NOT_SET, {0} }


struct  _Arsdk__Microhard__Event__HardwareError
{
  ProtobufCMessage base;
  Arsdk__Microhard__HardwareErrorCause cause;
};
#define ARSDK__MICROHARD__EVENT__HARDWARE_ERROR__CAUSE__FIELD_NUMBER 1
#define ARSDK__MICROHARD__EVENT__HARDWARE_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__event__hardware_error__descriptor) \
    , ARSDK__MICROHARD__HARDWARE_ERROR_CAUSE__HARDWARE_ERROR_CAUSE_INTERNAL }


typedef enum {
  ARSDK__MICROHARD__EVENT__PAIRING__STATUS__NOT_SET = 0,
  ARSDK__MICROHARD__EVENT__PAIRING__STATUS_FAILURE = 1,
  ARSDK__MICROHARD__EVENT__PAIRING__STATUS_SUCCESS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__EVENT__PAIRING__STATUS)
} Arsdk__Microhard__Event__Pairing__StatusCase;

struct  _Arsdk__Microhard__Event__Pairing
{
  ProtobufCMessage base;
  char *network_id;
  Arsdk__Microhard__Event__Pairing__StatusCase status_case;
  union {
    Arsdk__Microhard__PairingStatus__Failure *failure;
    Arsdk__Microhard__PairingStatus__Success *success;
  };
};
#define ARSDK__MICROHARD__EVENT__PAIRING__FAILURE__FIELD_NUMBER 1
#define ARSDK__MICROHARD__EVENT__PAIRING__SUCCESS__FIELD_NUMBER 2
#define ARSDK__MICROHARD__EVENT__PAIRING__NETWORK_ID__FIELD_NUMBER 3
#define ARSDK__MICROHARD__EVENT__PAIRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__event__pairing__descriptor) \
    , (char *)protobuf_c_empty_string, ARSDK__MICROHARD__EVENT__PAIRING__STATUS__NOT_SET, {0} }


typedef enum {
  ARSDK__MICROHARD__EVENT__ID__NOT_SET = 0,
  ARSDK__MICROHARD__EVENT__ID_STATE = 16,
  ARSDK__MICROHARD__EVENT__ID_HARDWARE_ERROR = 18,
  ARSDK__MICROHARD__EVENT__ID_PAIRING = 19
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ARSDK__MICROHARD__EVENT__ID)
} Arsdk__Microhard__Event__IdCase;

/*
 * This is the entry point to receive messages from the device
 */
struct  _Arsdk__Microhard__Event
{
  ProtobufCMessage base;
  Arsdk__Microhard__Event__IdCase id_case;
  union {
    Arsdk__Microhard__Event__State *state;
    Arsdk__Microhard__Event__HardwareError *hardware_error;
    Arsdk__Microhard__Event__Pairing *pairing;
  };
};
#define ARSDK__MICROHARD__EVENT__STATE__FIELD_NUMBER 16
#define ARSDK__MICROHARD__EVENT__HARDWARE_ERROR__FIELD_NUMBER 18
#define ARSDK__MICROHARD__EVENT__PAIRING__FIELD_NUMBER 19
#define ARSDK__MICROHARD__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__event__descriptor) \
    , ARSDK__MICROHARD__EVENT__ID__NOT_SET, {0} }


struct  _Arsdk__Microhard__Capabilities
{
  ProtobufCMessage base;
  uint32_t channel_min;
  uint32_t channel_max;
  uint32_t power_min;
  uint32_t power_max;
  size_t n_bandwidths;
  Arsdk__Microhard__Bandwidth *bandwidths;
  size_t n_encryption_algorithms;
  Arsdk__Microhard__Encryption *encryption_algorithms;
};
#define ARSDK__MICROHARD__CAPABILITIES__CHANNEL_MIN__FIELD_NUMBER 1
#define ARSDK__MICROHARD__CAPABILITIES__CHANNEL_MAX__FIELD_NUMBER 2
#define ARSDK__MICROHARD__CAPABILITIES__POWER_MIN__FIELD_NUMBER 3
#define ARSDK__MICROHARD__CAPABILITIES__POWER_MAX__FIELD_NUMBER 4
#define ARSDK__MICROHARD__CAPABILITIES__BANDWIDTHS__FIELD_NUMBER 5
#define ARSDK__MICROHARD__CAPABILITIES__ENCRYPTION_ALGORITHMS__FIELD_NUMBER 6
#define ARSDK__MICROHARD__CAPABILITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__capabilities__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  _Arsdk__Microhard__ConnectionParameters
{
  ProtobufCMessage base;
  uint32_t channel;
  uint32_t power;
  Arsdk__Microhard__Bandwidth bandwidth;
};
#define ARSDK__MICROHARD__CONNECTION_PARAMETERS__CHANNEL__FIELD_NUMBER 1
#define ARSDK__MICROHARD__CONNECTION_PARAMETERS__POWER__FIELD_NUMBER 2
#define ARSDK__MICROHARD__CONNECTION_PARAMETERS__BANDWIDTH__FIELD_NUMBER 3
#define ARSDK__MICROHARD__CONNECTION_PARAMETERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__connection_parameters__descriptor) \
    , 0, 0, ARSDK__MICROHARD__BANDWIDTH__BANDWIDTH_1MHZ }


struct  _Arsdk__Microhard__State__Offline
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__STATE__OFFLINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__offline__descriptor) \
     }


struct  _Arsdk__Microhard__State__Booting
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__STATE__BOOTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__booting__descriptor) \
     }


struct  _Arsdk__Microhard__State__Idle
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__STATE__IDLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__idle__descriptor) \
     }


struct  _Arsdk__Microhard__State__Pairing
{
  ProtobufCMessage base;
  char *network_id;
  Arsdk__Microhard__PairingParameters *pairing_parameters;
  Arsdk__Microhard__ConnectionParameters *connection_parameters;
};
#define ARSDK__MICROHARD__STATE__PAIRING__NETWORK_ID__FIELD_NUMBER 1
#define ARSDK__MICROHARD__STATE__PAIRING__PAIRING_PARAMETERS__FIELD_NUMBER 2
#define ARSDK__MICROHARD__STATE__PAIRING__CONNECTION_PARAMETERS__FIELD_NUMBER 3
#define ARSDK__MICROHARD__STATE__PAIRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__pairing__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, NULL }


struct  _Arsdk__Microhard__State__Connecting
{
  ProtobufCMessage base;
  char *device_uid;
};
#define ARSDK__MICROHARD__STATE__CONNECTING__DEVICE_UID__FIELD_NUMBER 1
#define ARSDK__MICROHARD__STATE__CONNECTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__connecting__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Arsdk__Microhard__State__Connected
{
  ProtobufCMessage base;
  char *device_uid;
};
#define ARSDK__MICROHARD__STATE__CONNECTED__DEVICE_UID__FIELD_NUMBER 1
#define ARSDK__MICROHARD__STATE__CONNECTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__connected__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Arsdk__Microhard__State
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__state__descriptor) \
     }


struct  _Arsdk__Microhard__PairingParameters
{
  ProtobufCMessage base;
  uint32_t channel;
  uint32_t power;
  Arsdk__Microhard__Bandwidth bandwidth;
  Arsdk__Microhard__Encryption encryption_algorithm;
};
#define ARSDK__MICROHARD__PAIRING_PARAMETERS__CHANNEL__FIELD_NUMBER 1
#define ARSDK__MICROHARD__PAIRING_PARAMETERS__POWER__FIELD_NUMBER 2
#define ARSDK__MICROHARD__PAIRING_PARAMETERS__BANDWIDTH__FIELD_NUMBER 3
#define ARSDK__MICROHARD__PAIRING_PARAMETERS__ENCRYPTION_ALGORITHM__FIELD_NUMBER 4
#define ARSDK__MICROHARD__PAIRING_PARAMETERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__pairing_parameters__descriptor) \
    , 0, 0, ARSDK__MICROHARD__BANDWIDTH__BANDWIDTH_1MHZ, ARSDK__MICROHARD__ENCRYPTION__ENCRYPTION_NONE }


struct  _Arsdk__Microhard__PairingStatus__Failure
{
  ProtobufCMessage base;
  Arsdk__Microhard__PairingFailureReason reason;
};
#define ARSDK__MICROHARD__PAIRING_STATUS__FAILURE__REASON__FIELD_NUMBER 1
#define ARSDK__MICROHARD__PAIRING_STATUS__FAILURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__pairing_status__failure__descriptor) \
    , ARSDK__MICROHARD__PAIRING_FAILURE_REASON__PAIRING_FAILURE_REASON_INTERNAL_ERROR }


struct  _Arsdk__Microhard__PairingStatus__Success
{
  ProtobufCMessage base;
  char *device_uid;
};
#define ARSDK__MICROHARD__PAIRING_STATUS__SUCCESS__DEVICE_UID__FIELD_NUMBER 1
#define ARSDK__MICROHARD__PAIRING_STATUS__SUCCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__pairing_status__success__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Arsdk__Microhard__PairingStatus
{
  ProtobufCMessage base;
};
#define ARSDK__MICROHARD__PAIRING_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arsdk__microhard__pairing_status__descriptor) \
     }


/* Arsdk__Microhard__Command__GetState methods */
void   arsdk__microhard__command__get_state__init
                     (Arsdk__Microhard__Command__GetState         *message);
/* Arsdk__Microhard__Command__PowerOn methods */
void   arsdk__microhard__command__power_on__init
                     (Arsdk__Microhard__Command__PowerOn         *message);
/* Arsdk__Microhard__Command__ShutDown methods */
void   arsdk__microhard__command__shut_down__init
                     (Arsdk__Microhard__Command__ShutDown         *message);
/* Arsdk__Microhard__Command__PairDevice methods */
void   arsdk__microhard__command__pair_device__init
                     (Arsdk__Microhard__Command__PairDevice         *message);
/* Arsdk__Microhard__Command methods */
void   arsdk__microhard__command__init
                     (Arsdk__Microhard__Command         *message);
size_t arsdk__microhard__command__get_packed_size
                     (const Arsdk__Microhard__Command   *message);
size_t arsdk__microhard__command__pack
                     (const Arsdk__Microhard__Command   *message,
                      uint8_t             *out);
size_t arsdk__microhard__command__pack_to_buffer
                     (const Arsdk__Microhard__Command   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__Command *
       arsdk__microhard__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__command__free_unpacked
                     (Arsdk__Microhard__Command *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Microhard__Event__State methods */
void   arsdk__microhard__event__state__init
                     (Arsdk__Microhard__Event__State         *message);
/* Arsdk__Microhard__Event__HardwareError methods */
void   arsdk__microhard__event__hardware_error__init
                     (Arsdk__Microhard__Event__HardwareError         *message);
/* Arsdk__Microhard__Event__Pairing methods */
void   arsdk__microhard__event__pairing__init
                     (Arsdk__Microhard__Event__Pairing         *message);
/* Arsdk__Microhard__Event methods */
void   arsdk__microhard__event__init
                     (Arsdk__Microhard__Event         *message);
size_t arsdk__microhard__event__get_packed_size
                     (const Arsdk__Microhard__Event   *message);
size_t arsdk__microhard__event__pack
                     (const Arsdk__Microhard__Event   *message,
                      uint8_t             *out);
size_t arsdk__microhard__event__pack_to_buffer
                     (const Arsdk__Microhard__Event   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__Event *
       arsdk__microhard__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__event__free_unpacked
                     (Arsdk__Microhard__Event *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Microhard__Capabilities methods */
void   arsdk__microhard__capabilities__init
                     (Arsdk__Microhard__Capabilities         *message);
size_t arsdk__microhard__capabilities__get_packed_size
                     (const Arsdk__Microhard__Capabilities   *message);
size_t arsdk__microhard__capabilities__pack
                     (const Arsdk__Microhard__Capabilities   *message,
                      uint8_t             *out);
size_t arsdk__microhard__capabilities__pack_to_buffer
                     (const Arsdk__Microhard__Capabilities   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__Capabilities *
       arsdk__microhard__capabilities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__capabilities__free_unpacked
                     (Arsdk__Microhard__Capabilities *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Microhard__ConnectionParameters methods */
void   arsdk__microhard__connection_parameters__init
                     (Arsdk__Microhard__ConnectionParameters         *message);
size_t arsdk__microhard__connection_parameters__get_packed_size
                     (const Arsdk__Microhard__ConnectionParameters   *message);
size_t arsdk__microhard__connection_parameters__pack
                     (const Arsdk__Microhard__ConnectionParameters   *message,
                      uint8_t             *out);
size_t arsdk__microhard__connection_parameters__pack_to_buffer
                     (const Arsdk__Microhard__ConnectionParameters   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__ConnectionParameters *
       arsdk__microhard__connection_parameters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__connection_parameters__free_unpacked
                     (Arsdk__Microhard__ConnectionParameters *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Microhard__State__Offline methods */
void   arsdk__microhard__state__offline__init
                     (Arsdk__Microhard__State__Offline         *message);
/* Arsdk__Microhard__State__Booting methods */
void   arsdk__microhard__state__booting__init
                     (Arsdk__Microhard__State__Booting         *message);
/* Arsdk__Microhard__State__Idle methods */
void   arsdk__microhard__state__idle__init
                     (Arsdk__Microhard__State__Idle         *message);
/* Arsdk__Microhard__State__Pairing methods */
void   arsdk__microhard__state__pairing__init
                     (Arsdk__Microhard__State__Pairing         *message);
/* Arsdk__Microhard__State__Connecting methods */
void   arsdk__microhard__state__connecting__init
                     (Arsdk__Microhard__State__Connecting         *message);
/* Arsdk__Microhard__State__Connected methods */
void   arsdk__microhard__state__connected__init
                     (Arsdk__Microhard__State__Connected         *message);
/* Arsdk__Microhard__State methods */
void   arsdk__microhard__state__init
                     (Arsdk__Microhard__State         *message);
size_t arsdk__microhard__state__get_packed_size
                     (const Arsdk__Microhard__State   *message);
size_t arsdk__microhard__state__pack
                     (const Arsdk__Microhard__State   *message,
                      uint8_t             *out);
size_t arsdk__microhard__state__pack_to_buffer
                     (const Arsdk__Microhard__State   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__State *
       arsdk__microhard__state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__state__free_unpacked
                     (Arsdk__Microhard__State *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Microhard__PairingParameters methods */
void   arsdk__microhard__pairing_parameters__init
                     (Arsdk__Microhard__PairingParameters         *message);
size_t arsdk__microhard__pairing_parameters__get_packed_size
                     (const Arsdk__Microhard__PairingParameters   *message);
size_t arsdk__microhard__pairing_parameters__pack
                     (const Arsdk__Microhard__PairingParameters   *message,
                      uint8_t             *out);
size_t arsdk__microhard__pairing_parameters__pack_to_buffer
                     (const Arsdk__Microhard__PairingParameters   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__PairingParameters *
       arsdk__microhard__pairing_parameters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__pairing_parameters__free_unpacked
                     (Arsdk__Microhard__PairingParameters *message,
                      ProtobufCAllocator *allocator);
/* Arsdk__Microhard__PairingStatus__Failure methods */
void   arsdk__microhard__pairing_status__failure__init
                     (Arsdk__Microhard__PairingStatus__Failure         *message);
/* Arsdk__Microhard__PairingStatus__Success methods */
void   arsdk__microhard__pairing_status__success__init
                     (Arsdk__Microhard__PairingStatus__Success         *message);
/* Arsdk__Microhard__PairingStatus methods */
void   arsdk__microhard__pairing_status__init
                     (Arsdk__Microhard__PairingStatus         *message);
size_t arsdk__microhard__pairing_status__get_packed_size
                     (const Arsdk__Microhard__PairingStatus   *message);
size_t arsdk__microhard__pairing_status__pack
                     (const Arsdk__Microhard__PairingStatus   *message,
                      uint8_t             *out);
size_t arsdk__microhard__pairing_status__pack_to_buffer
                     (const Arsdk__Microhard__PairingStatus   *message,
                      ProtobufCBuffer     *buffer);
Arsdk__Microhard__PairingStatus *
       arsdk__microhard__pairing_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arsdk__microhard__pairing_status__free_unpacked
                     (Arsdk__Microhard__PairingStatus *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Arsdk__Microhard__Command__GetState_Closure)
                 (const Arsdk__Microhard__Command__GetState *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Command__PowerOn_Closure)
                 (const Arsdk__Microhard__Command__PowerOn *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Command__ShutDown_Closure)
                 (const Arsdk__Microhard__Command__ShutDown *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Command__PairDevice_Closure)
                 (const Arsdk__Microhard__Command__PairDevice *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Command_Closure)
                 (const Arsdk__Microhard__Command *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Event__State_Closure)
                 (const Arsdk__Microhard__Event__State *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Event__HardwareError_Closure)
                 (const Arsdk__Microhard__Event__HardwareError *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Event__Pairing_Closure)
                 (const Arsdk__Microhard__Event__Pairing *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Event_Closure)
                 (const Arsdk__Microhard__Event *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__Capabilities_Closure)
                 (const Arsdk__Microhard__Capabilities *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__ConnectionParameters_Closure)
                 (const Arsdk__Microhard__ConnectionParameters *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State__Offline_Closure)
                 (const Arsdk__Microhard__State__Offline *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State__Booting_Closure)
                 (const Arsdk__Microhard__State__Booting *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State__Idle_Closure)
                 (const Arsdk__Microhard__State__Idle *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State__Pairing_Closure)
                 (const Arsdk__Microhard__State__Pairing *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State__Connecting_Closure)
                 (const Arsdk__Microhard__State__Connecting *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State__Connected_Closure)
                 (const Arsdk__Microhard__State__Connected *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__State_Closure)
                 (const Arsdk__Microhard__State *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__PairingParameters_Closure)
                 (const Arsdk__Microhard__PairingParameters *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__PairingStatus__Failure_Closure)
                 (const Arsdk__Microhard__PairingStatus__Failure *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__PairingStatus__Success_Closure)
                 (const Arsdk__Microhard__PairingStatus__Success *message,
                  void *closure_data);
typedef void (*Arsdk__Microhard__PairingStatus_Closure)
                 (const Arsdk__Microhard__PairingStatus *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    arsdk__microhard__bandwidth__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__microhard__encryption__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__microhard__hardware_error_cause__descriptor;
extern const ProtobufCEnumDescriptor    arsdk__microhard__pairing_failure_reason__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__command__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__command__get_state__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__command__power_on__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__command__shut_down__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__command__pair_device__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__event__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__event__state__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__event__hardware_error__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__event__pairing__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__capabilities__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__connection_parameters__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__offline__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__booting__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__idle__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__pairing__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__connecting__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__state__connected__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__pairing_parameters__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__pairing_status__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__pairing_status__failure__descriptor;
extern const ProtobufCMessageDescriptor arsdk__microhard__pairing_status__success__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_arsdk_2fmicrohard_2eproto__INCLUDED */
