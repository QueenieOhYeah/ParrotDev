// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guidance/zoom_cam_controller.proto

#ifndef PROTOBUF_INCLUDED_guidance_2fzoom_5fcam_5fcontroller_2eproto
#define PROTOBUF_INCLUDED_guidance_2fzoom_5fcam_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cam_controller/cam_controller.pb.h"
#include "zoom_cam_controller/zoom_cam_controller.pb.h"
#include "guidance/camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_guidance_2fzoom_5fcam_5fcontroller_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_guidance_2fzoom_5fcam_5fcontroller_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_guidance_2fzoom_5fcam_5fcontroller_2eproto();
namespace Guidance {
namespace ZoomCamController {
namespace Messages {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Reset;
class ResetDefaultTypeInternal;
extern ResetDefaultTypeInternal _Reset_default_instance_;
class Zoom;
class ZoomDefaultTypeInternal;
extern ZoomDefaultTypeInternal _Zoom_default_instance_;
}  // namespace Messages
}  // namespace ZoomCamController
}  // namespace Guidance
namespace google {
namespace protobuf {
template<> ::Guidance::ZoomCamController::Messages::Command* Arena::CreateMaybeMessage<::Guidance::ZoomCamController::Messages::Command>(Arena*);
template<> ::Guidance::ZoomCamController::Messages::Config* Arena::CreateMaybeMessage<::Guidance::ZoomCamController::Messages::Config>(Arena*);
template<> ::Guidance::ZoomCamController::Messages::Event* Arena::CreateMaybeMessage<::Guidance::ZoomCamController::Messages::Event>(Arena*);
template<> ::Guidance::ZoomCamController::Messages::Reset* Arena::CreateMaybeMessage<::Guidance::ZoomCamController::Messages::Reset>(Arena*);
template<> ::Guidance::ZoomCamController::Messages::Zoom* Arena::CreateMaybeMessage<::Guidance::ZoomCamController::Messages::Zoom>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Guidance {
namespace ZoomCamController {
namespace Messages {

// ===================================================================

class Reset :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.ZoomCamController.Messages.Reset) */ {
 public:
  Reset();
  virtual ~Reset();

  Reset(const Reset& from);

  inline Reset& operator=(const Reset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reset(Reset&& from) noexcept
    : Reset() {
    *this = ::std::move(from);
  }

  inline Reset& operator=(Reset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Reset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reset* internal_default_instance() {
    return reinterpret_cast<const Reset*>(
               &_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Reset* other);
  friend void swap(Reset& a, Reset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reset* New() const final {
    return CreateMaybeMessage<Reset>(nullptr);
  }

  Reset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reset& from);
  void MergeFrom(const Reset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Guidance.Camera.Messages.Enum cam = 1;
  void clear_cam();
  static const int kCamFieldNumber = 1;
  ::Guidance::Camera::Messages::Enum cam() const;
  void set_cam(::Guidance::Camera::Messages::Enum value);

  // @@protoc_insertion_point(class_scope:Guidance.ZoomCamController.Messages.Reset)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int cam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guidance_2fzoom_5fcam_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Zoom :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.ZoomCamController.Messages.Zoom) */ {
 public:
  Zoom();
  virtual ~Zoom();

  Zoom(const Zoom& from);

  inline Zoom& operator=(const Zoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zoom(Zoom&& from) noexcept
    : Zoom() {
    *this = ::std::move(from);
  }

  inline Zoom& operator=(Zoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Zoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Zoom* internal_default_instance() {
    return reinterpret_cast<const Zoom*>(
               &_Zoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Zoom* other);
  friend void swap(Zoom& a, Zoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zoom* New() const final {
    return CreateMaybeMessage<Zoom>(nullptr);
  }

  Zoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Zoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Zoom& from);
  void MergeFrom(const Zoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZoomCamController.Messages.Zoom zoom = 2;
  bool has_zoom() const;
  void clear_zoom();
  static const int kZoomFieldNumber = 2;
  const ::ZoomCamController::Messages::Zoom& zoom() const;
  ::ZoomCamController::Messages::Zoom* release_zoom();
  ::ZoomCamController::Messages::Zoom* mutable_zoom();
  void set_allocated_zoom(::ZoomCamController::Messages::Zoom* zoom);

  // .Guidance.Camera.Messages.Enum cam = 1;
  void clear_cam();
  static const int kCamFieldNumber = 1;
  ::Guidance::Camera::Messages::Enum cam() const;
  void set_cam(::Guidance::Camera::Messages::Enum value);

  // @@protoc_insertion_point(class_scope:Guidance.ZoomCamController.Messages.Zoom)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZoomCamController::Messages::Zoom* zoom_;
  int cam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guidance_2fzoom_5fcam_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.ZoomCamController.Messages.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZoomCamController.Messages.Config config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::ZoomCamController::Messages::Config& config() const;
  ::ZoomCamController::Messages::Config* release_config();
  ::ZoomCamController::Messages::Config* mutable_config();
  void set_allocated_config(::ZoomCamController::Messages::Config* config);

  // .Guidance.Camera.Messages.Enum cam = 1;
  void clear_cam();
  static const int kCamFieldNumber = 1;
  ::Guidance::Camera::Messages::Enum cam() const;
  void set_cam(::Guidance::Camera::Messages::Enum value);

  // @@protoc_insertion_point(class_scope:Guidance.ZoomCamController.Messages.Config)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZoomCamController::Messages::Config* config_;
  int cam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guidance_2fzoom_5fcam_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.ZoomCamController.Messages.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kReset = 1,
    kSetZoom = 2,
    kSetConfig = 3,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Guidance.ZoomCamController.Messages.Reset reset = 1;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 1;
  const ::Guidance::ZoomCamController::Messages::Reset& reset() const;
  ::Guidance::ZoomCamController::Messages::Reset* release_reset();
  ::Guidance::ZoomCamController::Messages::Reset* mutable_reset();
  void set_allocated_reset(::Guidance::ZoomCamController::Messages::Reset* reset);

  // .Guidance.ZoomCamController.Messages.Zoom set_zoom = 2;
  bool has_set_zoom() const;
  void clear_set_zoom();
  static const int kSetZoomFieldNumber = 2;
  const ::Guidance::ZoomCamController::Messages::Zoom& set_zoom() const;
  ::Guidance::ZoomCamController::Messages::Zoom* release_set_zoom();
  ::Guidance::ZoomCamController::Messages::Zoom* mutable_set_zoom();
  void set_allocated_set_zoom(::Guidance::ZoomCamController::Messages::Zoom* set_zoom);

  // .Guidance.ZoomCamController.Messages.Config set_config = 3;
  bool has_set_config() const;
  void clear_set_config();
  static const int kSetConfigFieldNumber = 3;
  const ::Guidance::ZoomCamController::Messages::Config& set_config() const;
  ::Guidance::ZoomCamController::Messages::Config* release_set_config();
  ::Guidance::ZoomCamController::Messages::Config* mutable_set_config();
  void set_allocated_set_config(::Guidance::ZoomCamController::Messages::Config* set_config);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:Guidance.ZoomCamController.Messages.Command)
 private:
  class HasBitSetters;
  void set_has_reset();
  void set_has_set_zoom();
  void set_has_set_config();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::Guidance::ZoomCamController::Messages::Reset* reset_;
    ::Guidance::ZoomCamController::Messages::Zoom* set_zoom_;
    ::Guidance::ZoomCamController::Messages::Config* set_config_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_guidance_2fzoom_5fcam_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.ZoomCamController.Messages.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kConfig = 1,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Guidance.ZoomCamController.Messages.Config config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::Guidance::ZoomCamController::Messages::Config& config() const;
  ::Guidance::ZoomCamController::Messages::Config* release_config();
  ::Guidance::ZoomCamController::Messages::Config* mutable_config();
  void set_allocated_config(::Guidance::ZoomCamController::Messages::Config* config);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:Guidance.ZoomCamController.Messages.Event)
 private:
  class HasBitSetters;
  void set_has_config();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::Guidance::ZoomCamController::Messages::Config* config_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_guidance_2fzoom_5fcam_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reset

// .Guidance.Camera.Messages.Enum cam = 1;
inline void Reset::clear_cam() {
  cam_ = 0;
}
inline ::Guidance::Camera::Messages::Enum Reset::cam() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Reset.cam)
  return static_cast< ::Guidance::Camera::Messages::Enum >(cam_);
}
inline void Reset::set_cam(::Guidance::Camera::Messages::Enum value) {
  
  cam_ = value;
  // @@protoc_insertion_point(field_set:Guidance.ZoomCamController.Messages.Reset.cam)
}

// -------------------------------------------------------------------

// Zoom

// .Guidance.Camera.Messages.Enum cam = 1;
inline void Zoom::clear_cam() {
  cam_ = 0;
}
inline ::Guidance::Camera::Messages::Enum Zoom::cam() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Zoom.cam)
  return static_cast< ::Guidance::Camera::Messages::Enum >(cam_);
}
inline void Zoom::set_cam(::Guidance::Camera::Messages::Enum value) {
  
  cam_ = value;
  // @@protoc_insertion_point(field_set:Guidance.ZoomCamController.Messages.Zoom.cam)
}

// .ZoomCamController.Messages.Zoom zoom = 2;
inline bool Zoom::has_zoom() const {
  return this != internal_default_instance() && zoom_ != nullptr;
}
inline const ::ZoomCamController::Messages::Zoom& Zoom::zoom() const {
  const ::ZoomCamController::Messages::Zoom* p = zoom_;
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Zoom.zoom)
  return p != nullptr ? *p : *reinterpret_cast<const ::ZoomCamController::Messages::Zoom*>(
      &::ZoomCamController::Messages::_Zoom_default_instance_);
}
inline ::ZoomCamController::Messages::Zoom* Zoom::release_zoom() {
  // @@protoc_insertion_point(field_release:Guidance.ZoomCamController.Messages.Zoom.zoom)
  
  ::ZoomCamController::Messages::Zoom* temp = zoom_;
  zoom_ = nullptr;
  return temp;
}
inline ::ZoomCamController::Messages::Zoom* Zoom::mutable_zoom() {
  
  if (zoom_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZoomCamController::Messages::Zoom>(GetArenaNoVirtual());
    zoom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Guidance.ZoomCamController.Messages.Zoom.zoom)
  return zoom_;
}
inline void Zoom::set_allocated_zoom(::ZoomCamController::Messages::Zoom* zoom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(zoom_);
  }
  if (zoom) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zoom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zoom, submessage_arena);
    }
    
  } else {
    
  }
  zoom_ = zoom;
  // @@protoc_insertion_point(field_set_allocated:Guidance.ZoomCamController.Messages.Zoom.zoom)
}

// -------------------------------------------------------------------

// Config

// .Guidance.Camera.Messages.Enum cam = 1;
inline void Config::clear_cam() {
  cam_ = 0;
}
inline ::Guidance::Camera::Messages::Enum Config::cam() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Config.cam)
  return static_cast< ::Guidance::Camera::Messages::Enum >(cam_);
}
inline void Config::set_cam(::Guidance::Camera::Messages::Enum value) {
  
  cam_ = value;
  // @@protoc_insertion_point(field_set:Guidance.ZoomCamController.Messages.Config.cam)
}

// .ZoomCamController.Messages.Config config = 2;
inline bool Config::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline const ::ZoomCamController::Messages::Config& Config::config() const {
  const ::ZoomCamController::Messages::Config* p = config_;
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Config.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::ZoomCamController::Messages::Config*>(
      &::ZoomCamController::Messages::_Config_default_instance_);
}
inline ::ZoomCamController::Messages::Config* Config::release_config() {
  // @@protoc_insertion_point(field_release:Guidance.ZoomCamController.Messages.Config.config)
  
  ::ZoomCamController::Messages::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::ZoomCamController::Messages::Config* Config::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZoomCamController::Messages::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Guidance.ZoomCamController.Messages.Config.config)
  return config_;
}
inline void Config::set_allocated_config(::ZoomCamController::Messages::Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_);
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:Guidance.ZoomCamController.Messages.Config.config)
}

// -------------------------------------------------------------------

// Command

// .Guidance.ZoomCamController.Messages.Reset reset = 1;
inline bool Command::has_reset() const {
  return id_case() == kReset;
}
inline void Command::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void Command::clear_reset() {
  if (has_reset()) {
    delete id_.reset_;
    clear_has_id();
  }
}
inline ::Guidance::ZoomCamController::Messages::Reset* Command::release_reset() {
  // @@protoc_insertion_point(field_release:Guidance.ZoomCamController.Messages.Command.reset)
  if (has_reset()) {
    clear_has_id();
      ::Guidance::ZoomCamController::Messages::Reset* temp = id_.reset_;
    id_.reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Guidance::ZoomCamController::Messages::Reset& Command::reset() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Command.reset)
  return has_reset()
      ? *id_.reset_
      : *reinterpret_cast< ::Guidance::ZoomCamController::Messages::Reset*>(&::Guidance::ZoomCamController::Messages::_Reset_default_instance_);
}
inline ::Guidance::ZoomCamController::Messages::Reset* Command::mutable_reset() {
  if (!has_reset()) {
    clear_id();
    set_has_reset();
    id_.reset_ = CreateMaybeMessage< ::Guidance::ZoomCamController::Messages::Reset >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Guidance.ZoomCamController.Messages.Command.reset)
  return id_.reset_;
}

// .Guidance.ZoomCamController.Messages.Zoom set_zoom = 2;
inline bool Command::has_set_zoom() const {
  return id_case() == kSetZoom;
}
inline void Command::set_has_set_zoom() {
  _oneof_case_[0] = kSetZoom;
}
inline void Command::clear_set_zoom() {
  if (has_set_zoom()) {
    delete id_.set_zoom_;
    clear_has_id();
  }
}
inline ::Guidance::ZoomCamController::Messages::Zoom* Command::release_set_zoom() {
  // @@protoc_insertion_point(field_release:Guidance.ZoomCamController.Messages.Command.set_zoom)
  if (has_set_zoom()) {
    clear_has_id();
      ::Guidance::ZoomCamController::Messages::Zoom* temp = id_.set_zoom_;
    id_.set_zoom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Guidance::ZoomCamController::Messages::Zoom& Command::set_zoom() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Command.set_zoom)
  return has_set_zoom()
      ? *id_.set_zoom_
      : *reinterpret_cast< ::Guidance::ZoomCamController::Messages::Zoom*>(&::Guidance::ZoomCamController::Messages::_Zoom_default_instance_);
}
inline ::Guidance::ZoomCamController::Messages::Zoom* Command::mutable_set_zoom() {
  if (!has_set_zoom()) {
    clear_id();
    set_has_set_zoom();
    id_.set_zoom_ = CreateMaybeMessage< ::Guidance::ZoomCamController::Messages::Zoom >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Guidance.ZoomCamController.Messages.Command.set_zoom)
  return id_.set_zoom_;
}

// .Guidance.ZoomCamController.Messages.Config set_config = 3;
inline bool Command::has_set_config() const {
  return id_case() == kSetConfig;
}
inline void Command::set_has_set_config() {
  _oneof_case_[0] = kSetConfig;
}
inline void Command::clear_set_config() {
  if (has_set_config()) {
    delete id_.set_config_;
    clear_has_id();
  }
}
inline ::Guidance::ZoomCamController::Messages::Config* Command::release_set_config() {
  // @@protoc_insertion_point(field_release:Guidance.ZoomCamController.Messages.Command.set_config)
  if (has_set_config()) {
    clear_has_id();
      ::Guidance::ZoomCamController::Messages::Config* temp = id_.set_config_;
    id_.set_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Guidance::ZoomCamController::Messages::Config& Command::set_config() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Command.set_config)
  return has_set_config()
      ? *id_.set_config_
      : *reinterpret_cast< ::Guidance::ZoomCamController::Messages::Config*>(&::Guidance::ZoomCamController::Messages::_Config_default_instance_);
}
inline ::Guidance::ZoomCamController::Messages::Config* Command::mutable_set_config() {
  if (!has_set_config()) {
    clear_id();
    set_has_set_config();
    id_.set_config_ = CreateMaybeMessage< ::Guidance::ZoomCamController::Messages::Config >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Guidance.ZoomCamController.Messages.Command.set_config)
  return id_.set_config_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .Guidance.ZoomCamController.Messages.Config config = 1;
inline bool Event::has_config() const {
  return id_case() == kConfig;
}
inline void Event::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void Event::clear_config() {
  if (has_config()) {
    delete id_.config_;
    clear_has_id();
  }
}
inline ::Guidance::ZoomCamController::Messages::Config* Event::release_config() {
  // @@protoc_insertion_point(field_release:Guidance.ZoomCamController.Messages.Event.config)
  if (has_config()) {
    clear_has_id();
      ::Guidance::ZoomCamController::Messages::Config* temp = id_.config_;
    id_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Guidance::ZoomCamController::Messages::Config& Event::config() const {
  // @@protoc_insertion_point(field_get:Guidance.ZoomCamController.Messages.Event.config)
  return has_config()
      ? *id_.config_
      : *reinterpret_cast< ::Guidance::ZoomCamController::Messages::Config*>(&::Guidance::ZoomCamController::Messages::_Config_default_instance_);
}
inline ::Guidance::ZoomCamController::Messages::Config* Event::mutable_config() {
  if (!has_config()) {
    clear_id();
    set_has_config();
    id_.config_ = CreateMaybeMessage< ::Guidance::ZoomCamController::Messages::Config >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Guidance.ZoomCamController.Messages.Event.config)
  return id_.config_;
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace ZoomCamController
}  // namespace Guidance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_guidance_2fzoom_5fcam_5fcontroller_2eproto
