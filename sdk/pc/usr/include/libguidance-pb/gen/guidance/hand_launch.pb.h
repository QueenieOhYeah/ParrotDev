// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guidance/hand_launch.proto

#ifndef PROTOBUF_INCLUDED_guidance_2fhand_5flaunch_2eproto
#define PROTOBUF_INCLUDED_guidance_2fhand_5flaunch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_guidance_2fhand_5flaunch_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_guidance_2fhand_5flaunch_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_guidance_2fhand_5flaunch_2eproto();
namespace Guidance {
namespace HandLaunch {
namespace Messages {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace Messages
}  // namespace HandLaunch
}  // namespace Guidance
namespace google {
namespace protobuf {
template<> ::Guidance::HandLaunch::Messages::Config* Arena::CreateMaybeMessage<::Guidance::HandLaunch::Messages::Config>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Guidance {
namespace HandLaunch {
namespace Messages {

enum State {
  STATE_CONSTANT_MIN_THRUST = 0,
  STATE_THRUST_RAMP_ZERO_ANGLE = 1,
  STATE_CONSTANT_THRUST_ZERO_ANGLE = 2,
  STATE_VERTICAL_SPEED_ZERO_ANGLE = 3,
  STATE_VERTICAL_SPEED_GO_TO_FIX = 4,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool State_IsValid(int value);
const State State_MIN = STATE_CONSTANT_MIN_THRUST;
const State State_MAX = STATE_VERTICAL_SPEED_GO_TO_FIX;
const int State_ARRAYSIZE = State_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_descriptor();
inline const ::std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_descriptor(), value);
}
inline bool State_Parse(
    const ::std::string& name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
enum FCamBehavior {
  FCAM_BEHAVIOR_FOLLOW_DRONE = 0,
  FCAM_BEHAVIOR_STABILIZE = 1,
  FCamBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FCamBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FCamBehavior_IsValid(int value);
const FCamBehavior FCamBehavior_MIN = FCAM_BEHAVIOR_FOLLOW_DRONE;
const FCamBehavior FCamBehavior_MAX = FCAM_BEHAVIOR_STABILIZE;
const int FCamBehavior_ARRAYSIZE = FCamBehavior_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCamBehavior_descriptor();
inline const ::std::string& FCamBehavior_Name(FCamBehavior value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCamBehavior_descriptor(), value);
}
inline bool FCamBehavior_Parse(
    const ::std::string& name, FCamBehavior* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCamBehavior>(
    FCamBehavior_descriptor(), name, value);
}
// ===================================================================

class Config :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Guidance.HandLaunch.Messages.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Guidance.HandLaunch.Messages.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::Guidance::HandLaunch::Messages::State state() const;
  void set_state(::Guidance::HandLaunch::Messages::State value);

  // .Guidance.HandLaunch.Messages.FCamBehavior fcam = 2;
  void clear_fcam();
  static const int kFcamFieldNumber = 2;
  ::Guidance::HandLaunch::Messages::FCamBehavior fcam() const;
  void set_fcam(::Guidance::HandLaunch::Messages::FCamBehavior value);

  // @@protoc_insertion_point(class_scope:Guidance.HandLaunch.Messages.Config)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  int fcam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guidance_2fhand_5flaunch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// .Guidance.HandLaunch.Messages.State state = 1;
inline void Config::clear_state() {
  state_ = 0;
}
inline ::Guidance::HandLaunch::Messages::State Config::state() const {
  // @@protoc_insertion_point(field_get:Guidance.HandLaunch.Messages.Config.state)
  return static_cast< ::Guidance::HandLaunch::Messages::State >(state_);
}
inline void Config::set_state(::Guidance::HandLaunch::Messages::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Guidance.HandLaunch.Messages.Config.state)
}

// .Guidance.HandLaunch.Messages.FCamBehavior fcam = 2;
inline void Config::clear_fcam() {
  fcam_ = 0;
}
inline ::Guidance::HandLaunch::Messages::FCamBehavior Config::fcam() const {
  // @@protoc_insertion_point(field_get:Guidance.HandLaunch.Messages.Config.fcam)
  return static_cast< ::Guidance::HandLaunch::Messages::FCamBehavior >(fcam_);
}
inline void Config::set_fcam(::Guidance::HandLaunch::Messages::FCamBehavior value) {
  
  fcam_ = value;
  // @@protoc_insertion_point(field_set:Guidance.HandLaunch.Messages.Config.fcam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace HandLaunch
}  // namespace Guidance

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Guidance::HandLaunch::Messages::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Guidance::HandLaunch::Messages::State>() {
  return ::Guidance::HandLaunch::Messages::State_descriptor();
}
template <> struct is_proto_enum< ::Guidance::HandLaunch::Messages::FCamBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Guidance::HandLaunch::Messages::FCamBehavior>() {
  return ::Guidance::HandLaunch::Messages::FCamBehavior_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_guidance_2fhand_5flaunch_2eproto
