// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cam_controller/types.proto

#ifndef PROTOBUF_INCLUDED_cam_5fcontroller_2ftypes_2eproto
#define PROTOBUF_INCLUDED_cam_5fcontroller_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cam_controller/control_mode.pb.h"
#include "cam_controller/frame_of_reference.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cam_5fcontroller_2ftypes_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_cam_5fcontroller_2ftypes_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_cam_5fcontroller_2ftypes_2eproto();
namespace CamController {
namespace Messages {
class AxisConfig;
class AxisConfigDefaultTypeInternal;
extern AxisConfigDefaultTypeInternal _AxisConfig_default_instance_;
class AxisReference;
class AxisReferenceDefaultTypeInternal;
extern AxisReferenceDefaultTypeInternal _AxisReference_default_instance_;
}  // namespace Messages
}  // namespace CamController
namespace google {
namespace protobuf {
template<> ::CamController::Messages::AxisConfig* Arena::CreateMaybeMessage<::CamController::Messages::AxisConfig>(Arena*);
template<> ::CamController::Messages::AxisReference* Arena::CreateMaybeMessage<::CamController::Messages::AxisReference>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CamController {
namespace Messages {

// ===================================================================

class AxisConfig :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CamController.Messages.AxisConfig) */ {
 public:
  AxisConfig();
  virtual ~AxisConfig();

  AxisConfig(const AxisConfig& from);

  inline AxisConfig& operator=(const AxisConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisConfig(AxisConfig&& from) noexcept
    : AxisConfig() {
    *this = ::std::move(from);
  }

  inline AxisConfig& operator=(AxisConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AxisConfig& default_instance();

  enum OptionalLockedCase {
    kLocked = 1,
    OPTIONAL_LOCKED_NOT_SET = 0,
  };

  enum OptionalFilteredCase {
    kFiltered = 2,
    OPTIONAL_FILTERED_NOT_SET = 0,
  };

  enum OptionalSmoothnessCase {
    kSmoothness = 3,
    OPTIONAL_SMOOTHNESS_NOT_SET = 0,
  };

  enum OptionalMaxVelCase {
    kMaxVel = 4,
    OPTIONAL_MAX_VEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisConfig* internal_default_instance() {
    return reinterpret_cast<const AxisConfig*>(
               &_AxisConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AxisConfig* other);
  friend void swap(AxisConfig& a, AxisConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisConfig* New() const final {
    return CreateMaybeMessage<AxisConfig>(nullptr);
  }

  AxisConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisConfig& from);
  void MergeFrom(const AxisConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool locked = 1;
  private:
  bool has_locked() const;
  public:
  void clear_locked();
  static const int kLockedFieldNumber = 1;
  bool locked() const;
  void set_locked(bool value);

  // bool filtered = 2;
  private:
  bool has_filtered() const;
  public:
  void clear_filtered();
  static const int kFilteredFieldNumber = 2;
  bool filtered() const;
  void set_filtered(bool value);

  // float smoothness = 3;
  private:
  bool has_smoothness() const;
  public:
  void clear_smoothness();
  static const int kSmoothnessFieldNumber = 3;
  float smoothness() const;
  void set_smoothness(float value);

  // float max_vel = 4;
  private:
  bool has_max_vel() const;
  public:
  void clear_max_vel();
  static const int kMaxVelFieldNumber = 4;
  float max_vel() const;
  void set_max_vel(float value);

  void clear_optional_locked();
  OptionalLockedCase optional_locked_case() const;
  void clear_optional_filtered();
  OptionalFilteredCase optional_filtered_case() const;
  void clear_optional_smoothness();
  OptionalSmoothnessCase optional_smoothness_case() const;
  void clear_optional_max_vel();
  OptionalMaxVelCase optional_max_vel_case() const;
  // @@protoc_insertion_point(class_scope:CamController.Messages.AxisConfig)
 private:
  class HasBitSetters;
  void set_has_locked();
  void set_has_filtered();
  void set_has_smoothness();
  void set_has_max_vel();

  inline bool has_optional_locked() const;
  inline void clear_has_optional_locked();

  inline bool has_optional_filtered() const;
  inline void clear_has_optional_filtered();

  inline bool has_optional_smoothness() const;
  inline void clear_has_optional_smoothness();

  inline bool has_optional_max_vel() const;
  inline void clear_has_optional_max_vel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OptionalLockedUnion {
    OptionalLockedUnion() {}
    bool locked_;
  } optional_locked_;
  union OptionalFilteredUnion {
    OptionalFilteredUnion() {}
    bool filtered_;
  } optional_filtered_;
  union OptionalSmoothnessUnion {
    OptionalSmoothnessUnion() {}
    float smoothness_;
  } optional_smoothness_;
  union OptionalMaxVelUnion {
    OptionalMaxVelUnion() {}
    float max_vel_;
  } optional_max_vel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[4];

  friend struct ::TableStruct_cam_5fcontroller_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class AxisReference :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CamController.Messages.AxisReference) */ {
 public:
  AxisReference();
  virtual ~AxisReference();

  AxisReference(const AxisReference& from);

  inline AxisReference& operator=(const AxisReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisReference(AxisReference&& from) noexcept
    : AxisReference() {
    *this = ::std::move(from);
  }

  inline AxisReference& operator=(AxisReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AxisReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisReference* internal_default_instance() {
    return reinterpret_cast<const AxisReference*>(
               &_AxisReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AxisReference* other);
  friend void swap(AxisReference& a, AxisReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisReference* New() const final {
    return CreateMaybeMessage<AxisReference>(nullptr);
  }

  AxisReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisReference& from);
  void MergeFrom(const AxisReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CamController.Messages.ControlMode.Enum ctrl_mode = 1;
  void clear_ctrl_mode();
  static const int kCtrlModeFieldNumber = 1;
  ::CamController::Messages::ControlMode::Enum ctrl_mode() const;
  void set_ctrl_mode(::CamController::Messages::ControlMode::Enum value);

  // .CamController.Messages.FrameOfReference.Enum frame_of_ref = 2;
  void clear_frame_of_ref();
  static const int kFrameOfRefFieldNumber = 2;
  ::CamController::Messages::FrameOfReference::Enum frame_of_ref() const;
  void set_frame_of_ref(::CamController::Messages::FrameOfReference::Enum value);

  // float position = 3;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  float position() const;
  void set_position(float value);

  // float velocity = 4;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  float velocity() const;
  void set_velocity(float value);

  // @@protoc_insertion_point(class_scope:CamController.Messages.AxisReference)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ctrl_mode_;
  int frame_of_ref_;
  float position_;
  float velocity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cam_5fcontroller_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AxisConfig

// bool locked = 1;
inline bool AxisConfig::has_locked() const {
  return optional_locked_case() == kLocked;
}
inline void AxisConfig::set_has_locked() {
  _oneof_case_[0] = kLocked;
}
inline void AxisConfig::clear_locked() {
  if (has_locked()) {
    optional_locked_.locked_ = false;
    clear_has_optional_locked();
  }
}
inline bool AxisConfig::locked() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisConfig.locked)
  if (has_locked()) {
    return optional_locked_.locked_;
  }
  return false;
}
inline void AxisConfig::set_locked(bool value) {
  if (!has_locked()) {
    clear_optional_locked();
    set_has_locked();
  }
  optional_locked_.locked_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisConfig.locked)
}

// bool filtered = 2;
inline bool AxisConfig::has_filtered() const {
  return optional_filtered_case() == kFiltered;
}
inline void AxisConfig::set_has_filtered() {
  _oneof_case_[1] = kFiltered;
}
inline void AxisConfig::clear_filtered() {
  if (has_filtered()) {
    optional_filtered_.filtered_ = false;
    clear_has_optional_filtered();
  }
}
inline bool AxisConfig::filtered() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisConfig.filtered)
  if (has_filtered()) {
    return optional_filtered_.filtered_;
  }
  return false;
}
inline void AxisConfig::set_filtered(bool value) {
  if (!has_filtered()) {
    clear_optional_filtered();
    set_has_filtered();
  }
  optional_filtered_.filtered_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisConfig.filtered)
}

// float smoothness = 3;
inline bool AxisConfig::has_smoothness() const {
  return optional_smoothness_case() == kSmoothness;
}
inline void AxisConfig::set_has_smoothness() {
  _oneof_case_[2] = kSmoothness;
}
inline void AxisConfig::clear_smoothness() {
  if (has_smoothness()) {
    optional_smoothness_.smoothness_ = 0;
    clear_has_optional_smoothness();
  }
}
inline float AxisConfig::smoothness() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisConfig.smoothness)
  if (has_smoothness()) {
    return optional_smoothness_.smoothness_;
  }
  return 0;
}
inline void AxisConfig::set_smoothness(float value) {
  if (!has_smoothness()) {
    clear_optional_smoothness();
    set_has_smoothness();
  }
  optional_smoothness_.smoothness_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisConfig.smoothness)
}

// float max_vel = 4;
inline bool AxisConfig::has_max_vel() const {
  return optional_max_vel_case() == kMaxVel;
}
inline void AxisConfig::set_has_max_vel() {
  _oneof_case_[3] = kMaxVel;
}
inline void AxisConfig::clear_max_vel() {
  if (has_max_vel()) {
    optional_max_vel_.max_vel_ = 0;
    clear_has_optional_max_vel();
  }
}
inline float AxisConfig::max_vel() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisConfig.max_vel)
  if (has_max_vel()) {
    return optional_max_vel_.max_vel_;
  }
  return 0;
}
inline void AxisConfig::set_max_vel(float value) {
  if (!has_max_vel()) {
    clear_optional_max_vel();
    set_has_max_vel();
  }
  optional_max_vel_.max_vel_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisConfig.max_vel)
}

inline bool AxisConfig::has_optional_locked() const {
  return optional_locked_case() != OPTIONAL_LOCKED_NOT_SET;
}
inline void AxisConfig::clear_has_optional_locked() {
  _oneof_case_[0] = OPTIONAL_LOCKED_NOT_SET;
}
inline bool AxisConfig::has_optional_filtered() const {
  return optional_filtered_case() != OPTIONAL_FILTERED_NOT_SET;
}
inline void AxisConfig::clear_has_optional_filtered() {
  _oneof_case_[1] = OPTIONAL_FILTERED_NOT_SET;
}
inline bool AxisConfig::has_optional_smoothness() const {
  return optional_smoothness_case() != OPTIONAL_SMOOTHNESS_NOT_SET;
}
inline void AxisConfig::clear_has_optional_smoothness() {
  _oneof_case_[2] = OPTIONAL_SMOOTHNESS_NOT_SET;
}
inline bool AxisConfig::has_optional_max_vel() const {
  return optional_max_vel_case() != OPTIONAL_MAX_VEL_NOT_SET;
}
inline void AxisConfig::clear_has_optional_max_vel() {
  _oneof_case_[3] = OPTIONAL_MAX_VEL_NOT_SET;
}
inline AxisConfig::OptionalLockedCase AxisConfig::optional_locked_case() const {
  return AxisConfig::OptionalLockedCase(_oneof_case_[0]);
}
inline AxisConfig::OptionalFilteredCase AxisConfig::optional_filtered_case() const {
  return AxisConfig::OptionalFilteredCase(_oneof_case_[1]);
}
inline AxisConfig::OptionalSmoothnessCase AxisConfig::optional_smoothness_case() const {
  return AxisConfig::OptionalSmoothnessCase(_oneof_case_[2]);
}
inline AxisConfig::OptionalMaxVelCase AxisConfig::optional_max_vel_case() const {
  return AxisConfig::OptionalMaxVelCase(_oneof_case_[3]);
}
// -------------------------------------------------------------------

// AxisReference

// .CamController.Messages.ControlMode.Enum ctrl_mode = 1;
inline void AxisReference::clear_ctrl_mode() {
  ctrl_mode_ = 0;
}
inline ::CamController::Messages::ControlMode::Enum AxisReference::ctrl_mode() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisReference.ctrl_mode)
  return static_cast< ::CamController::Messages::ControlMode::Enum >(ctrl_mode_);
}
inline void AxisReference::set_ctrl_mode(::CamController::Messages::ControlMode::Enum value) {
  
  ctrl_mode_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisReference.ctrl_mode)
}

// .CamController.Messages.FrameOfReference.Enum frame_of_ref = 2;
inline void AxisReference::clear_frame_of_ref() {
  frame_of_ref_ = 0;
}
inline ::CamController::Messages::FrameOfReference::Enum AxisReference::frame_of_ref() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisReference.frame_of_ref)
  return static_cast< ::CamController::Messages::FrameOfReference::Enum >(frame_of_ref_);
}
inline void AxisReference::set_frame_of_ref(::CamController::Messages::FrameOfReference::Enum value) {
  
  frame_of_ref_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisReference.frame_of_ref)
}

// float position = 3;
inline void AxisReference::clear_position() {
  position_ = 0;
}
inline float AxisReference::position() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisReference.position)
  return position_;
}
inline void AxisReference::set_position(float value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisReference.position)
}

// float velocity = 4;
inline void AxisReference::clear_velocity() {
  velocity_ = 0;
}
inline float AxisReference::velocity() const {
  // @@protoc_insertion_point(field_get:CamController.Messages.AxisReference.velocity)
  return velocity_;
}
inline void AxisReference::set_velocity(float value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:CamController.Messages.AxisReference.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace CamController

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_cam_5fcontroller_2ftypes_2eproto
