// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samples/hello/cv-service/messages.proto

#include "samples/hello/cv-service/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fempty_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Empty_google_2fprotobuf_2fempty_2eproto;
namespace samples {
namespace hello {
namespace cv_service {
namespace messages {
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command> _instance;
  const ::google::protobuf::Empty* processing_start_;
  const ::google::protobuf::Empty* processing_stop_;
} _Command_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event> _instance;
  const ::google::protobuf::Empty* close_;
  const ::google::protobuf::Empty* far_;
  float depth_mean_;
} _Event_default_instance_;
}  // namespace messages
}  // namespace cv_service
}  // namespace hello
}  // namespace samples
static void InitDefaultsCommand_samples_2fhello_2fcv_2dservice_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::samples::hello::cv_service::messages::_Command_default_instance_;
    new (ptr) ::samples::hello::cv_service::messages::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::samples::hello::cv_service::messages::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Command_samples_2fhello_2fcv_2dservice_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommand_samples_2fhello_2fcv_2dservice_2fmessages_2eproto}, {
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static void InitDefaultsEvent_samples_2fhello_2fcv_2dservice_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::samples::hello::cv_service::messages::_Event_default_instance_;
    new (ptr) ::samples::hello::cv_service::messages::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::samples::hello::cv_service::messages::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Event_samples_2fhello_2fcv_2dservice_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEvent_samples_2fhello_2fcv_2dservice_2fmessages_2eproto}, {
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

void InitDefaults_samples_2fhello_2fcv_2dservice_2fmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Command_samples_2fhello_2fcv_2dservice_2fmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event_samples_2fhello_2fcv_2dservice_2fmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_samples_2fhello_2fcv_2dservice_2fmessages_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_samples_2fhello_2fcv_2dservice_2fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::samples::hello::cv_service::messages::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::samples::hello::cv_service::messages::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::samples::hello::cv_service::messages::CommandDefaultTypeInternal, processing_start_),
  offsetof(::samples::hello::cv_service::messages::CommandDefaultTypeInternal, processing_stop_),
  PROTOBUF_FIELD_OFFSET(::samples::hello::cv_service::messages::Command, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::samples::hello::cv_service::messages::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::samples::hello::cv_service::messages::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::samples::hello::cv_service::messages::EventDefaultTypeInternal, close_),
  offsetof(::samples::hello::cv_service::messages::EventDefaultTypeInternal, far_),
  offsetof(::samples::hello::cv_service::messages::EventDefaultTypeInternal, depth_mean_),
  PROTOBUF_FIELD_OFFSET(::samples::hello::cv_service::messages::Event, id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::samples::hello::cv_service::messages::Command)},
  { 8, -1, sizeof(::samples::hello::cv_service::messages::Event)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::samples::hello::cv_service::messages::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::samples::hello::cv_service::messages::_Event_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_samples_2fhello_2fcv_2dservice_2fmessages_2eproto = {
  {}, AddDescriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto, "samples/hello/cv-service/messages.proto", schemas,
  file_default_instances, TableStruct_samples_2fhello_2fcv_2dservice_2fmessages_2eproto::offsets,
  file_level_metadata_samples_2fhello_2fcv_2dservice_2fmessages_2eproto, 2, file_level_enum_descriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto, file_level_service_descriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto,
};

const char descriptor_table_protodef_samples_2fhello_2fcv_2dservice_2fmessages_2eproto[] =
  "\n\'samples/hello/cv-service/messages.prot"
  "o\022!samples.hello.cv_service.messages\032\033go"
  "ogle/protobuf/empty.proto\"v\n\007Command\0222\n\020"
  "processing_start\030\001 \001(\0132\026.google.protobuf"
  ".EmptyH\000\0221\n\017processing_stop\030\002 \001(\0132\026.goog"
  "le.protobuf.EmptyH\000B\004\n\002id\"s\n\005Event\022\'\n\005cl"
  "ose\030\001 \001(\0132\026.google.protobuf.EmptyH\000\022%\n\003f"
  "ar\030\002 \001(\0132\026.google.protobuf.EmptyH\000\022\024\n\nde"
  "pth_mean\030\003 \001(\002H\000B\004\n\002idb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_samples_2fhello_2fcv_2dservice_2fmessages_2eproto = {
  false, InitDefaults_samples_2fhello_2fcv_2dservice_2fmessages_2eproto, 
  descriptor_table_protodef_samples_2fhello_2fcv_2dservice_2fmessages_2eproto,
  "samples/hello/cv-service/messages.proto", &assign_descriptors_table_samples_2fhello_2fcv_2dservice_2fmessages_2eproto, 350,
};

void AddDescriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fempty_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_samples_2fhello_2fcv_2dservice_2fmessages_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_samples_2fhello_2fcv_2dservice_2fmessages_2eproto = []() { AddDescriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto(); return true; }();
namespace samples {
namespace hello {
namespace cv_service {
namespace messages {

// ===================================================================

void Command::InitAsDefaultInstance() {
  ::samples::hello::cv_service::messages::_Command_default_instance_.processing_start_ = const_cast< ::google::protobuf::Empty*>(
      ::google::protobuf::Empty::internal_default_instance());
  ::samples::hello::cv_service::messages::_Command_default_instance_.processing_stop_ = const_cast< ::google::protobuf::Empty*>(
      ::google::protobuf::Empty::internal_default_instance());
}
class Command::HasBitSetters {
 public:
  static const ::google::protobuf::Empty& processing_start(const Command* msg);
  static const ::google::protobuf::Empty& processing_stop(const Command* msg);
};

const ::google::protobuf::Empty&
Command::HasBitSetters::processing_start(const Command* msg) {
  return *msg->id_.processing_start_;
}
const ::google::protobuf::Empty&
Command::HasBitSetters::processing_stop(const Command* msg) {
  return *msg->id_.processing_stop_;
}
void Command::set_allocated_processing_start(::google::protobuf::Empty* processing_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (processing_start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(processing_start)->GetArena();
    if (message_arena != submessage_arena) {
      processing_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, processing_start, submessage_arena);
    }
    set_has_processing_start();
    id_.processing_start_ = processing_start;
  }
  // @@protoc_insertion_point(field_set_allocated:samples.hello.cv_service.messages.Command.processing_start)
}
void Command::clear_processing_start() {
  if (has_processing_start()) {
    delete id_.processing_start_;
    clear_has_id();
  }
}
void Command::set_allocated_processing_stop(::google::protobuf::Empty* processing_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (processing_stop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(processing_stop)->GetArena();
    if (message_arena != submessage_arena) {
      processing_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, processing_stop, submessage_arena);
    }
    set_has_processing_stop();
    id_.processing_stop_ = processing_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:samples.hello.cv_service.messages.Command.processing_stop)
}
void Command::clear_processing_stop() {
  if (has_processing_stop()) {
    delete id_.processing_stop_;
    clear_has_id();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kProcessingStartFieldNumber;
const int Command::kProcessingStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:samples.hello.cv_service.messages.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_id();
  switch (from.id_case()) {
    case kProcessingStart: {
      mutable_processing_start()->::google::protobuf::Empty::MergeFrom(from.processing_start());
      break;
    }
    case kProcessingStop: {
      mutable_processing_stop()->::google::protobuf::Empty::MergeFrom(from.processing_stop());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:samples.hello.cv_service.messages.Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Command_samples_2fhello_2fcv_2dservice_2fmessages_2eproto.base);
  clear_has_id();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:samples.hello.cv_service.messages.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Command_samples_2fhello_2fcv_2dservice_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void Command::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:samples.hello.cv_service.messages.Command)
  switch (id_case()) {
    case kProcessingStart: {
      delete id_.processing_start_;
      break;
    }
    case kProcessingStop: {
      delete id_.processing_stop_;
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:samples.hello.cv_service.messages.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_id();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Empty processing_start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Empty::_InternalParse;
        object = msg->mutable_processing_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Empty processing_stop = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Empty::_InternalParse;
        object = msg->mutable_processing_stop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:samples.hello.cv_service.messages.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Empty processing_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Empty processing_stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:samples.hello.cv_service.messages.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:samples.hello.cv_service.messages.Command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:samples.hello.cv_service.messages.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty processing_start = 1;
  if (has_processing_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::processing_start(this), output);
  }

  // .google.protobuf.Empty processing_stop = 2;
  if (has_processing_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::processing_stop(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:samples.hello.cv_service.messages.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:samples.hello.cv_service.messages.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty processing_start = 1;
  if (has_processing_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::processing_start(this), target);
  }

  // .google.protobuf.Empty processing_stop = 2;
  if (has_processing_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::processing_stop(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:samples.hello.cv_service.messages.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:samples.hello.cv_service.messages.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (id_case()) {
    // .google.protobuf.Empty processing_start = 1;
    case kProcessingStart: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.processing_start_);
      break;
    }
    // .google.protobuf.Empty processing_stop = 2;
    case kProcessingStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.processing_stop_);
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:samples.hello.cv_service.messages.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:samples.hello.cv_service.messages.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:samples.hello.cv_service.messages.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:samples.hello.cv_service.messages.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.id_case()) {
    case kProcessingStart: {
      mutable_processing_start()->::google::protobuf::Empty::MergeFrom(from.processing_start());
      break;
    }
    case kProcessingStop: {
      mutable_processing_stop()->::google::protobuf::Empty::MergeFrom(from.processing_stop());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:samples.hello.cv_service.messages.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:samples.hello.cv_service.messages.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_samples_2fhello_2fcv_2dservice_2fmessages_2eproto);
  return ::file_level_metadata_samples_2fhello_2fcv_2dservice_2fmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::samples::hello::cv_service::messages::_Event_default_instance_.close_ = const_cast< ::google::protobuf::Empty*>(
      ::google::protobuf::Empty::internal_default_instance());
  ::samples::hello::cv_service::messages::_Event_default_instance_.far_ = const_cast< ::google::protobuf::Empty*>(
      ::google::protobuf::Empty::internal_default_instance());
  ::samples::hello::cv_service::messages::_Event_default_instance_.depth_mean_ = 0;
}
class Event::HasBitSetters {
 public:
  static const ::google::protobuf::Empty& close(const Event* msg);
  static const ::google::protobuf::Empty& far(const Event* msg);
};

const ::google::protobuf::Empty&
Event::HasBitSetters::close(const Event* msg) {
  return *msg->id_.close_;
}
const ::google::protobuf::Empty&
Event::HasBitSetters::far(const Event* msg) {
  return *msg->id_.far_;
}
void Event::set_allocated_close(::google::protobuf::Empty* close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (close) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(close)->GetArena();
    if (message_arena != submessage_arena) {
      close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, close, submessage_arena);
    }
    set_has_close();
    id_.close_ = close;
  }
  // @@protoc_insertion_point(field_set_allocated:samples.hello.cv_service.messages.Event.close)
}
void Event::clear_close() {
  if (has_close()) {
    delete id_.close_;
    clear_has_id();
  }
}
void Event::set_allocated_far(::google::protobuf::Empty* far) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (far) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(far)->GetArena();
    if (message_arena != submessage_arena) {
      far = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, far, submessage_arena);
    }
    set_has_far();
    id_.far_ = far;
  }
  // @@protoc_insertion_point(field_set_allocated:samples.hello.cv_service.messages.Event.far)
}
void Event::clear_far() {
  if (has_far()) {
    delete id_.far_;
    clear_has_id();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kCloseFieldNumber;
const int Event::kFarFieldNumber;
const int Event::kDepthMeanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:samples.hello.cv_service.messages.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_id();
  switch (from.id_case()) {
    case kClose: {
      mutable_close()->::google::protobuf::Empty::MergeFrom(from.close());
      break;
    }
    case kFar: {
      mutable_far()->::google::protobuf::Empty::MergeFrom(from.far());
      break;
    }
    case kDepthMean: {
      set_depth_mean(from.depth_mean());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:samples.hello.cv_service.messages.Event)
}

void Event::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Event_samples_2fhello_2fcv_2dservice_2fmessages_2eproto.base);
  clear_has_id();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:samples.hello.cv_service.messages.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Event_samples_2fhello_2fcv_2dservice_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:samples.hello.cv_service.messages.Event)
  switch (id_case()) {
    case kClose: {
      delete id_.close_;
      break;
    }
    case kFar: {
      delete id_.far_;
      break;
    }
    case kDepthMean: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:samples.hello.cv_service.messages.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_id();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Event::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Event*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Empty close = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Empty::_InternalParse;
        object = msg->mutable_close();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Empty far = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Empty::_InternalParse;
        object = msg->mutable_far();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // float depth_mean = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_depth_mean(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:samples.hello.cv_service.messages.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Empty close = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Empty far = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_far()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float depth_mean = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          clear_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &id_.depth_mean_)));
          set_has_depth_mean();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:samples.hello.cv_service.messages.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:samples.hello.cv_service.messages.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:samples.hello.cv_service.messages.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty close = 1;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::close(this), output);
  }

  // .google.protobuf.Empty far = 2;
  if (has_far()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::far(this), output);
  }

  // float depth_mean = 3;
  if (has_depth_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->depth_mean(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:samples.hello.cv_service.messages.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:samples.hello.cv_service.messages.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty close = 1;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::close(this), target);
  }

  // .google.protobuf.Empty far = 2;
  if (has_far()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::far(this), target);
  }

  // float depth_mean = 3;
  if (has_depth_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->depth_mean(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:samples.hello.cv_service.messages.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:samples.hello.cv_service.messages.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (id_case()) {
    // .google.protobuf.Empty close = 1;
    case kClose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.close_);
      break;
    }
    // .google.protobuf.Empty far = 2;
    case kFar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.far_);
      break;
    }
    // float depth_mean = 3;
    case kDepthMean: {
      total_size += 1 + 4;
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:samples.hello.cv_service.messages.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:samples.hello.cv_service.messages.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:samples.hello.cv_service.messages.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:samples.hello.cv_service.messages.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.id_case()) {
    case kClose: {
      mutable_close()->::google::protobuf::Empty::MergeFrom(from.close());
      break;
    }
    case kFar: {
      mutable_far()->::google::protobuf::Empty::MergeFrom(from.far());
      break;
    }
    case kDepthMean: {
      set_depth_mean(from.depth_mean());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:samples.hello.cv_service.messages.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:samples.hello.cv_service.messages.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_samples_2fhello_2fcv_2dservice_2fmessages_2eproto);
  return ::file_level_metadata_samples_2fhello_2fcv_2dservice_2fmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace cv_service
}  // namespace hello
}  // namespace samples
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::samples::hello::cv_service::messages::Command* Arena::CreateMaybeMessage< ::samples::hello::cv_service::messages::Command >(Arena* arena) {
  return Arena::CreateInternal< ::samples::hello::cv_service::messages::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::samples::hello::cv_service::messages::Event* Arena::CreateMaybeMessage< ::samples::hello::cv_service::messages::Event >(Arena* arena) {
  return Arena::CreateInternal< ::samples::hello::cv_service::messages::Event >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
