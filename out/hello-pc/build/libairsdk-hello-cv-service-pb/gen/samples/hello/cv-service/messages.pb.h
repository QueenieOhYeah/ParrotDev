// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samples/hello/cv-service/messages.proto

#ifndef PROTOBUF_INCLUDED_samples_2fhello_2fcv_2dservice_2fmessages_2eproto
#define PROTOBUF_INCLUDED_samples_2fhello_2fcv_2dservice_2fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_samples_2fhello_2fcv_2dservice_2fmessages_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_samples_2fhello_2fcv_2dservice_2fmessages_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_samples_2fhello_2fcv_2dservice_2fmessages_2eproto();
namespace samples {
namespace hello {
namespace cv_service {
namespace messages {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace messages
}  // namespace cv_service
}  // namespace hello
}  // namespace samples
namespace google {
namespace protobuf {
template<> ::samples::hello::cv_service::messages::Command* Arena::CreateMaybeMessage<::samples::hello::cv_service::messages::Command>(Arena*);
template<> ::samples::hello::cv_service::messages::Event* Arena::CreateMaybeMessage<::samples::hello::cv_service::messages::Event>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace samples {
namespace hello {
namespace cv_service {
namespace messages {

// ===================================================================

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:samples.hello.cv_service.messages.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  enum IdCase {
    kProcessingStart = 1,
    kProcessingStop = 2,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Empty processing_start = 1;
  bool has_processing_start() const;
  void clear_processing_start();
  static const int kProcessingStartFieldNumber = 1;
  const ::google::protobuf::Empty& processing_start() const;
  ::google::protobuf::Empty* release_processing_start();
  ::google::protobuf::Empty* mutable_processing_start();
  void set_allocated_processing_start(::google::protobuf::Empty* processing_start);

  // .google.protobuf.Empty processing_stop = 2;
  bool has_processing_stop() const;
  void clear_processing_stop();
  static const int kProcessingStopFieldNumber = 2;
  const ::google::protobuf::Empty& processing_stop() const;
  ::google::protobuf::Empty* release_processing_stop();
  ::google::protobuf::Empty* mutable_processing_stop();
  void set_allocated_processing_stop(::google::protobuf::Empty* processing_stop);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:samples.hello.cv_service.messages.Command)
 private:
  class HasBitSetters;
  void set_has_processing_start();
  void set_has_processing_stop();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::Empty* processing_start_;
    ::google::protobuf::Empty* processing_stop_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_samples_2fhello_2fcv_2dservice_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:samples.hello.cv_service.messages.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Event& default_instance();

  enum IdCase {
    kClose = 1,
    kFar = 2,
    kDepthMean = 3,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Empty close = 1;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 1;
  const ::google::protobuf::Empty& close() const;
  ::google::protobuf::Empty* release_close();
  ::google::protobuf::Empty* mutable_close();
  void set_allocated_close(::google::protobuf::Empty* close);

  // .google.protobuf.Empty far = 2;
  bool has_far() const;
  void clear_far();
  static const int kFarFieldNumber = 2;
  const ::google::protobuf::Empty& far() const;
  ::google::protobuf::Empty* release_far();
  ::google::protobuf::Empty* mutable_far();
  void set_allocated_far(::google::protobuf::Empty* far);

  // float depth_mean = 3;
  private:
  bool has_depth_mean() const;
  public:
  void clear_depth_mean();
  static const int kDepthMeanFieldNumber = 3;
  float depth_mean() const;
  void set_depth_mean(float value);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:samples.hello.cv_service.messages.Event)
 private:
  class HasBitSetters;
  void set_has_close();
  void set_has_far();
  void set_has_depth_mean();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::Empty* close_;
    ::google::protobuf::Empty* far_;
    float depth_mean_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_samples_2fhello_2fcv_2dservice_2fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// .google.protobuf.Empty processing_start = 1;
inline bool Command::has_processing_start() const {
  return id_case() == kProcessingStart;
}
inline void Command::set_has_processing_start() {
  _oneof_case_[0] = kProcessingStart;
}
inline ::google::protobuf::Empty* Command::release_processing_start() {
  // @@protoc_insertion_point(field_release:samples.hello.cv_service.messages.Command.processing_start)
  if (has_processing_start()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.processing_start_;
    id_.processing_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::processing_start() const {
  // @@protoc_insertion_point(field_get:samples.hello.cv_service.messages.Command.processing_start)
  return has_processing_start()
      ? *id_.processing_start_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_processing_start() {
  if (!has_processing_start()) {
    clear_id();
    set_has_processing_start();
    id_.processing_start_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:samples.hello.cv_service.messages.Command.processing_start)
  return id_.processing_start_;
}

// .google.protobuf.Empty processing_stop = 2;
inline bool Command::has_processing_stop() const {
  return id_case() == kProcessingStop;
}
inline void Command::set_has_processing_stop() {
  _oneof_case_[0] = kProcessingStop;
}
inline ::google::protobuf::Empty* Command::release_processing_stop() {
  // @@protoc_insertion_point(field_release:samples.hello.cv_service.messages.Command.processing_stop)
  if (has_processing_stop()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.processing_stop_;
    id_.processing_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Command::processing_stop() const {
  // @@protoc_insertion_point(field_get:samples.hello.cv_service.messages.Command.processing_stop)
  return has_processing_stop()
      ? *id_.processing_stop_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Command::mutable_processing_stop() {
  if (!has_processing_stop()) {
    clear_id();
    set_has_processing_stop();
    id_.processing_stop_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:samples.hello.cv_service.messages.Command.processing_stop)
  return id_.processing_stop_;
}

inline bool Command::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Command::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Command::IdCase Command::id_case() const {
  return Command::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .google.protobuf.Empty close = 1;
inline bool Event::has_close() const {
  return id_case() == kClose;
}
inline void Event::set_has_close() {
  _oneof_case_[0] = kClose;
}
inline ::google::protobuf::Empty* Event::release_close() {
  // @@protoc_insertion_point(field_release:samples.hello.cv_service.messages.Event.close)
  if (has_close()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.close_;
    id_.close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::close() const {
  // @@protoc_insertion_point(field_get:samples.hello.cv_service.messages.Event.close)
  return has_close()
      ? *id_.close_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_close() {
  if (!has_close()) {
    clear_id();
    set_has_close();
    id_.close_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:samples.hello.cv_service.messages.Event.close)
  return id_.close_;
}

// .google.protobuf.Empty far = 2;
inline bool Event::has_far() const {
  return id_case() == kFar;
}
inline void Event::set_has_far() {
  _oneof_case_[0] = kFar;
}
inline ::google::protobuf::Empty* Event::release_far() {
  // @@protoc_insertion_point(field_release:samples.hello.cv_service.messages.Event.far)
  if (has_far()) {
    clear_has_id();
      ::google::protobuf::Empty* temp = id_.far_;
    id_.far_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Empty& Event::far() const {
  // @@protoc_insertion_point(field_get:samples.hello.cv_service.messages.Event.far)
  return has_far()
      ? *id_.far_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Event::mutable_far() {
  if (!has_far()) {
    clear_id();
    set_has_far();
    id_.far_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:samples.hello.cv_service.messages.Event.far)
  return id_.far_;
}

// float depth_mean = 3;
inline bool Event::has_depth_mean() const {
  return id_case() == kDepthMean;
}
inline void Event::set_has_depth_mean() {
  _oneof_case_[0] = kDepthMean;
}
inline void Event::clear_depth_mean() {
  if (has_depth_mean()) {
    id_.depth_mean_ = 0;
    clear_has_id();
  }
}
inline float Event::depth_mean() const {
  // @@protoc_insertion_point(field_get:samples.hello.cv_service.messages.Event.depth_mean)
  if (has_depth_mean()) {
    return id_.depth_mean_;
  }
  return 0;
}
inline void Event::set_depth_mean(float value) {
  if (!has_depth_mean()) {
    clear_id();
    set_has_depth_mean();
  }
  id_.depth_mean_ = value;
  // @@protoc_insertion_point(field_set:samples.hello.cv_service.messages.Event.depth_mean)
}

inline bool Event::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Event::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Event::IdCase Event::id_case() const {
  return Event::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace cv_service
}  // namespace hello
}  // namespace samples

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_samples_2fhello_2fcv_2dservice_2fmessages_2eproto
